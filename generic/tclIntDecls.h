/*
 * tclIntDecls.h --
 *
 *	This file contains the declarations for all unsupported
 *	functions that are exported by the Tcl library.  These
 *	interfaces are not guaranteed to remain the same between
 *	versions.  Use at your own risk.
 *
 * Copyright (c) 1998-1999 by Scriptics Corporation.
 *
 * See the file "license.terms" for information on usage and redistribution
 * of this file, and for a DISCLAIMER OF ALL WARRANTIES.
 *
 * RCS: @(#) $Id$
 */

#ifndef _TCLINTDECLS
#define _TCLINTDECLS

/*
 * WARNING: This file is automatically generated by the tools/genStubs.tcl
 * script.  Any modifications to the function declarations below should be made
 * in the generic/tclInt.decls script.
 */

/* !BEGIN!: Do not edit below this line. */

/*
 * Exported function declarations:
 */

/* 0 */
EXTERN int		TclAccess _ANSI_ARGS_((CONST char * path, int mode));
/* 1 */
EXTERN int		TclAccessDeleteProc _ANSI_ARGS_((
				TclAccessProc_ * proc));
/* 2 */
EXTERN int		TclAccessInsertProc _ANSI_ARGS_((
				TclAccessProc_ * proc));
/* 3 */
EXTERN void		TclAllocateFreeObjects _ANSI_ARGS_((void));
/* 4 */
EXTERN int		TclChdir _ANSI_ARGS_((Tcl_Interp * interp, 
				char * dirName));
/* 5 */
EXTERN int		TclCleanupChildren _ANSI_ARGS_((Tcl_Interp * interp, 
				int numPids, Tcl_Pid * pidPtr, 
				Tcl_Channel errorChan));
/* 6 */
EXTERN void		TclCleanupCommand _ANSI_ARGS_((Command * cmdPtr));
/* 7 */
EXTERN int		TclCopyAndCollapse _ANSI_ARGS_((int count, 
				char * src, char * dst));
/* 8 */
EXTERN int		TclCopyChannel _ANSI_ARGS_((Tcl_Interp * interp, 
				Tcl_Channel inChan, Tcl_Channel outChan, 
				int toRead, Tcl_Obj * cmdPtr));
/* 9 */
EXTERN int		TclCreatePipeline _ANSI_ARGS_((Tcl_Interp * interp, 
				int argc, char ** argv, 
				Tcl_Pid ** pidArrayPtr, TclFile * inPipePtr, 
				TclFile * outPipePtr, TclFile * errFilePtr));
/* 10 */
EXTERN int		TclCreateProc _ANSI_ARGS_((Tcl_Interp * interp, 
				Namespace * nsPtr, char * procName, 
				Tcl_Obj * argsPtr, Tcl_Obj * bodyPtr, 
				Proc ** procPtrPtr));
/* 11 */
EXTERN void		TclDeleteCompiledLocalVars _ANSI_ARGS_((
				Interp * iPtr, CallFrame * framePtr));
/* 12 */
EXTERN void		TclDeleteVars _ANSI_ARGS_((Interp * iPtr, 
				Tcl_HashTable * tablePtr));
/* 13 */
EXTERN int		TclDoGlob _ANSI_ARGS_((Tcl_Interp * interp, 
				char * separators, Tcl_DString * headPtr, 
				char * tail));
/* 14 */
EXTERN void		TclDumpMemoryInfo _ANSI_ARGS_((FILE * outFile));
/* 15 */
EXTERN void		TclExpandParseValue _ANSI_ARGS_((ParseValue * pvPtr, 
				int needed));
/* 16 */
EXTERN void		TclExprFloatError _ANSI_ARGS_((Tcl_Interp * interp, 
				double value));
/* 17 */
EXTERN int		TclFileAttrsCmd _ANSI_ARGS_((Tcl_Interp * interp, 
				int objc, Tcl_Obj *CONST objv[]));
/* 18 */
EXTERN int		TclFileCopyCmd _ANSI_ARGS_((Tcl_Interp * interp, 
				int argc, char ** argv));
/* 19 */
EXTERN int		TclFileDeleteCmd _ANSI_ARGS_((Tcl_Interp * interp, 
				int argc, char ** argv));
/* 20 */
EXTERN int		TclFileMakeDirsCmd _ANSI_ARGS_((Tcl_Interp * interp, 
				int argc, char ** argv));
/* 21 */
EXTERN int		TclFileRenameCmd _ANSI_ARGS_((Tcl_Interp * interp, 
				int argc, char ** argv));
/* 22 */
EXTERN void		TclFinalizeCompExecEnv _ANSI_ARGS_((void));
/* 23 */
EXTERN void		TclFinalizeEnvironment _ANSI_ARGS_((void));
/* 24 */
EXTERN void		TclFinalizeExecEnv _ANSI_ARGS_((void));
/* 25 */
EXTERN int		TclFindElement _ANSI_ARGS_((Tcl_Interp * interp, 
				char * list, int listLength, 
				char ** elementPtr, char ** nextPtr, 
				int * sizePtr, int * bracePtr));
/* 26 */
EXTERN Proc *		TclFindProc _ANSI_ARGS_((Interp * iPtr, 
				char * procName));
/* 27 */
EXTERN int		TclFormatInt _ANSI_ARGS_((char * buffer, long n));
/* 28 */
EXTERN void		TclFreePackageInfo _ANSI_ARGS_((Interp * iPtr));
/* 29 */
EXTERN char *		TclGetCwd _ANSI_ARGS_((Tcl_Interp * interp));
/* 30 */
EXTERN int		TclGetDate _ANSI_ARGS_((char * p, unsigned long now, 
				long zone, unsigned long * timePtr));
/* 31 */
EXTERN Tcl_Channel	TclGetDefaultStdChannel _ANSI_ARGS_((int type));
/* 32 */
EXTERN Tcl_Obj *	TclGetElementOfIndexedArray _ANSI_ARGS_((
				Tcl_Interp * interp, int localIndex, 
				Tcl_Obj * elemPtr, int leaveErrorMsg));
/* 33 */
EXTERN char *		TclGetEnv _ANSI_ARGS_((CONST char * name));
/* 34 */
EXTERN char *		TclGetExtension _ANSI_ARGS_((char * name));
/* 35 */
EXTERN int		TclGetFrame _ANSI_ARGS_((Tcl_Interp * interp, 
				char * string, CallFrame ** framePtrPtr));
/* 36 */
EXTERN TclCmdProcType	TclGetInterpProc _ANSI_ARGS_((void));
/* 37 */
EXTERN int		TclGetIntForIndex _ANSI_ARGS_((Tcl_Interp * interp, 
				Tcl_Obj * objPtr, int endValue, 
				int * indexPtr));
/* 38 */
EXTERN Tcl_Obj *	TclGetIndexedScalar _ANSI_ARGS_((Tcl_Interp * interp, 
				int localIndex, int leaveErrorMsg));
/* 39 */
EXTERN int		TclGetLong _ANSI_ARGS_((Tcl_Interp * interp, 
				char * string, long * longPtr));
/* 40 */
EXTERN int		TclGetLoadedPackages _ANSI_ARGS_((
				Tcl_Interp * interp, char * targetName));
/* 41 */
EXTERN int		TclGetNamespaceForQualName _ANSI_ARGS_((
				Tcl_Interp * interp, char * qualName, 
				Namespace * cxtNsPtr, int flags, 
				Namespace ** nsPtrPtr, 
				Namespace ** altNsPtrPtr, 
				Namespace ** actualCxtPtrPtr, 
				char ** simpleNamePtr));
/* 42 */
EXTERN TclObjCmdProcType TclGetObjInterpProc _ANSI_ARGS_((void));
/* 43 */
EXTERN int		TclGetOpenMode _ANSI_ARGS_((Tcl_Interp * interp, 
				char * string, int * seekFlagPtr));
/* 44 */
EXTERN Tcl_Command	TclGetOriginalCommand _ANSI_ARGS_((
				Tcl_Command command));
/* 45 */
EXTERN char *		TclGetUserHome _ANSI_ARGS_((char * name, 
				Tcl_DString * bufferPtr));
/* 46 */
EXTERN int		TclGlobalInvoke _ANSI_ARGS_((Tcl_Interp * interp, 
				int argc, char ** argv, int flags));
/* 47 */
EXTERN int		TclGuessPackageName _ANSI_ARGS_((char * fileName, 
				Tcl_DString * bufPtr));
/* 48 */
EXTERN int		TclHideUnsafeCommands _ANSI_ARGS_((
				Tcl_Interp * interp));
/* 49 */
EXTERN int		TclInExit _ANSI_ARGS_((void));
/* 50 */
EXTERN Tcl_Obj *	TclIncrElementOfIndexedArray _ANSI_ARGS_((
				Tcl_Interp * interp, int localIndex, 
				Tcl_Obj * elemPtr, long incrAmount));
/* 51 */
EXTERN Tcl_Obj *	TclIncrIndexedScalar _ANSI_ARGS_((
				Tcl_Interp * interp, int localIndex, 
				long incrAmount));
/* 52 */
EXTERN Tcl_Obj *	TclIncrVar2 _ANSI_ARGS_((Tcl_Interp * interp, 
				Tcl_Obj * part1Ptr, Tcl_Obj * part2Ptr, 
				long incrAmount, int part1NotParsed));
/* 53 */
EXTERN void		TclInitCompiledLocals _ANSI_ARGS_((
				Tcl_Interp * interp, CallFrame * framePtr, 
				Namespace * nsPtr));
/* 54 */
EXTERN void		TclInitNamespaces _ANSI_ARGS_((void));
/* 55 */
EXTERN int		TclInterpInit _ANSI_ARGS_((Tcl_Interp * interp));
/* 56 */
EXTERN int		TclInvoke _ANSI_ARGS_((Tcl_Interp * interp, int argc, 
				char ** argv, int flags));
/* 57 */
EXTERN int		TclInvokeObjectCommand _ANSI_ARGS_((
				ClientData clientData, Tcl_Interp * interp, 
				int argc, char ** argv));
/* 58 */
EXTERN int		TclInvokeStringCommand _ANSI_ARGS_((
				ClientData clientData, Tcl_Interp * interp, 
				int objc, Tcl_Obj *CONST objv[]));
/* 59 */
EXTERN Proc *		TclIsProc _ANSI_ARGS_((Command * cmdPtr));
/* 60 */
EXTERN int		TclLoadFile _ANSI_ARGS_((Tcl_Interp * interp, 
				char * fileName, char * sym1, char * sym2, 
				Tcl_PackageInitProc ** proc1Ptr, 
				Tcl_PackageInitProc ** proc2Ptr));
/* 61 */
EXTERN int		TclLooksLikeInt _ANSI_ARGS_((char * p));
/* 62 */
EXTERN Var *		TclLookupVar _ANSI_ARGS_((Tcl_Interp * interp, 
				char * part1, char * part2, int flags, 
				char * msg, int createPart1, int createPart2, 
				Var ** arrayPtrPtr));
/* 63 */
EXTERN int		TclMatchFiles _ANSI_ARGS_((Tcl_Interp * interp, 
				char * separators, Tcl_DString * dirPtr, 
				char * pattern, char * tail));
/* 64 */
EXTERN int		TclNeedSpace _ANSI_ARGS_((char * start, char * end));
/* 65 */
EXTERN Tcl_Obj *	TclNewProcBodyObj _ANSI_ARGS_((Proc * procPtr));
/* 66 */
EXTERN int		TclObjCommandComplete _ANSI_ARGS_((Tcl_Obj * cmdPtr));
/* 67 */
EXTERN int		TclObjInterpProc _ANSI_ARGS_((ClientData clientData, 
				Tcl_Interp * interp, int objc, 
				Tcl_Obj *CONST objv[]));
/* 68 */
EXTERN int		TclObjInvoke _ANSI_ARGS_((Tcl_Interp * interp, 
				int objc, Tcl_Obj *CONST objv[], int flags));
/* 69 */
EXTERN int		TclObjInvokeGlobal _ANSI_ARGS_((Tcl_Interp * interp, 
				int objc, Tcl_Obj *CONST objv[], int flags));
/* 70 */
EXTERN int		TclOpenFileChannelDeleteProc _ANSI_ARGS_((
				TclOpenFileChannelProc_ * proc));
/* 71 */
EXTERN int		TclOpenFileChannelInsertProc _ANSI_ARGS_((
				TclOpenFileChannelProc_ * proc));
/* 72 */
EXTERN int		TclpAccess _ANSI_ARGS_((CONST char * path, int mode));
/* 73 */
EXTERN char *		TclpAlloc _ANSI_ARGS_((unsigned int size));
/* 74 */
EXTERN int		TclpCopyFile _ANSI_ARGS_((char * source, char * dest));
/* 75 */
EXTERN int		TclpCopyDirectory _ANSI_ARGS_((char * source, 
				char * dest, Tcl_DString * errorPtr));
/* 76 */
EXTERN int		TclpCreateDirectory _ANSI_ARGS_((char * path));
/* 77 */
EXTERN int		TclpDeleteFile _ANSI_ARGS_((char * path));
/* 78 */
EXTERN void		TclpFree _ANSI_ARGS_((char * ptr));
/* 79 */
EXTERN unsigned long	TclpGetClicks _ANSI_ARGS_((void));
/* 80 */
EXTERN unsigned long	TclpGetSeconds _ANSI_ARGS_((void));
/* 81 */
EXTERN void		TclpGetTime _ANSI_ARGS_((Tcl_Time * time));
/* 82 */
EXTERN int		TclpGetTimeZone _ANSI_ARGS_((unsigned long time));
/* 83 */
EXTERN int		TclpListVolumes _ANSI_ARGS_((Tcl_Interp * interp));
/* 84 */
EXTERN Tcl_Channel	TclpOpenFileChannel _ANSI_ARGS_((Tcl_Interp * interp, 
				char * fileName, char * modeString, 
				int permissions));
/* 85 */
EXTERN char *		TclpRealloc _ANSI_ARGS_((char * ptr, 
				unsigned int size));
/* 86 */
EXTERN int		TclpRemoveDirectory _ANSI_ARGS_((char * path, 
				int recursive, Tcl_DString * errorPtr));
/* 87 */
EXTERN int		TclpRenameFile _ANSI_ARGS_((char * source, 
				char * dest));
/* 88 */
EXTERN int		TclParseBraces _ANSI_ARGS_((Tcl_Interp * interp, 
				char * string, char ** termPtr, 
				ParseValue * pvPtr));
/* 89 */
EXTERN int		TclParseNestedCmd _ANSI_ARGS_((Tcl_Interp * interp, 
				char * string, int flags, char ** termPtr, 
				ParseValue * pvPtr));
/* 90 */
EXTERN int		TclParseQuotes _ANSI_ARGS_((Tcl_Interp * interp, 
				char * string, int termChar, int flags, 
				char ** termPtr, ParseValue * pvPtr));
/* 91 */
EXTERN void		TclPlatformInit _ANSI_ARGS_((Tcl_Interp * interp));
/* 92 */
EXTERN char *		TclPrecTraceProc _ANSI_ARGS_((ClientData clientData, 
				Tcl_Interp * interp, char * name1, 
				char * name2, int flags));
/* 93 */
EXTERN int		TclPreventAliasLoop _ANSI_ARGS_((Tcl_Interp * interp, 
				Tcl_Interp * cmdInterp, Tcl_Command cmd));
/* 94 */
EXTERN void		TclPrintByteCodeObj _ANSI_ARGS_((Tcl_Interp * interp, 
				Tcl_Obj * objPtr));
/* 95 */
EXTERN void		TclProcCleanupProc _ANSI_ARGS_((Proc * procPtr));
/* 96 */
EXTERN int		TclProcCompileProc _ANSI_ARGS_((Tcl_Interp * interp, 
				Proc * procPtr, Tcl_Obj * bodyPtr, 
				Namespace * nsPtr, CONST char * description, 
				CONST char * procName));
/* 97 */
EXTERN void		TclProcDeleteProc _ANSI_ARGS_((ClientData clientData));
/* 98 */
EXTERN int		TclProcInterpProc _ANSI_ARGS_((ClientData clientData, 
				Tcl_Interp * interp, int argc, char ** argv));
/* 99 */
EXTERN int		TclpStat _ANSI_ARGS_((CONST char * path, 
				struct stat * buf));
/* 100 */
EXTERN int		TclRenameCommand _ANSI_ARGS_((Tcl_Interp * interp, 
				char * oldName, char * newName));
/* 101 */
EXTERN void		TclResetShadowedCmdRefs _ANSI_ARGS_((
				Tcl_Interp * interp, Command * newCmdPtr));
/* 102 */
EXTERN int		TclServiceIdle _ANSI_ARGS_((void));
/* 103 */
EXTERN Tcl_Obj *	TclSetElementOfIndexedArray _ANSI_ARGS_((
				Tcl_Interp * interp, int localIndex, 
				Tcl_Obj * elemPtr, Tcl_Obj * objPtr, 
				int leaveErrorMsg));
/* 104 */
EXTERN Tcl_Obj *	TclSetIndexedScalar _ANSI_ARGS_((Tcl_Interp * interp, 
				int localIndex, Tcl_Obj * objPtr, 
				int leaveErrorMsg));
/* 105 */
EXTERN char *		TclSetPreInitScript _ANSI_ARGS_((char * string));
/* 106 */
EXTERN void		TclSetupEnv _ANSI_ARGS_((Tcl_Interp * interp));
/* 107 */
EXTERN int		TclSockGetPort _ANSI_ARGS_((Tcl_Interp * interp, 
				char * string, char * proto, int * portPtr));
/* 108 */
EXTERN int		TclSockMinimumBuffers _ANSI_ARGS_((int sock, 
				int size));
/* 109 */
EXTERN int		TclStat _ANSI_ARGS_((CONST char * path, 
				TclStat_ * buf));
/* 110 */
EXTERN int		TclStatDeleteProc _ANSI_ARGS_((TclStatProc_ * proc));
/* 111 */
EXTERN int		TclStatInsertProc _ANSI_ARGS_((TclStatProc_ * proc));
/* 112 */
EXTERN void		TclTeardownNamespace _ANSI_ARGS_((Namespace * nsPtr));
/* 113 */
EXTERN int		TclUpdateReturnInfo _ANSI_ARGS_((Interp * iPtr));
/* 114 */
EXTERN char *		TclWordEnd _ANSI_ARGS_((char * start, 
				char * lastChar, int nested, int * semiPtr));
/* 115 */
EXTERN void		Tcl_AddInterpResolvers _ANSI_ARGS_((
				Tcl_Interp * interp, char * name, 
				Tcl_ResolveCmdProc * cmdProc, 
				Tcl_ResolveVarProc * varProc, 
				Tcl_ResolveCompiledVarProc * compiledVarProc));
/* 116 */
EXTERN int		Tcl_AppendExportList _ANSI_ARGS_((
				Tcl_Interp * interp, Tcl_Namespace * nsPtr, 
				Tcl_Obj * objPtr));
/* 117 */
EXTERN Tcl_Namespace *	Tcl_CreateNamespace _ANSI_ARGS_((Tcl_Interp * interp, 
				char * name, ClientData clientData, 
				Tcl_NamespaceDeleteProc * deleteProc));
/* 118 */
EXTERN void		Tcl_DeleteNamespace _ANSI_ARGS_((
				Tcl_Namespace * nsPtr));
/* 119 */
EXTERN int		Tcl_Export _ANSI_ARGS_((Tcl_Interp * interp, 
				Tcl_Namespace * nsPtr, char * pattern, 
				int resetListFirst));
/* 120 */
EXTERN Tcl_Command	Tcl_FindCommand _ANSI_ARGS_((Tcl_Interp * interp, 
				char * name, Tcl_Namespace * contextNsPtr, 
				int flags));
/* 121 */
EXTERN Tcl_Namespace *	Tcl_FindNamespace _ANSI_ARGS_((Tcl_Interp * interp, 
				char * name, Tcl_Namespace * contextNsPtr, 
				int flags));
/* 122 */
EXTERN int		Tcl_GetInterpResolvers _ANSI_ARGS_((
				Tcl_Interp * interp, char * name, 
				Tcl_ResolverInfo * resInfo));
/* 123 */
EXTERN int		Tcl_GetNamespaceResolvers _ANSI_ARGS_((
				Tcl_Namespace * namespacePtr, 
				Tcl_ResolverInfo * resInfo));
/* 124 */
EXTERN Tcl_Var		Tcl_FindNamespaceVar _ANSI_ARGS_((
				Tcl_Interp * interp, char * name, 
				Tcl_Namespace * contextNsPtr, int flags));
/* 125 */
EXTERN int		Tcl_ForgetImport _ANSI_ARGS_((Tcl_Interp * interp, 
				Tcl_Namespace * nsPtr, char * pattern));
/* 126 */
EXTERN Tcl_Command	Tcl_GetCommandFromObj _ANSI_ARGS_((
				Tcl_Interp * interp, Tcl_Obj * objPtr));
/* 127 */
EXTERN void		Tcl_GetCommandFullName _ANSI_ARGS_((
				Tcl_Interp * interp, Tcl_Command command, 
				Tcl_Obj * objPtr));
/* 128 */
EXTERN Tcl_Namespace *	Tcl_GetCurrentNamespace _ANSI_ARGS_((
				Tcl_Interp * interp));
/* 129 */
EXTERN Tcl_Namespace *	Tcl_GetGlobalNamespace _ANSI_ARGS_((
				Tcl_Interp * interp));
/* 130 */
EXTERN void		Tcl_GetVariableFullName _ANSI_ARGS_((
				Tcl_Interp * interp, Tcl_Var variable, 
				Tcl_Obj * objPtr));
/* 131 */
EXTERN int		Tcl_Import _ANSI_ARGS_((Tcl_Interp * interp, 
				Tcl_Namespace * nsPtr, char * pattern, 
				int allowOverwrite));
/* 132 */
EXTERN void		Tcl_PopCallFrame _ANSI_ARGS_((Tcl_Interp* interp));
/* 133 */
EXTERN int		Tcl_PushCallFrame _ANSI_ARGS_((Tcl_Interp* interp, 
				Tcl_CallFrame * framePtr, 
				Tcl_Namespace * nsPtr, int isProcCallFrame));
/* 134 */
EXTERN int		Tcl_RemoveInterpResolvers _ANSI_ARGS_((
				Tcl_Interp * interp, char * name));
/* 135 */
EXTERN void		Tcl_SetNamespaceResolvers _ANSI_ARGS_((
				Tcl_Namespace * namespacePtr, 
				Tcl_ResolveCmdProc * cmdProc, 
				Tcl_ResolveVarProc * varProc, 
				Tcl_ResolveCompiledVarProc * compiledVarProc));
/* 136 */
EXTERN int		TclCompileBreakCmd _ANSI_ARGS_((Tcl_Interp * interp, 
				char * string, char * lastChar, 
				int compileFlags, 
				struct CompileEnv * compileEnvPtr));
/* 137 */
EXTERN int		TclCompileCatchCmd _ANSI_ARGS_((Tcl_Interp * interp, 
				char * string, char * lastChar, 
				int compileFlags, 
				struct CompileEnv * compileEnvPtr));
/* 138 */
EXTERN int		TclCompileContinueCmd _ANSI_ARGS_((
				Tcl_Interp * interp, char * string, 
				char * lastChar, int compileFlags, 
				struct CompileEnv * compileEnvPtr));
/* 139 */
EXTERN int		TclCompileExprCmd _ANSI_ARGS_((Tcl_Interp * interp, 
				char * string, char * lastChar, 
				int compileFlags, 
				struct CompileEnv * compileEnvPtr));
/* 140 */
EXTERN int		TclCompileForCmd _ANSI_ARGS_((Tcl_Interp * interp, 
				char * string, char * lastChar, 
				int compileFlags, 
				struct CompileEnv * compileEnvPtr));
/* 141 */
EXTERN int		TclCompileForeachCmd _ANSI_ARGS_((
				Tcl_Interp * interp, char * string, 
				char * lastChar, int compileFlags, 
				struct CompileEnv * compileEnvPtr));
/* 142 */
EXTERN int		TclCompileIfCmd _ANSI_ARGS_((Tcl_Interp * interp, 
				char * string, char * lastChar, 
				int compileFlags, 
				struct CompileEnv * compileEnvPtr));
/* 143 */
EXTERN int		TclCompileIncrCmd _ANSI_ARGS_((Tcl_Interp * interp, 
				char * string, char * lastChar, 
				int compileFlags, 
				struct CompileEnv * compileEnvPtr));
/* 144 */
EXTERN int		TclCompileSetCmd _ANSI_ARGS_((Tcl_Interp * interp, 
				char * string, char * lastChar, 
				int compileFlags, 
				struct CompileEnv * compileEnvPtr));
/* 145 */
EXTERN int		TclCompileWhileCmd _ANSI_ARGS_((Tcl_Interp * interp, 
				char * string, char * lastChar, 
				int compileFlags, 
				struct CompileEnv * compileEnvPtr));
/* 146 */
EXTERN int		TclHasSockets _ANSI_ARGS_((Tcl_Interp * interp));
/* 147 */
EXTERN struct tm *	TclpGetDate _ANSI_ARGS_((TclpTime_t time, int useGMT));
/* 148 */
EXTERN size_t		TclStrftime _ANSI_ARGS_((char * s, size_t maxsize, 
				const char * format, const struct tm * t));
/* 149 */
EXTERN int		TclpCheckStackSpace _ANSI_ARGS_((void));

typedef struct TclIntStubs {
    int magic;
    struct TclIntStubHooks *hooks;

    int (*tclAccess) _ANSI_ARGS_((CONST char * path, int mode)); /* 0 */
    int (*tclAccessDeleteProc) _ANSI_ARGS_((TclAccessProc_ * proc)); /* 1 */
    int (*tclAccessInsertProc) _ANSI_ARGS_((TclAccessProc_ * proc)); /* 2 */
    void (*tclAllocateFreeObjects) _ANSI_ARGS_((void)); /* 3 */
    int (*tclChdir) _ANSI_ARGS_((Tcl_Interp * interp, char * dirName)); /* 4 */
    int (*tclCleanupChildren) _ANSI_ARGS_((Tcl_Interp * interp, int numPids, Tcl_Pid * pidPtr, Tcl_Channel errorChan)); /* 5 */
    void (*tclCleanupCommand) _ANSI_ARGS_((Command * cmdPtr)); /* 6 */
    int (*tclCopyAndCollapse) _ANSI_ARGS_((int count, char * src, char * dst)); /* 7 */
    int (*tclCopyChannel) _ANSI_ARGS_((Tcl_Interp * interp, Tcl_Channel inChan, Tcl_Channel outChan, int toRead, Tcl_Obj * cmdPtr)); /* 8 */
    int (*tclCreatePipeline) _ANSI_ARGS_((Tcl_Interp * interp, int argc, char ** argv, Tcl_Pid ** pidArrayPtr, TclFile * inPipePtr, TclFile * outPipePtr, TclFile * errFilePtr)); /* 9 */
    int (*tclCreateProc) _ANSI_ARGS_((Tcl_Interp * interp, Namespace * nsPtr, char * procName, Tcl_Obj * argsPtr, Tcl_Obj * bodyPtr, Proc ** procPtrPtr)); /* 10 */
    void (*tclDeleteCompiledLocalVars) _ANSI_ARGS_((Interp * iPtr, CallFrame * framePtr)); /* 11 */
    void (*tclDeleteVars) _ANSI_ARGS_((Interp * iPtr, Tcl_HashTable * tablePtr)); /* 12 */
    int (*tclDoGlob) _ANSI_ARGS_((Tcl_Interp * interp, char * separators, Tcl_DString * headPtr, char * tail)); /* 13 */
    void (*tclDumpMemoryInfo) _ANSI_ARGS_((FILE * outFile)); /* 14 */
    void (*tclExpandParseValue) _ANSI_ARGS_((ParseValue * pvPtr, int needed)); /* 15 */
    void (*tclExprFloatError) _ANSI_ARGS_((Tcl_Interp * interp, double value)); /* 16 */
    int (*tclFileAttrsCmd) _ANSI_ARGS_((Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 17 */
    int (*tclFileCopyCmd) _ANSI_ARGS_((Tcl_Interp * interp, int argc, char ** argv)); /* 18 */
    int (*tclFileDeleteCmd) _ANSI_ARGS_((Tcl_Interp * interp, int argc, char ** argv)); /* 19 */
    int (*tclFileMakeDirsCmd) _ANSI_ARGS_((Tcl_Interp * interp, int argc, char ** argv)); /* 20 */
    int (*tclFileRenameCmd) _ANSI_ARGS_((Tcl_Interp * interp, int argc, char ** argv)); /* 21 */
    void (*tclFinalizeCompExecEnv) _ANSI_ARGS_((void)); /* 22 */
    void (*tclFinalizeEnvironment) _ANSI_ARGS_((void)); /* 23 */
    void (*tclFinalizeExecEnv) _ANSI_ARGS_((void)); /* 24 */
    int (*tclFindElement) _ANSI_ARGS_((Tcl_Interp * interp, char * list, int listLength, char ** elementPtr, char ** nextPtr, int * sizePtr, int * bracePtr)); /* 25 */
    Proc * (*tclFindProc) _ANSI_ARGS_((Interp * iPtr, char * procName)); /* 26 */
    int (*tclFormatInt) _ANSI_ARGS_((char * buffer, long n)); /* 27 */
    void (*tclFreePackageInfo) _ANSI_ARGS_((Interp * iPtr)); /* 28 */
    char * (*tclGetCwd) _ANSI_ARGS_((Tcl_Interp * interp)); /* 29 */
    int (*tclGetDate) _ANSI_ARGS_((char * p, unsigned long now, long zone, unsigned long * timePtr)); /* 30 */
    Tcl_Channel (*tclGetDefaultStdChannel) _ANSI_ARGS_((int type)); /* 31 */
    Tcl_Obj * (*tclGetElementOfIndexedArray) _ANSI_ARGS_((Tcl_Interp * interp, int localIndex, Tcl_Obj * elemPtr, int leaveErrorMsg)); /* 32 */
    char * (*tclGetEnv) _ANSI_ARGS_((CONST char * name)); /* 33 */
    char * (*tclGetExtension) _ANSI_ARGS_((char * name)); /* 34 */
    int (*tclGetFrame) _ANSI_ARGS_((Tcl_Interp * interp, char * string, CallFrame ** framePtrPtr)); /* 35 */
    TclCmdProcType (*tclGetInterpProc) _ANSI_ARGS_((void)); /* 36 */
    int (*tclGetIntForIndex) _ANSI_ARGS_((Tcl_Interp * interp, Tcl_Obj * objPtr, int endValue, int * indexPtr)); /* 37 */
    Tcl_Obj * (*tclGetIndexedScalar) _ANSI_ARGS_((Tcl_Interp * interp, int localIndex, int leaveErrorMsg)); /* 38 */
    int (*tclGetLong) _ANSI_ARGS_((Tcl_Interp * interp, char * string, long * longPtr)); /* 39 */
    int (*tclGetLoadedPackages) _ANSI_ARGS_((Tcl_Interp * interp, char * targetName)); /* 40 */
    int (*tclGetNamespaceForQualName) _ANSI_ARGS_((Tcl_Interp * interp, char * qualName, Namespace * cxtNsPtr, int flags, Namespace ** nsPtrPtr, Namespace ** altNsPtrPtr, Namespace ** actualCxtPtrPtr, char ** simpleNamePtr)); /* 41 */
    TclObjCmdProcType (*tclGetObjInterpProc) _ANSI_ARGS_((void)); /* 42 */
    int (*tclGetOpenMode) _ANSI_ARGS_((Tcl_Interp * interp, char * string, int * seekFlagPtr)); /* 43 */
    Tcl_Command (*tclGetOriginalCommand) _ANSI_ARGS_((Tcl_Command command)); /* 44 */
    char * (*tclGetUserHome) _ANSI_ARGS_((char * name, Tcl_DString * bufferPtr)); /* 45 */
    int (*tclGlobalInvoke) _ANSI_ARGS_((Tcl_Interp * interp, int argc, char ** argv, int flags)); /* 46 */
    int (*tclGuessPackageName) _ANSI_ARGS_((char * fileName, Tcl_DString * bufPtr)); /* 47 */
    int (*tclHideUnsafeCommands) _ANSI_ARGS_((Tcl_Interp * interp)); /* 48 */
    int (*tclInExit) _ANSI_ARGS_((void)); /* 49 */
    Tcl_Obj * (*tclIncrElementOfIndexedArray) _ANSI_ARGS_((Tcl_Interp * interp, int localIndex, Tcl_Obj * elemPtr, long incrAmount)); /* 50 */
    Tcl_Obj * (*tclIncrIndexedScalar) _ANSI_ARGS_((Tcl_Interp * interp, int localIndex, long incrAmount)); /* 51 */
    Tcl_Obj * (*tclIncrVar2) _ANSI_ARGS_((Tcl_Interp * interp, Tcl_Obj * part1Ptr, Tcl_Obj * part2Ptr, long incrAmount, int part1NotParsed)); /* 52 */
    void (*tclInitCompiledLocals) _ANSI_ARGS_((Tcl_Interp * interp, CallFrame * framePtr, Namespace * nsPtr)); /* 53 */
    void (*tclInitNamespaces) _ANSI_ARGS_((void)); /* 54 */
    int (*tclInterpInit) _ANSI_ARGS_((Tcl_Interp * interp)); /* 55 */
    int (*tclInvoke) _ANSI_ARGS_((Tcl_Interp * interp, int argc, char ** argv, int flags)); /* 56 */
    int (*tclInvokeObjectCommand) _ANSI_ARGS_((ClientData clientData, Tcl_Interp * interp, int argc, char ** argv)); /* 57 */
    int (*tclInvokeStringCommand) _ANSI_ARGS_((ClientData clientData, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 58 */
    Proc * (*tclIsProc) _ANSI_ARGS_((Command * cmdPtr)); /* 59 */
    int (*tclLoadFile) _ANSI_ARGS_((Tcl_Interp * interp, char * fileName, char * sym1, char * sym2, Tcl_PackageInitProc ** proc1Ptr, Tcl_PackageInitProc ** proc2Ptr)); /* 60 */
    int (*tclLooksLikeInt) _ANSI_ARGS_((char * p)); /* 61 */
    Var * (*tclLookupVar) _ANSI_ARGS_((Tcl_Interp * interp, char * part1, char * part2, int flags, char * msg, int createPart1, int createPart2, Var ** arrayPtrPtr)); /* 62 */
    int (*tclMatchFiles) _ANSI_ARGS_((Tcl_Interp * interp, char * separators, Tcl_DString * dirPtr, char * pattern, char * tail)); /* 63 */
    int (*tclNeedSpace) _ANSI_ARGS_((char * start, char * end)); /* 64 */
    Tcl_Obj * (*tclNewProcBodyObj) _ANSI_ARGS_((Proc * procPtr)); /* 65 */
    int (*tclObjCommandComplete) _ANSI_ARGS_((Tcl_Obj * cmdPtr)); /* 66 */
    int (*tclObjInterpProc) _ANSI_ARGS_((ClientData clientData, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 67 */
    int (*tclObjInvoke) _ANSI_ARGS_((Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[], int flags)); /* 68 */
    int (*tclObjInvokeGlobal) _ANSI_ARGS_((Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[], int flags)); /* 69 */
    int (*tclOpenFileChannelDeleteProc) _ANSI_ARGS_((TclOpenFileChannelProc_ * proc)); /* 70 */
    int (*tclOpenFileChannelInsertProc) _ANSI_ARGS_((TclOpenFileChannelProc_ * proc)); /* 71 */
    int (*tclpAccess) _ANSI_ARGS_((CONST char * path, int mode)); /* 72 */
    char * (*tclpAlloc) _ANSI_ARGS_((unsigned int size)); /* 73 */
    int (*tclpCopyFile) _ANSI_ARGS_((char * source, char * dest)); /* 74 */
    int (*tclpCopyDirectory) _ANSI_ARGS_((char * source, char * dest, Tcl_DString * errorPtr)); /* 75 */
    int (*tclpCreateDirectory) _ANSI_ARGS_((char * path)); /* 76 */
    int (*tclpDeleteFile) _ANSI_ARGS_((char * path)); /* 77 */
    void (*tclpFree) _ANSI_ARGS_((char * ptr)); /* 78 */
    unsigned long (*tclpGetClicks) _ANSI_ARGS_((void)); /* 79 */
    unsigned long (*tclpGetSeconds) _ANSI_ARGS_((void)); /* 80 */
    void (*tclpGetTime) _ANSI_ARGS_((Tcl_Time * time)); /* 81 */
    int (*tclpGetTimeZone) _ANSI_ARGS_((unsigned long time)); /* 82 */
    int (*tclpListVolumes) _ANSI_ARGS_((Tcl_Interp * interp)); /* 83 */
    Tcl_Channel (*tclpOpenFileChannel) _ANSI_ARGS_((Tcl_Interp * interp, char * fileName, char * modeString, int permissions)); /* 84 */
    char * (*tclpRealloc) _ANSI_ARGS_((char * ptr, unsigned int size)); /* 85 */
    int (*tclpRemoveDirectory) _ANSI_ARGS_((char * path, int recursive, Tcl_DString * errorPtr)); /* 86 */
    int (*tclpRenameFile) _ANSI_ARGS_((char * source, char * dest)); /* 87 */
    int (*tclParseBraces) _ANSI_ARGS_((Tcl_Interp * interp, char * string, char ** termPtr, ParseValue * pvPtr)); /* 88 */
    int (*tclParseNestedCmd) _ANSI_ARGS_((Tcl_Interp * interp, char * string, int flags, char ** termPtr, ParseValue * pvPtr)); /* 89 */
    int (*tclParseQuotes) _ANSI_ARGS_((Tcl_Interp * interp, char * string, int termChar, int flags, char ** termPtr, ParseValue * pvPtr)); /* 90 */
    void (*tclPlatformInit) _ANSI_ARGS_((Tcl_Interp * interp)); /* 91 */
    char * (*tclPrecTraceProc) _ANSI_ARGS_((ClientData clientData, Tcl_Interp * interp, char * name1, char * name2, int flags)); /* 92 */
    int (*tclPreventAliasLoop) _ANSI_ARGS_((Tcl_Interp * interp, Tcl_Interp * cmdInterp, Tcl_Command cmd)); /* 93 */
    void (*tclPrintByteCodeObj) _ANSI_ARGS_((Tcl_Interp * interp, Tcl_Obj * objPtr)); /* 94 */
    void (*tclProcCleanupProc) _ANSI_ARGS_((Proc * procPtr)); /* 95 */
    int (*tclProcCompileProc) _ANSI_ARGS_((Tcl_Interp * interp, Proc * procPtr, Tcl_Obj * bodyPtr, Namespace * nsPtr, CONST char * description, CONST char * procName)); /* 96 */
    void (*tclProcDeleteProc) _ANSI_ARGS_((ClientData clientData)); /* 97 */
    int (*tclProcInterpProc) _ANSI_ARGS_((ClientData clientData, Tcl_Interp * interp, int argc, char ** argv)); /* 98 */
    int (*tclpStat) _ANSI_ARGS_((CONST char * path, struct stat * buf)); /* 99 */
    int (*tclRenameCommand) _ANSI_ARGS_((Tcl_Interp * interp, char * oldName, char * newName)); /* 100 */
    void (*tclResetShadowedCmdRefs) _ANSI_ARGS_((Tcl_Interp * interp, Command * newCmdPtr)); /* 101 */
    int (*tclServiceIdle) _ANSI_ARGS_((void)); /* 102 */
    Tcl_Obj * (*tclSetElementOfIndexedArray) _ANSI_ARGS_((Tcl_Interp * interp, int localIndex, Tcl_Obj * elemPtr, Tcl_Obj * objPtr, int leaveErrorMsg)); /* 103 */
    Tcl_Obj * (*tclSetIndexedScalar) _ANSI_ARGS_((Tcl_Interp * interp, int localIndex, Tcl_Obj * objPtr, int leaveErrorMsg)); /* 104 */
    char * (*tclSetPreInitScript) _ANSI_ARGS_((char * string)); /* 105 */
    void (*tclSetupEnv) _ANSI_ARGS_((Tcl_Interp * interp)); /* 106 */
    int (*tclSockGetPort) _ANSI_ARGS_((Tcl_Interp * interp, char * string, char * proto, int * portPtr)); /* 107 */
    int (*tclSockMinimumBuffers) _ANSI_ARGS_((int sock, int size)); /* 108 */
    int (*tclStat) _ANSI_ARGS_((CONST char * path, TclStat_ * buf)); /* 109 */
    int (*tclStatDeleteProc) _ANSI_ARGS_((TclStatProc_ * proc)); /* 110 */
    int (*tclStatInsertProc) _ANSI_ARGS_((TclStatProc_ * proc)); /* 111 */
    void (*tclTeardownNamespace) _ANSI_ARGS_((Namespace * nsPtr)); /* 112 */
    int (*tclUpdateReturnInfo) _ANSI_ARGS_((Interp * iPtr)); /* 113 */
    char * (*tclWordEnd) _ANSI_ARGS_((char * start, char * lastChar, int nested, int * semiPtr)); /* 114 */
    void (*tcl_AddInterpResolvers) _ANSI_ARGS_((Tcl_Interp * interp, char * name, Tcl_ResolveCmdProc * cmdProc, Tcl_ResolveVarProc * varProc, Tcl_ResolveCompiledVarProc * compiledVarProc)); /* 115 */
    int (*tcl_AppendExportList) _ANSI_ARGS_((Tcl_Interp * interp, Tcl_Namespace * nsPtr, Tcl_Obj * objPtr)); /* 116 */
    Tcl_Namespace * (*tcl_CreateNamespace) _ANSI_ARGS_((Tcl_Interp * interp, char * name, ClientData clientData, Tcl_NamespaceDeleteProc * deleteProc)); /* 117 */
    void (*tcl_DeleteNamespace) _ANSI_ARGS_((Tcl_Namespace * nsPtr)); /* 118 */
    int (*tcl_Export) _ANSI_ARGS_((Tcl_Interp * interp, Tcl_Namespace * nsPtr, char * pattern, int resetListFirst)); /* 119 */
    Tcl_Command (*tcl_FindCommand) _ANSI_ARGS_((Tcl_Interp * interp, char * name, Tcl_Namespace * contextNsPtr, int flags)); /* 120 */
    Tcl_Namespace * (*tcl_FindNamespace) _ANSI_ARGS_((Tcl_Interp * interp, char * name, Tcl_Namespace * contextNsPtr, int flags)); /* 121 */
    int (*tcl_GetInterpResolvers) _ANSI_ARGS_((Tcl_Interp * interp, char * name, Tcl_ResolverInfo * resInfo)); /* 122 */
    int (*tcl_GetNamespaceResolvers) _ANSI_ARGS_((Tcl_Namespace * namespacePtr, Tcl_ResolverInfo * resInfo)); /* 123 */
    Tcl_Var (*tcl_FindNamespaceVar) _ANSI_ARGS_((Tcl_Interp * interp, char * name, Tcl_Namespace * contextNsPtr, int flags)); /* 124 */
    int (*tcl_ForgetImport) _ANSI_ARGS_((Tcl_Interp * interp, Tcl_Namespace * nsPtr, char * pattern)); /* 125 */
    Tcl_Command (*tcl_GetCommandFromObj) _ANSI_ARGS_((Tcl_Interp * interp, Tcl_Obj * objPtr)); /* 126 */
    void (*tcl_GetCommandFullName) _ANSI_ARGS_((Tcl_Interp * interp, Tcl_Command command, Tcl_Obj * objPtr)); /* 127 */
    Tcl_Namespace * (*tcl_GetCurrentNamespace) _ANSI_ARGS_((Tcl_Interp * interp)); /* 128 */
    Tcl_Namespace * (*tcl_GetGlobalNamespace) _ANSI_ARGS_((Tcl_Interp * interp)); /* 129 */
    void (*tcl_GetVariableFullName) _ANSI_ARGS_((Tcl_Interp * interp, Tcl_Var variable, Tcl_Obj * objPtr)); /* 130 */
    int (*tcl_Import) _ANSI_ARGS_((Tcl_Interp * interp, Tcl_Namespace * nsPtr, char * pattern, int allowOverwrite)); /* 131 */
    void (*tcl_PopCallFrame) _ANSI_ARGS_((Tcl_Interp* interp)); /* 132 */
    int (*tcl_PushCallFrame) _ANSI_ARGS_((Tcl_Interp* interp, Tcl_CallFrame * framePtr, Tcl_Namespace * nsPtr, int isProcCallFrame)); /* 133 */
    int (*tcl_RemoveInterpResolvers) _ANSI_ARGS_((Tcl_Interp * interp, char * name)); /* 134 */
    void (*tcl_SetNamespaceResolvers) _ANSI_ARGS_((Tcl_Namespace * namespacePtr, Tcl_ResolveCmdProc * cmdProc, Tcl_ResolveVarProc * varProc, Tcl_ResolveCompiledVarProc * compiledVarProc)); /* 135 */
    int (*tclCompileBreakCmd) _ANSI_ARGS_((Tcl_Interp * interp, char * string, char * lastChar, int compileFlags, struct CompileEnv * compileEnvPtr)); /* 136 */
    int (*tclCompileCatchCmd) _ANSI_ARGS_((Tcl_Interp * interp, char * string, char * lastChar, int compileFlags, struct CompileEnv * compileEnvPtr)); /* 137 */
    int (*tclCompileContinueCmd) _ANSI_ARGS_((Tcl_Interp * interp, char * string, char * lastChar, int compileFlags, struct CompileEnv * compileEnvPtr)); /* 138 */
    int (*tclCompileExprCmd) _ANSI_ARGS_((Tcl_Interp * interp, char * string, char * lastChar, int compileFlags, struct CompileEnv * compileEnvPtr)); /* 139 */
    int (*tclCompileForCmd) _ANSI_ARGS_((Tcl_Interp * interp, char * string, char * lastChar, int compileFlags, struct CompileEnv * compileEnvPtr)); /* 140 */
    int (*tclCompileForeachCmd) _ANSI_ARGS_((Tcl_Interp * interp, char * string, char * lastChar, int compileFlags, struct CompileEnv * compileEnvPtr)); /* 141 */
    int (*tclCompileIfCmd) _ANSI_ARGS_((Tcl_Interp * interp, char * string, char * lastChar, int compileFlags, struct CompileEnv * compileEnvPtr)); /* 142 */
    int (*tclCompileIncrCmd) _ANSI_ARGS_((Tcl_Interp * interp, char * string, char * lastChar, int compileFlags, struct CompileEnv * compileEnvPtr)); /* 143 */
    int (*tclCompileSetCmd) _ANSI_ARGS_((Tcl_Interp * interp, char * string, char * lastChar, int compileFlags, struct CompileEnv * compileEnvPtr)); /* 144 */
    int (*tclCompileWhileCmd) _ANSI_ARGS_((Tcl_Interp * interp, char * string, char * lastChar, int compileFlags, struct CompileEnv * compileEnvPtr)); /* 145 */
    int (*tclHasSockets) _ANSI_ARGS_((Tcl_Interp * interp)); /* 146 */
    struct tm * (*tclpGetDate) _ANSI_ARGS_((TclpTime_t time, int useGMT)); /* 147 */
    size_t (*tclStrftime) _ANSI_ARGS_((char * s, size_t maxsize, const char * format, const struct tm * t)); /* 148 */
    int (*tclpCheckStackSpace) _ANSI_ARGS_((void)); /* 149 */
} TclIntStubs;

extern TclIntStubs *tclIntStubsPtr;

#if defined(USE_TCL_STUBS) && !defined(USE_TCL_STUB_PROCS)

/*
 * Inline function declarations:
 */

#ifndef TclAccess
#define TclAccess(path, mode) \
	(tclIntStubsPtr->tclAccess)(path, mode) /* 0 */
#endif
#ifndef TclAccessDeleteProc
#define TclAccessDeleteProc(proc) \
	(tclIntStubsPtr->tclAccessDeleteProc)(proc) /* 1 */
#endif
#ifndef TclAccessInsertProc
#define TclAccessInsertProc(proc) \
	(tclIntStubsPtr->tclAccessInsertProc)(proc) /* 2 */
#endif
#ifndef TclAllocateFreeObjects
#define TclAllocateFreeObjects() \
	(tclIntStubsPtr->tclAllocateFreeObjects)() /* 3 */
#endif
#ifndef TclChdir
#define TclChdir(interp, dirName) \
	(tclIntStubsPtr->tclChdir)(interp, dirName) /* 4 */
#endif
#ifndef TclCleanupChildren
#define TclCleanupChildren(interp, numPids, pidPtr, errorChan) \
	(tclIntStubsPtr->tclCleanupChildren)(interp, numPids, pidPtr, errorChan) /* 5 */
#endif
#ifndef TclCleanupCommand
#define TclCleanupCommand(cmdPtr) \
	(tclIntStubsPtr->tclCleanupCommand)(cmdPtr) /* 6 */
#endif
#ifndef TclCopyAndCollapse
#define TclCopyAndCollapse(count, src, dst) \
	(tclIntStubsPtr->tclCopyAndCollapse)(count, src, dst) /* 7 */
#endif
#ifndef TclCopyChannel
#define TclCopyChannel(interp, inChan, outChan, toRead, cmdPtr) \
	(tclIntStubsPtr->tclCopyChannel)(interp, inChan, outChan, toRead, cmdPtr) /* 8 */
#endif
#ifndef TclCreatePipeline
#define TclCreatePipeline(interp, argc, argv, pidArrayPtr, inPipePtr, outPipePtr, errFilePtr) \
	(tclIntStubsPtr->tclCreatePipeline)(interp, argc, argv, pidArrayPtr, inPipePtr, outPipePtr, errFilePtr) /* 9 */
#endif
#ifndef TclCreateProc
#define TclCreateProc(interp, nsPtr, procName, argsPtr, bodyPtr, procPtrPtr) \
	(tclIntStubsPtr->tclCreateProc)(interp, nsPtr, procName, argsPtr, bodyPtr, procPtrPtr) /* 10 */
#endif
#ifndef TclDeleteCompiledLocalVars
#define TclDeleteCompiledLocalVars(iPtr, framePtr) \
	(tclIntStubsPtr->tclDeleteCompiledLocalVars)(iPtr, framePtr) /* 11 */
#endif
#ifndef TclDeleteVars
#define TclDeleteVars(iPtr, tablePtr) \
	(tclIntStubsPtr->tclDeleteVars)(iPtr, tablePtr) /* 12 */
#endif
#ifndef TclDoGlob
#define TclDoGlob(interp, separators, headPtr, tail) \
	(tclIntStubsPtr->tclDoGlob)(interp, separators, headPtr, tail) /* 13 */
#endif
#ifndef TclDumpMemoryInfo
#define TclDumpMemoryInfo(outFile) \
	(tclIntStubsPtr->tclDumpMemoryInfo)(outFile) /* 14 */
#endif
#ifndef TclExpandParseValue
#define TclExpandParseValue(pvPtr, needed) \
	(tclIntStubsPtr->tclExpandParseValue)(pvPtr, needed) /* 15 */
#endif
#ifndef TclExprFloatError
#define TclExprFloatError(interp, value) \
	(tclIntStubsPtr->tclExprFloatError)(interp, value) /* 16 */
#endif
#ifndef TclFileAttrsCmd
#define TclFileAttrsCmd(interp, objc, objv) \
	(tclIntStubsPtr->tclFileAttrsCmd)(interp, objc, objv) /* 17 */
#endif
#ifndef TclFileCopyCmd
#define TclFileCopyCmd(interp, argc, argv) \
	(tclIntStubsPtr->tclFileCopyCmd)(interp, argc, argv) /* 18 */
#endif
#ifndef TclFileDeleteCmd
#define TclFileDeleteCmd(interp, argc, argv) \
	(tclIntStubsPtr->tclFileDeleteCmd)(interp, argc, argv) /* 19 */
#endif
#ifndef TclFileMakeDirsCmd
#define TclFileMakeDirsCmd(interp, argc, argv) \
	(tclIntStubsPtr->tclFileMakeDirsCmd)(interp, argc, argv) /* 20 */
#endif
#ifndef TclFileRenameCmd
#define TclFileRenameCmd(interp, argc, argv) \
	(tclIntStubsPtr->tclFileRenameCmd)(interp, argc, argv) /* 21 */
#endif
#ifndef TclFinalizeCompExecEnv
#define TclFinalizeCompExecEnv() \
	(tclIntStubsPtr->tclFinalizeCompExecEnv)() /* 22 */
#endif
#ifndef TclFinalizeEnvironment
#define TclFinalizeEnvironment() \
	(tclIntStubsPtr->tclFinalizeEnvironment)() /* 23 */
#endif
#ifndef TclFinalizeExecEnv
#define TclFinalizeExecEnv() \
	(tclIntStubsPtr->tclFinalizeExecEnv)() /* 24 */
#endif
#ifndef TclFindElement
#define TclFindElement(interp, list, listLength, elementPtr, nextPtr, sizePtr, bracePtr) \
	(tclIntStubsPtr->tclFindElement)(interp, list, listLength, elementPtr, nextPtr, sizePtr, bracePtr) /* 25 */
#endif
#ifndef TclFindProc
#define TclFindProc(iPtr, procName) \
	(tclIntStubsPtr->tclFindProc)(iPtr, procName) /* 26 */
#endif
#ifndef TclFormatInt
#define TclFormatInt(buffer, n) \
	(tclIntStubsPtr->tclFormatInt)(buffer, n) /* 27 */
#endif
#ifndef TclFreePackageInfo
#define TclFreePackageInfo(iPtr) \
	(tclIntStubsPtr->tclFreePackageInfo)(iPtr) /* 28 */
#endif
#ifndef TclGetCwd
#define TclGetCwd(interp) \
	(tclIntStubsPtr->tclGetCwd)(interp) /* 29 */
#endif
#ifndef TclGetDate
#define TclGetDate(p, now, zone, timePtr) \
	(tclIntStubsPtr->tclGetDate)(p, now, zone, timePtr) /* 30 */
#endif
#ifndef TclGetDefaultStdChannel
#define TclGetDefaultStdChannel(type) \
	(tclIntStubsPtr->tclGetDefaultStdChannel)(type) /* 31 */
#endif
#ifndef TclGetElementOfIndexedArray
#define TclGetElementOfIndexedArray(interp, localIndex, elemPtr, leaveErrorMsg) \
	(tclIntStubsPtr->tclGetElementOfIndexedArray)(interp, localIndex, elemPtr, leaveErrorMsg) /* 32 */
#endif
#ifndef TclGetEnv
#define TclGetEnv(name) \
	(tclIntStubsPtr->tclGetEnv)(name) /* 33 */
#endif
#ifndef TclGetExtension
#define TclGetExtension(name) \
	(tclIntStubsPtr->tclGetExtension)(name) /* 34 */
#endif
#ifndef TclGetFrame
#define TclGetFrame(interp, string, framePtrPtr) \
	(tclIntStubsPtr->tclGetFrame)(interp, string, framePtrPtr) /* 35 */
#endif
#ifndef TclGetInterpProc
#define TclGetInterpProc() \
	(tclIntStubsPtr->tclGetInterpProc)() /* 36 */
#endif
#ifndef TclGetIntForIndex
#define TclGetIntForIndex(interp, objPtr, endValue, indexPtr) \
	(tclIntStubsPtr->tclGetIntForIndex)(interp, objPtr, endValue, indexPtr) /* 37 */
#endif
#ifndef TclGetIndexedScalar
#define TclGetIndexedScalar(interp, localIndex, leaveErrorMsg) \
	(tclIntStubsPtr->tclGetIndexedScalar)(interp, localIndex, leaveErrorMsg) /* 38 */
#endif
#ifndef TclGetLong
#define TclGetLong(interp, string, longPtr) \
	(tclIntStubsPtr->tclGetLong)(interp, string, longPtr) /* 39 */
#endif
#ifndef TclGetLoadedPackages
#define TclGetLoadedPackages(interp, targetName) \
	(tclIntStubsPtr->tclGetLoadedPackages)(interp, targetName) /* 40 */
#endif
#ifndef TclGetNamespaceForQualName
#define TclGetNamespaceForQualName(interp, qualName, cxtNsPtr, flags, nsPtrPtr, altNsPtrPtr, actualCxtPtrPtr, simpleNamePtr) \
	(tclIntStubsPtr->tclGetNamespaceForQualName)(interp, qualName, cxtNsPtr, flags, nsPtrPtr, altNsPtrPtr, actualCxtPtrPtr, simpleNamePtr) /* 41 */
#endif
#ifndef TclGetObjInterpProc
#define TclGetObjInterpProc() \
	(tclIntStubsPtr->tclGetObjInterpProc)() /* 42 */
#endif
#ifndef TclGetOpenMode
#define TclGetOpenMode(interp, string, seekFlagPtr) \
	(tclIntStubsPtr->tclGetOpenMode)(interp, string, seekFlagPtr) /* 43 */
#endif
#ifndef TclGetOriginalCommand
#define TclGetOriginalCommand(command) \
	(tclIntStubsPtr->tclGetOriginalCommand)(command) /* 44 */
#endif
#ifndef TclGetUserHome
#define TclGetUserHome(name, bufferPtr) \
	(tclIntStubsPtr->tclGetUserHome)(name, bufferPtr) /* 45 */
#endif
#ifndef TclGlobalInvoke
#define TclGlobalInvoke(interp, argc, argv, flags) \
	(tclIntStubsPtr->tclGlobalInvoke)(interp, argc, argv, flags) /* 46 */
#endif
#ifndef TclGuessPackageName
#define TclGuessPackageName(fileName, bufPtr) \
	(tclIntStubsPtr->tclGuessPackageName)(fileName, bufPtr) /* 47 */
#endif
#ifndef TclHideUnsafeCommands
#define TclHideUnsafeCommands(interp) \
	(tclIntStubsPtr->tclHideUnsafeCommands)(interp) /* 48 */
#endif
#ifndef TclInExit
#define TclInExit() \
	(tclIntStubsPtr->tclInExit)() /* 49 */
#endif
#ifndef TclIncrElementOfIndexedArray
#define TclIncrElementOfIndexedArray(interp, localIndex, elemPtr, incrAmount) \
	(tclIntStubsPtr->tclIncrElementOfIndexedArray)(interp, localIndex, elemPtr, incrAmount) /* 50 */
#endif
#ifndef TclIncrIndexedScalar
#define TclIncrIndexedScalar(interp, localIndex, incrAmount) \
	(tclIntStubsPtr->tclIncrIndexedScalar)(interp, localIndex, incrAmount) /* 51 */
#endif
#ifndef TclIncrVar2
#define TclIncrVar2(interp, part1Ptr, part2Ptr, incrAmount, part1NotParsed) \
	(tclIntStubsPtr->tclIncrVar2)(interp, part1Ptr, part2Ptr, incrAmount, part1NotParsed) /* 52 */
#endif
#ifndef TclInitCompiledLocals
#define TclInitCompiledLocals(interp, framePtr, nsPtr) \
	(tclIntStubsPtr->tclInitCompiledLocals)(interp, framePtr, nsPtr) /* 53 */
#endif
#ifndef TclInitNamespaces
#define TclInitNamespaces() \
	(tclIntStubsPtr->tclInitNamespaces)() /* 54 */
#endif
#ifndef TclInterpInit
#define TclInterpInit(interp) \
	(tclIntStubsPtr->tclInterpInit)(interp) /* 55 */
#endif
#ifndef TclInvoke
#define TclInvoke(interp, argc, argv, flags) \
	(tclIntStubsPtr->tclInvoke)(interp, argc, argv, flags) /* 56 */
#endif
#ifndef TclInvokeObjectCommand
#define TclInvokeObjectCommand(clientData, interp, argc, argv) \
	(tclIntStubsPtr->tclInvokeObjectCommand)(clientData, interp, argc, argv) /* 57 */
#endif
#ifndef TclInvokeStringCommand
#define TclInvokeStringCommand(clientData, interp, objc, objv) \
	(tclIntStubsPtr->tclInvokeStringCommand)(clientData, interp, objc, objv) /* 58 */
#endif
#ifndef TclIsProc
#define TclIsProc(cmdPtr) \
	(tclIntStubsPtr->tclIsProc)(cmdPtr) /* 59 */
#endif
#ifndef TclLoadFile
#define TclLoadFile(interp, fileName, sym1, sym2, proc1Ptr, proc2Ptr) \
	(tclIntStubsPtr->tclLoadFile)(interp, fileName, sym1, sym2, proc1Ptr, proc2Ptr) /* 60 */
#endif
#ifndef TclLooksLikeInt
#define TclLooksLikeInt(p) \
	(tclIntStubsPtr->tclLooksLikeInt)(p) /* 61 */
#endif
#ifndef TclLookupVar
#define TclLookupVar(interp, part1, part2, flags, msg, createPart1, createPart2, arrayPtrPtr) \
	(tclIntStubsPtr->tclLookupVar)(interp, part1, part2, flags, msg, createPart1, createPart2, arrayPtrPtr) /* 62 */
#endif
#ifndef TclMatchFiles
#define TclMatchFiles(interp, separators, dirPtr, pattern, tail) \
	(tclIntStubsPtr->tclMatchFiles)(interp, separators, dirPtr, pattern, tail) /* 63 */
#endif
#ifndef TclNeedSpace
#define TclNeedSpace(start, end) \
	(tclIntStubsPtr->tclNeedSpace)(start, end) /* 64 */
#endif
#ifndef TclNewProcBodyObj
#define TclNewProcBodyObj(procPtr) \
	(tclIntStubsPtr->tclNewProcBodyObj)(procPtr) /* 65 */
#endif
#ifndef TclObjCommandComplete
#define TclObjCommandComplete(cmdPtr) \
	(tclIntStubsPtr->tclObjCommandComplete)(cmdPtr) /* 66 */
#endif
#ifndef TclObjInterpProc
#define TclObjInterpProc(clientData, interp, objc, objv) \
	(tclIntStubsPtr->tclObjInterpProc)(clientData, interp, objc, objv) /* 67 */
#endif
#ifndef TclObjInvoke
#define TclObjInvoke(interp, objc, objv, flags) \
	(tclIntStubsPtr->tclObjInvoke)(interp, objc, objv, flags) /* 68 */
#endif
#ifndef TclObjInvokeGlobal
#define TclObjInvokeGlobal(interp, objc, objv, flags) \
	(tclIntStubsPtr->tclObjInvokeGlobal)(interp, objc, objv, flags) /* 69 */
#endif
#ifndef TclOpenFileChannelDeleteProc
#define TclOpenFileChannelDeleteProc(proc) \
	(tclIntStubsPtr->tclOpenFileChannelDeleteProc)(proc) /* 70 */
#endif
#ifndef TclOpenFileChannelInsertProc
#define TclOpenFileChannelInsertProc(proc) \
	(tclIntStubsPtr->tclOpenFileChannelInsertProc)(proc) /* 71 */
#endif
#ifndef TclpAccess
#define TclpAccess(path, mode) \
	(tclIntStubsPtr->tclpAccess)(path, mode) /* 72 */
#endif
#ifndef TclpAlloc
#define TclpAlloc(size) \
	(tclIntStubsPtr->tclpAlloc)(size) /* 73 */
#endif
#ifndef TclpCopyFile
#define TclpCopyFile(source, dest) \
	(tclIntStubsPtr->tclpCopyFile)(source, dest) /* 74 */
#endif
#ifndef TclpCopyDirectory
#define TclpCopyDirectory(source, dest, errorPtr) \
	(tclIntStubsPtr->tclpCopyDirectory)(source, dest, errorPtr) /* 75 */
#endif
#ifndef TclpCreateDirectory
#define TclpCreateDirectory(path) \
	(tclIntStubsPtr->tclpCreateDirectory)(path) /* 76 */
#endif
#ifndef TclpDeleteFile
#define TclpDeleteFile(path) \
	(tclIntStubsPtr->tclpDeleteFile)(path) /* 77 */
#endif
#ifndef TclpFree
#define TclpFree(ptr) \
	(tclIntStubsPtr->tclpFree)(ptr) /* 78 */
#endif
#ifndef TclpGetClicks
#define TclpGetClicks() \
	(tclIntStubsPtr->tclpGetClicks)() /* 79 */
#endif
#ifndef TclpGetSeconds
#define TclpGetSeconds() \
	(tclIntStubsPtr->tclpGetSeconds)() /* 80 */
#endif
#ifndef TclpGetTime
#define TclpGetTime(time) \
	(tclIntStubsPtr->tclpGetTime)(time) /* 81 */
#endif
#ifndef TclpGetTimeZone
#define TclpGetTimeZone(time) \
	(tclIntStubsPtr->tclpGetTimeZone)(time) /* 82 */
#endif
#ifndef TclpListVolumes
#define TclpListVolumes(interp) \
	(tclIntStubsPtr->tclpListVolumes)(interp) /* 83 */
#endif
#ifndef TclpOpenFileChannel
#define TclpOpenFileChannel(interp, fileName, modeString, permissions) \
	(tclIntStubsPtr->tclpOpenFileChannel)(interp, fileName, modeString, permissions) /* 84 */
#endif
#ifndef TclpRealloc
#define TclpRealloc(ptr, size) \
	(tclIntStubsPtr->tclpRealloc)(ptr, size) /* 85 */
#endif
#ifndef TclpRemoveDirectory
#define TclpRemoveDirectory(path, recursive, errorPtr) \
	(tclIntStubsPtr->tclpRemoveDirectory)(path, recursive, errorPtr) /* 86 */
#endif
#ifndef TclpRenameFile
#define TclpRenameFile(source, dest) \
	(tclIntStubsPtr->tclpRenameFile)(source, dest) /* 87 */
#endif
#ifndef TclParseBraces
#define TclParseBraces(interp, string, termPtr, pvPtr) \
	(tclIntStubsPtr->tclParseBraces)(interp, string, termPtr, pvPtr) /* 88 */
#endif
#ifndef TclParseNestedCmd
#define TclParseNestedCmd(interp, string, flags, termPtr, pvPtr) \
	(tclIntStubsPtr->tclParseNestedCmd)(interp, string, flags, termPtr, pvPtr) /* 89 */
#endif
#ifndef TclParseQuotes
#define TclParseQuotes(interp, string, termChar, flags, termPtr, pvPtr) \
	(tclIntStubsPtr->tclParseQuotes)(interp, string, termChar, flags, termPtr, pvPtr) /* 90 */
#endif
#ifndef TclPlatformInit
#define TclPlatformInit(interp) \
	(tclIntStubsPtr->tclPlatformInit)(interp) /* 91 */
#endif
#ifndef TclPrecTraceProc
#define TclPrecTraceProc(clientData, interp, name1, name2, flags) \
	(tclIntStubsPtr->tclPrecTraceProc)(clientData, interp, name1, name2, flags) /* 92 */
#endif
#ifndef TclPreventAliasLoop
#define TclPreventAliasLoop(interp, cmdInterp, cmd) \
	(tclIntStubsPtr->tclPreventAliasLoop)(interp, cmdInterp, cmd) /* 93 */
#endif
#ifndef TclPrintByteCodeObj
#define TclPrintByteCodeObj(interp, objPtr) \
	(tclIntStubsPtr->tclPrintByteCodeObj)(interp, objPtr) /* 94 */
#endif
#ifndef TclProcCleanupProc
#define TclProcCleanupProc(procPtr) \
	(tclIntStubsPtr->tclProcCleanupProc)(procPtr) /* 95 */
#endif
#ifndef TclProcCompileProc
#define TclProcCompileProc(interp, procPtr, bodyPtr, nsPtr, description, procName) \
	(tclIntStubsPtr->tclProcCompileProc)(interp, procPtr, bodyPtr, nsPtr, description, procName) /* 96 */
#endif
#ifndef TclProcDeleteProc
#define TclProcDeleteProc(clientData) \
	(tclIntStubsPtr->tclProcDeleteProc)(clientData) /* 97 */
#endif
#ifndef TclProcInterpProc
#define TclProcInterpProc(clientData, interp, argc, argv) \
	(tclIntStubsPtr->tclProcInterpProc)(clientData, interp, argc, argv) /* 98 */
#endif
#ifndef TclpStat
#define TclpStat(path, buf) \
	(tclIntStubsPtr->tclpStat)(path, buf) /* 99 */
#endif
#ifndef TclRenameCommand
#define TclRenameCommand(interp, oldName, newName) \
	(tclIntStubsPtr->tclRenameCommand)(interp, oldName, newName) /* 100 */
#endif
#ifndef TclResetShadowedCmdRefs
#define TclResetShadowedCmdRefs(interp, newCmdPtr) \
	(tclIntStubsPtr->tclResetShadowedCmdRefs)(interp, newCmdPtr) /* 101 */
#endif
#ifndef TclServiceIdle
#define TclServiceIdle() \
	(tclIntStubsPtr->tclServiceIdle)() /* 102 */
#endif
#ifndef TclSetElementOfIndexedArray
#define TclSetElementOfIndexedArray(interp, localIndex, elemPtr, objPtr, leaveErrorMsg) \
	(tclIntStubsPtr->tclSetElementOfIndexedArray)(interp, localIndex, elemPtr, objPtr, leaveErrorMsg) /* 103 */
#endif
#ifndef TclSetIndexedScalar
#define TclSetIndexedScalar(interp, localIndex, objPtr, leaveErrorMsg) \
	(tclIntStubsPtr->tclSetIndexedScalar)(interp, localIndex, objPtr, leaveErrorMsg) /* 104 */
#endif
#ifndef TclSetPreInitScript
#define TclSetPreInitScript(string) \
	(tclIntStubsPtr->tclSetPreInitScript)(string) /* 105 */
#endif
#ifndef TclSetupEnv
#define TclSetupEnv(interp) \
	(tclIntStubsPtr->tclSetupEnv)(interp) /* 106 */
#endif
#ifndef TclSockGetPort
#define TclSockGetPort(interp, string, proto, portPtr) \
	(tclIntStubsPtr->tclSockGetPort)(interp, string, proto, portPtr) /* 107 */
#endif
#ifndef TclSockMinimumBuffers
#define TclSockMinimumBuffers(sock, size) \
	(tclIntStubsPtr->tclSockMinimumBuffers)(sock, size) /* 108 */
#endif
#ifndef TclStat
#define TclStat(path, buf) \
	(tclIntStubsPtr->tclStat)(path, buf) /* 109 */
#endif
#ifndef TclStatDeleteProc
#define TclStatDeleteProc(proc) \
	(tclIntStubsPtr->tclStatDeleteProc)(proc) /* 110 */
#endif
#ifndef TclStatInsertProc
#define TclStatInsertProc(proc) \
	(tclIntStubsPtr->tclStatInsertProc)(proc) /* 111 */
#endif
#ifndef TclTeardownNamespace
#define TclTeardownNamespace(nsPtr) \
	(tclIntStubsPtr->tclTeardownNamespace)(nsPtr) /* 112 */
#endif
#ifndef TclUpdateReturnInfo
#define TclUpdateReturnInfo(iPtr) \
	(tclIntStubsPtr->tclUpdateReturnInfo)(iPtr) /* 113 */
#endif
#ifndef TclWordEnd
#define TclWordEnd(start, lastChar, nested, semiPtr) \
	(tclIntStubsPtr->tclWordEnd)(start, lastChar, nested, semiPtr) /* 114 */
#endif
#ifndef Tcl_AddInterpResolvers
#define Tcl_AddInterpResolvers(interp, name, cmdProc, varProc, compiledVarProc) \
	(tclIntStubsPtr->tcl_AddInterpResolvers)(interp, name, cmdProc, varProc, compiledVarProc) /* 115 */
#endif
#ifndef Tcl_AppendExportList
#define Tcl_AppendExportList(interp, nsPtr, objPtr) \
	(tclIntStubsPtr->tcl_AppendExportList)(interp, nsPtr, objPtr) /* 116 */
#endif
#ifndef Tcl_CreateNamespace
#define Tcl_CreateNamespace(interp, name, clientData, deleteProc) \
	(tclIntStubsPtr->tcl_CreateNamespace)(interp, name, clientData, deleteProc) /* 117 */
#endif
#ifndef Tcl_DeleteNamespace
#define Tcl_DeleteNamespace(nsPtr) \
	(tclIntStubsPtr->tcl_DeleteNamespace)(nsPtr) /* 118 */
#endif
#ifndef Tcl_Export
#define Tcl_Export(interp, nsPtr, pattern, resetListFirst) \
	(tclIntStubsPtr->tcl_Export)(interp, nsPtr, pattern, resetListFirst) /* 119 */
#endif
#ifndef Tcl_FindCommand
#define Tcl_FindCommand(interp, name, contextNsPtr, flags) \
	(tclIntStubsPtr->tcl_FindCommand)(interp, name, contextNsPtr, flags) /* 120 */
#endif
#ifndef Tcl_FindNamespace
#define Tcl_FindNamespace(interp, name, contextNsPtr, flags) \
	(tclIntStubsPtr->tcl_FindNamespace)(interp, name, contextNsPtr, flags) /* 121 */
#endif
#ifndef Tcl_GetInterpResolvers
#define Tcl_GetInterpResolvers(interp, name, resInfo) \
	(tclIntStubsPtr->tcl_GetInterpResolvers)(interp, name, resInfo) /* 122 */
#endif
#ifndef Tcl_GetNamespaceResolvers
#define Tcl_GetNamespaceResolvers(namespacePtr, resInfo) \
	(tclIntStubsPtr->tcl_GetNamespaceResolvers)(namespacePtr, resInfo) /* 123 */
#endif
#ifndef Tcl_FindNamespaceVar
#define Tcl_FindNamespaceVar(interp, name, contextNsPtr, flags) \
	(tclIntStubsPtr->tcl_FindNamespaceVar)(interp, name, contextNsPtr, flags) /* 124 */
#endif
#ifndef Tcl_ForgetImport
#define Tcl_ForgetImport(interp, nsPtr, pattern) \
	(tclIntStubsPtr->tcl_ForgetImport)(interp, nsPtr, pattern) /* 125 */
#endif
#ifndef Tcl_GetCommandFromObj
#define Tcl_GetCommandFromObj(interp, objPtr) \
	(tclIntStubsPtr->tcl_GetCommandFromObj)(interp, objPtr) /* 126 */
#endif
#ifndef Tcl_GetCommandFullName
#define Tcl_GetCommandFullName(interp, command, objPtr) \
	(tclIntStubsPtr->tcl_GetCommandFullName)(interp, command, objPtr) /* 127 */
#endif
#ifndef Tcl_GetCurrentNamespace
#define Tcl_GetCurrentNamespace(interp) \
	(tclIntStubsPtr->tcl_GetCurrentNamespace)(interp) /* 128 */
#endif
#ifndef Tcl_GetGlobalNamespace
#define Tcl_GetGlobalNamespace(interp) \
	(tclIntStubsPtr->tcl_GetGlobalNamespace)(interp) /* 129 */
#endif
#ifndef Tcl_GetVariableFullName
#define Tcl_GetVariableFullName(interp, variable, objPtr) \
	(tclIntStubsPtr->tcl_GetVariableFullName)(interp, variable, objPtr) /* 130 */
#endif
#ifndef Tcl_Import
#define Tcl_Import(interp, nsPtr, pattern, allowOverwrite) \
	(tclIntStubsPtr->tcl_Import)(interp, nsPtr, pattern, allowOverwrite) /* 131 */
#endif
#ifndef Tcl_PopCallFrame
#define Tcl_PopCallFrame(interp) \
	(tclIntStubsPtr->tcl_PopCallFrame)(interp) /* 132 */
#endif
#ifndef Tcl_PushCallFrame
#define Tcl_PushCallFrame(interp, framePtr, nsPtr, isProcCallFrame) \
	(tclIntStubsPtr->tcl_PushCallFrame)(interp, framePtr, nsPtr, isProcCallFrame) /* 133 */
#endif
#ifndef Tcl_RemoveInterpResolvers
#define Tcl_RemoveInterpResolvers(interp, name) \
	(tclIntStubsPtr->tcl_RemoveInterpResolvers)(interp, name) /* 134 */
#endif
#ifndef Tcl_SetNamespaceResolvers
#define Tcl_SetNamespaceResolvers(namespacePtr, cmdProc, varProc, compiledVarProc) \
	(tclIntStubsPtr->tcl_SetNamespaceResolvers)(namespacePtr, cmdProc, varProc, compiledVarProc) /* 135 */
#endif
#ifndef TclCompileBreakCmd
#define TclCompileBreakCmd(interp, string, lastChar, compileFlags, compileEnvPtr) \
	(tclIntStubsPtr->tclCompileBreakCmd)(interp, string, lastChar, compileFlags, compileEnvPtr) /* 136 */
#endif
#ifndef TclCompileCatchCmd
#define TclCompileCatchCmd(interp, string, lastChar, compileFlags, compileEnvPtr) \
	(tclIntStubsPtr->tclCompileCatchCmd)(interp, string, lastChar, compileFlags, compileEnvPtr) /* 137 */
#endif
#ifndef TclCompileContinueCmd
#define TclCompileContinueCmd(interp, string, lastChar, compileFlags, compileEnvPtr) \
	(tclIntStubsPtr->tclCompileContinueCmd)(interp, string, lastChar, compileFlags, compileEnvPtr) /* 138 */
#endif
#ifndef TclCompileExprCmd
#define TclCompileExprCmd(interp, string, lastChar, compileFlags, compileEnvPtr) \
	(tclIntStubsPtr->tclCompileExprCmd)(interp, string, lastChar, compileFlags, compileEnvPtr) /* 139 */
#endif
#ifndef TclCompileForCmd
#define TclCompileForCmd(interp, string, lastChar, compileFlags, compileEnvPtr) \
	(tclIntStubsPtr->tclCompileForCmd)(interp, string, lastChar, compileFlags, compileEnvPtr) /* 140 */
#endif
#ifndef TclCompileForeachCmd
#define TclCompileForeachCmd(interp, string, lastChar, compileFlags, compileEnvPtr) \
	(tclIntStubsPtr->tclCompileForeachCmd)(interp, string, lastChar, compileFlags, compileEnvPtr) /* 141 */
#endif
#ifndef TclCompileIfCmd
#define TclCompileIfCmd(interp, string, lastChar, compileFlags, compileEnvPtr) \
	(tclIntStubsPtr->tclCompileIfCmd)(interp, string, lastChar, compileFlags, compileEnvPtr) /* 142 */
#endif
#ifndef TclCompileIncrCmd
#define TclCompileIncrCmd(interp, string, lastChar, compileFlags, compileEnvPtr) \
	(tclIntStubsPtr->tclCompileIncrCmd)(interp, string, lastChar, compileFlags, compileEnvPtr) /* 143 */
#endif
#ifndef TclCompileSetCmd
#define TclCompileSetCmd(interp, string, lastChar, compileFlags, compileEnvPtr) \
	(tclIntStubsPtr->tclCompileSetCmd)(interp, string, lastChar, compileFlags, compileEnvPtr) /* 144 */
#endif
#ifndef TclCompileWhileCmd
#define TclCompileWhileCmd(interp, string, lastChar, compileFlags, compileEnvPtr) \
	(tclIntStubsPtr->tclCompileWhileCmd)(interp, string, lastChar, compileFlags, compileEnvPtr) /* 145 */
#endif
#ifndef TclHasSockets
#define TclHasSockets(interp) \
	(tclIntStubsPtr->tclHasSockets)(interp) /* 146 */
#endif
#ifndef TclpGetDate
#define TclpGetDate(time, useGMT) \
	(tclIntStubsPtr->tclpGetDate)(time, useGMT) /* 147 */
#endif
#ifndef TclStrftime
#define TclStrftime(s, maxsize, format, t) \
	(tclIntStubsPtr->tclStrftime)(s, maxsize, format, t) /* 148 */
#endif
#ifndef TclpCheckStackSpace
#define TclpCheckStackSpace() \
	(tclIntStubsPtr->tclpCheckStackSpace)() /* 149 */
#endif

#endif /* defined(USE_TCL_STUBS) && !defined(USE_TCL_STUB_PROCS) */

/* !END!: Do not edit above this line. */

#endif /* _TCLINTDECLS */

