'\"
'\" Copyright (c) 1990-1994 The Regents of the University of California
'\" Copyright (c) 1994-1997 Sun Microsystems, Inc.
'\" Copyright (c) 1998-1999 Scriptics Corporation
'\" Copyright (c) 2000 Ajuba Solutions
'\" Contributions from Don Porter, NIST, 2002. (not subject to US copyright)
'\"
'\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\" 
'\" RCS: @(#) $Id$
'\" 
.so man.macros
.TH "tcltest" n 2.1 tcltest "Tcl Bundled Packages"
.BS
'\" Note:  do not modify the .SH NAME line immediately below!
.SH NAME
tcltest \- Test harness support code and utilities
.SH SYNOPSIS
.nf
\fBpackage require tcltest ?2.1?\fR
.sp
\fBtcltest::test \fIname description ?option value ...?\fR
\fBtcltest::test \fIname description ?constraints? body result\fR
\fBtcltest::test \fIname description optionList\fR
.sp
\fBtcltest::loadTestedCommands\fR
\fBtcltest::makeDirectory \fIname ?directory?\fR
\fBtcltest::removeDirectory \fIname ?directory?\fR
\fBtcltest::makeFile \fIcontents name ?directory?\fR
\fBtcltest::removeFile \fIname ?directory?\fR
\fBtcltest::viewFile \fIname ?directory?\fR
\fBtcltest::cleanupTests \fI?runningMultipleTests?\fR
\fBtcltest::runAllTests\fR
.sp
.VS 2.1
\fBtcltest::configure\fR
\fBtcltest::configure \fIoption\fR
\fBtcltest::configure \fIoption value ?option value ...?\fR
.VE
\fBtcltest::testConstraint \fIconstraint ?value?\fR
.VS 2.1
\fBtcltest::customMatch \fImode command\fR
.VE
\fBtcltest::outputChannel \fI?channelID?\fR
\fBtcltest::errorChannel \fI?channelID?\fR
\fBtcltest::interpreter \fI?interp?\fR
.sp
\fBtcltest::debug \fI?level?\fR
\fBtcltest::errorFile \fI?filename?\fR
\fBtcltest::limitConstraints \fI?boolean?\fR
\fBtcltest::loadFile \fI?filename?\fR
\fBtcltest::loadScript \fI?script?\fR
\fBtcltest::match \fI?patternList?\fR
\fBtcltest::matchDirectories \fI?patternList?\fR
\fBtcltest::matchFiles \fI?patternList?\fR
\fBtcltest::outputFile \fI?filename?\fR
\fBtcltest::preserveCore \fI?level?\fR
\fBtcltest::singleProcess \fI?boolean?\fR
\fBtcltest::skip \fI?patternList?\fR
\fBtcltest::skipDirectories \fI?patternList?\fR
\fBtcltest::skipFiles \fI?patternList?\fR
\fBtcltest::temporaryDirectory \fI?directory?\fR
\fBtcltest::testsDirectory \fI?directory?\fR
\fBtcltest::verbose \fI?level?\fR
.sp
\fBtcltest::bytestring \fIstring\fR
\fBtcltest::normalizeMsg \fImsg\fR
\fBtcltest::normalizePath \fIpathVar\fR
\fBtcltest::workingDirectory \fI?dir?\fR
.fi
.BE
.SH DESCRIPTION
.PP
The \fBtcltest\fR package provides several utility commands useful
in the construction of test suites for code instrumented to be
run by evaluation of Tcl commands.  Notably the built-in commands
of the Tcl library itself are tested by a test suite using the
tcltest package.
.PP
All the commands provided by the \fBtcltest\fR package are defined
in and exported from the \fB::tcltest\fR namespace, as indicated in
the \fBSYNOPSIS\fR above.  In the following sections, all commands
will be described by their simple names, in the interest of brevity.
.PP
The central command of \fBtcltest\fR is [\fBtest\fR] that defines
and runs a test.  Testing with [\fBtest\fR] involves evaluation
of a Tcl script and comparing the result to an expected result, as
configured and controlled by a number of options.  Several other
commands provided by \fBtcltest\fR govern the configuration of
[\fBtest\fR] and the collection of many [\fBtest\fR] commands into
test suites.
.PP
See \fBCREATING TEST SUITES WITH TCLTEST\fR below for an extended example
of how to use the commands of \fBtcltest\fR to produce test suites
for your Tcl-enabled code.
.SH COMMANDS
.TP
\fBtest\fR \fIname description ?option value ...?\fR
Defines and possibly runs a test with the name \fIname\fR and
description \fIdescription\fR.  The name and description of a test
are used in messages reported by [\fBtest\fR] during the
test, as configured by the options of \fBtcltest\fR.  The
remaining \fIoption value\fR arguments to [\fBtest\fR]
define the test, including the scripts to run, the conditions
under which to run them, the expected result, and the means
by which the expected and actual results should be compared.
See \fBTESTS\fR below for a complete description of the valid
options and how they define a test.  The [\fBtest\fR] command
returns an empty string.  
.TP
\fBtest\fR \fIname description ?constraints? body result\fR
This form of [\fBtest\fR] is provided to support test suites written
for version 1 of the \fBtcltest\fR package, and also a simpler
interface for a common usage.  It is the same as
[\fBtest\fR \fIname description\fB -constraints \fIconstraints\fB -body
\fIbody\fB -result \fIresult\fR].  All other options to [\fBtest\fR]
take their default values.  When \fIconstraints\fR is omitted, this
form of [\fBtest\fR] can be distinguished from the first because
all \fIoption\fRs begin with ``-''.
.TP
\fBtest\fR \fIname description optionList\fR
This form of [\fBtest\fR] was provided to enable passing many
options spanning several lines to [\fBtest\fR] as a single
argument quoted by braces, rather than needing to backslash quote
the newlines between arguments to [\fBtest\fR].  The \fIoptionList\fR
argument is expected to be a list with an even number of elements
representing \fIoption\fR and \fIvalue\fR arguments to pass
to [\fBtest\fR].  However, these values are not passed directly, as
in the alternate forms of [\fBswitch\fR].  Instead, this form makes
an unfortunate attempt to overthrow Tcl's substitution rules by
performing substitutions on some of these elements as an attempt to
implement a "do what I mean" interpretation of a brace-enclosed
``block''.  The result is nearly impossible to document clearly, and
for that reason this form is not recommended.  See \fBTESTS\fR below
for better ways to reduce the need to backslash quote newlines
when calling [\fBtest\fR].  If you insist on using this form, examine
the source code of \fBtcltest\fR if you want to know the substitution
details, or just enclose the third through last argument
to [\fBtest\fR] in braces and hope for the best.
.TP
\fBloadTestedCommands\fR
Evaluates the script specified by the [\fBconfigure -load\fR]
or [\fBconfigure -loadfile\fR] configuration options in the
caller's context.  Returns the result of that script evaluation,
including any error raised by the script.  Use this command
and the related configuration options to provide the commands
to be tested to the interpreter running the test suite.
.TP
\fBmakeFile\fR \fIcontents name ?directory?\fR
Create a file named \fIname\fR relative to
directory \fIdirectory\fR and write \fIcontents\fR
to that file using the encoding [\fBencoding system\fR].
Because the system encoding is used, this command
is only suitable for making text files.
The file will will be removed by the next evaluation
of [\fBcleanupTests\fR], unless it is removed by
[\fBremoveFile\fR] first.  The default value of
\fIdirectory\fR is the directory specified by
the \fB-tmpdir\fR option to [\fBconfigure\fR].
Returns the full path of the file created.  Use this command
to create any text file required by a test with contents as needed.
.TP
\fBremoveFile\fR \fIname ?directory?\fR
Force the file referenced by \fIname\fR to be removed.  This file name
should be relative to \fIdirectory\fR.   If left unspecified,
\fIdirectory\fR defaults to the directory specified by
the \fB-tmpdir\fR option to [\fBconfigure\fR].
Returns an empty string.  Use this command to delete files
created by [\fBmakeFile\fR].  
.TP
\fBmakeDirectory\fR \fIname ?directory?\fR
Create a directory named \fIname\fR relative to directory \fIdirectory\fR.
The directory will be removed by the next evaluation of [\fBcleanupTests\fR],
unless it is removed by [\fBremoveDirectory\fR] first.
The default value of \fIdirectory\fR is the directory specified by
the \fB-tmpdir\fR option to [\fBconfigure\fR].
Returns the full path of the directory created.  Use this command
to create any directories that are required to exist by a test.
.TP
\fBremoveDirectory\fR \fIname ?directory?\fR
Force the directory referenced by \fIname\fR to be removed. This
directory should be relative to \fIdirectory\fR.   The default
value of \fIdirectory\fR is the directory specified by
the \fB-tmpdir\fR option to [\fBconfigure\fR].
Returns an empty string.  Use this command to delete any directories
created by [\fBmakeDirectory\fR].  
.TP
\fBviewFile\fR \fIfile ?directory?\fR
Returns the contents of \fIfile\fR.  This file name
should be relative to \fIdirectory\fR.   The default value of
\fIdirectory\fR is the directory specified by
the \fB-tmpdir\fR option to [\fBconfigure\fR].  Use this command
as a convenient way to turn the contents of a file generated
by a test into the result of that test for matching against
an expected result.  The contents of the file are read using
the binary encoding, so the exact byte for byte contents are returned.
.TP
\fBcleanupTests\fR
Intended to clean up and summarize after several tests have been
run.  Typically called once per test file, at the end of the file
after all tests have been completed.  For best effectiveness, be
sure that the [\fBcleanupTests\fR] is evaluated even if an error
occurs earlier in the test file evaluation.  
.sp
Prints statistics about the tests run and removes files that were
created by [\fBmakeDirectory\fR] and [\fBmakeFile\fR] since the
last [\fBcleanupTests\fR].  Names of files and directories created
outside of [\fBmakeFile\fR] and [\fBmakeDirectory\fR] and
never deleted are printed to [\fBoutputChannel\fR].  This command
also restores the original shell environment, as described by the ::env
array. Returns an empty string.
.TP
\fBrunAllTests\fR
This is a master command meant to run an entire suite of tests,
spanning multiple files and/or directories, as governed by
the configurable options of \fBtcltest\fR.  See RUNNING ALL TESTS
below for a complete description of the many variations possible
with [\fBrunAllTests\fR].
.SH "CONFIGURATION COMMANDS"
.TP
\fBconfigure\fR
Returns the list of configurable options supported by \fBtcltest\fR.
See \fBCONFIGURABLE OPTIONS\fR below for the full list of options,
their valid values, and their effect on \fBtcltest\fR operations.
.TP
\fBconfigure \fIoption\fR
Returns the current value of the supported configurable option \fIoption\fR.
Raises an error if \fIoption\fR is not a supported configurable option.
.TP
\fBconfigure \fIoption value ?option value ...?\fR
Sets the value of each configurable option \fIoption\fR to the
corresponding value \fIvalue\fR, in order.  Raises an error if
an \fIoption\fR is not a supported configurable option, or if
\fIvalue\fR is not a valid value for the corresponding \fIoption\fR,
or if a \fIvalue\fR is not provided.  When an error is raised, the
operation of [\fBconfigure\fR] is halted, and subsequent \fIoption value\fR
arguments are not processed.
.sp
If the environment variable \fB::env(TCLTEST_OPTIONS)\fR exists when
the \fBtcltest\fR package is loaded (by [\fBpackage require tcltest\fR])
then it value is taken as a list of arguments to pass to [\fBconfigure\fR].
This allows the default values of the configuration options to be
set by the environment.
.TP
\fBcustomMatch \fImode script\fR
Registers \fImode\fR as a new legal value of the \fB-match\fR option
to [\fBtest\fR].  When the \fB-match \fImode\fR option is
passed to [\fBtest\fR], the script \fIscript\fR will be evaluated
to compare the actual result of evaluating the body of the test
to the expected result.
To perform the match, the \fIscript\fR is completed with two additional
words, the expected result, and the actual result, and the completed script
is evaluated in the global namespace.
The completed script is expected to return a boolean value indicating
whether or not the results match.  The built-in matching modes of
[\fBtest\fR] are \fBexact\fR, \fBglob\fR, and \fBregexp\fR.
.TP
\fBtestConstraint \fIconstraint ?boolean?\fR
Sets or returns the boolean value associated with the named \fIconstraint\fR.
See \fBTEST CONSTRAINTS\fR below for more information.
.TP
\fBinterpreter\fR \fI?executableName?\fR
Sets or returns the name of the executable to be [\fBexec\fR]ed by
[\fBrunAllTests\fR] to run each test file when
[\fBconfigure -singleproc\fR] is false.
The default value for [\fBinterpreter\fR] is the name of the
currently running program as returned by [\fBinfo nameofexecutable\fR].
.TP
\fBoutputChannel\fR \fI?channelID?\fR
Sets or returns the output channel ID.  This defaults to stdout.
Any test that prints test related output should send
that output to [\fBoutputChannel\fR] rather than letting
that output default to stdout.
.TP
\fBerrorChannel\fR \fI?channelID?\fR
Sets or returns the error channel ID.  This defaults to stderr.
Any test that prints error messages should send
that output to [\fBerrorChannel\fR] rather than printing
directly to stderr.
.SH "SHORTCUT COMMANDS"
.TP
\fBdebug \fI?level?\fR
Same as [\fBconfigure -debug \fI?level?\fR].
.TP
\fBerrorFile \fI?filename?\fR
Same as [\fBconfigure -errfile \fI?filename?\fR].
.TP
\fBlimitConstraints \fI?boolean?\fR
Same as [\fBconfigure -limitconstraints \fI?boolean?\fR].
.TP
\fBloadFile \fI?filename?\fR
Same as [\fBconfigure -loadfile \fI?filename?\fR].
.TP
\fBloadScript \fI?script?\fR
Same as [\fBconfigure -load \fI?script?\fR].
.TP
\fBmatch \fI?patternList?\fR
Same as [\fBconfigure -match \fI?patternList?\fR].
.TP
\fBmatchDirectories \fI?patternList?\fR
Same as [\fBconfigure -relateddir \fI?patternList?\fR].
.TP
\fBmatchFiles \fI?patternList?\fR
Same as [\fBconfigure -file \fI?patternList?\fR].
.TP
\fBoutputFile \fI?filename?\fR
Same as [\fBconfigure -outfile \fI?filename?\fR].
.TP
\fBpreserveCore \fI?level?\fR
Same as [\fBconfigure -preservecore \fI?level?\fR].
.TP
\fBsingleProcess \fI?boolean?\fR
Same as [\fBconfigure -singleproc \fI?boolean?\fR].
.TP
\fBskip \fI?patternList?\fR
Same as [\fBconfigure -skip \fI?patternList?\fR].
.TP
\fBskipDirectories \fI?patternList?\fR
Same as [\fBconfigure -asidefromdir \fI?patternList?\fR].
.TP
\fBskipFiles \fI?patternList?\fR
Same as [\fBconfigure -notfile \fI?patternList?\fR].
.TP
\fBtemporaryDirectory \fI?directory?\fR
Same as [\fBconfigure -tmpdir \fI?directory?\fR].
.TP
\fBtestsDirectory \fI?directory?\fR
Same as [\fBconfigure -testdir \fI?directory?\fR].
.TP
\fBverbose \fI?level?\fR
Same as [\fBconfigure -verbose \fI?level?\fR].
.SH "OTHER COMMANDS"
.PP
The remaining commands provided by \fBtcltest\fR have better
alternatives provided by Tcl itself.  They are retained to
support existing test suites, but should be avoided in new
code.
.TP
\fBworkingDirectory\fR \fI?directoryName?\fR
Sets or returns the current working directory when the test suite is
running.  The default value for workingDirectory is the directory in
which the test suite was launched.  The Tcl commands [\fBcd\fR] and
[\fBpwd\fR] are sufficient replacements.
.TP
\fBnormalizeMsg\fR \fImsg\fR
Returns the result of removing the ``extra'' newlines from \fImsg\fR,
where ``extra'' is rather imprecise.  Tcl offers plenty of string
processing commands to modify strings as you wish, and
[\fBcustomMatch\fR] allows flexible matching of actual and expected
results.
.TP
\fBnormalizePath\fR \fIpathVar\fR
Resolves symlinks in a path, thus creating a path without internal
redirection.  It is assumed that \fIpathVar\fR is absolute.
\fIpathVar\fR is modified in place.  The Tcl command [\fBfile normalize\fR]
is a sufficient replacement.
.TP
\fBbytestring\fR \fIstring\fR
Construct a string that consists of the requested sequence of bytes,
as opposed to a string of properly formed UTF-8 characters using the
value supplied in \fIstring\fR.  This allows the tester to create
denormalized or improperly formed strings to pass to C procedures that
are supposed to accept strings with embedded NULL types and confirm
that a string result has a certain pattern of bytes.  This is
exactly equivalent to the Tcl command [\fBencoding convertfrom identity\fR].
.SH TESTS
.PP
The [\fBtest\fR] command is the heart of the \fBtcltest\fR package.
Its essential function is to evaluate a Tcl script and compare
the result with an expected result.  The options of [\fBtest\fR]
define the test script, the environment in which to evaluate it,
the expected result, and how the compare the actual result to
the expected result.  Some configuration options of \fBtcltest\fR
also influence how [\fBtest\fR] operates.
.PP
The valid options for [\fBtest\fR] are summarized:
.CS
test \fIname\fR \fIdescription\fR
    ?-constraints \fIkeywordList|expression\fR
    ?-setup \fIsetupScript\fR?
    ?-body \fItestScript\fR?
    ?-cleanup \fIcleanupScript\fR?
    ?-result \fIexpectedAnswer\fR?
    ?-output \fIexpectedOutput\fR?
    ?-errorOutput \fIexpectedError\fR?
    ?-returnCodes \fIcodeList\fR?
    ?-match \fImode\fR?
.CE
The \fIname\fR may be any string.  It is conventional to choose
a \fIname\fR according to the pattern:
.CS
<target>-<majorNum>.<minorNum>
.CE
For white-box (regression) tests, the target should be the name of the
C function or Tcl procedure being tested.  For black-box tests, the
target should be the name of the feature being tested.  Some convetions
call for the names of black-box tests to have the suffix \fB_bb\fR.
Related tests should share a major number.  As a test suite evolves,
it is best to have the same test name continue to correspond to the
same test, so that it remains meaningful to say things like ``Test
foo-1.3 passed in all releases up to 3.4, but began failing in
release 3.5.''
.PP
During evaluation of [\fBtest\fR], the \fIname\fR will be compared
to the lists of string matching patterns returned by
[\fBconfigure -match\fR], and [\fBconfigure -skip\fR].  The test
will be run only if \fIname\fR matches one of the patterns from
[\fBconfigure -match\fR] and matches none of the patterns
from [\fRconfigure -skip\fB].
.PP
The \fIdescription\fR should be a short textual description of the
test.  The \fIdescription\fR is included in output produced by the
test, typically test failure messages.  Good \fIdescription\fR values
should briefly explain the purpose of the test to users of a test suite.
The name of a Tcl or C function being tested should be included in the
description for regression tests.  If the test case exists to reproduce
a bug, include the bug ID in the description. 
.PP
Valid attributes and associated values are:
.TP
\fB-constraints \fIkeywordList|expression\fR
The optional \fIconstraints\fR attribute can be list of one or more
keywords or an expression.  If the \fIconstraints\fR value consists of
keywords, each of these keywords being the name of a constraint
defined by a call to [\fItestConstraint\fR].  If any of these
elements is false or does not exist, the test is skipped.  If the
\fIconstraints\fR argument consists of an expression, that expression
is evaluated. If the expression evaluates to true, then the test is run.
Note that the expression form of \fIconstraints\fR may interfere with the
operation of [\fBconfigure -constraints\fR] and
[\fBconfigure -limitconstraints\fR], and is not recommended.
Appropriate constraints should be added to any tests that should
not always be run.  The default value is an empty list.  See TEST
CONSTRAINTS below for a list of built-in constraints and information
on how to add your own constraints.
.TP
\fB-setup \fIscript\fR
The optional \fIsetup\fR attribute indicates a \fIscript\fR that will be run
before the script indicated by the \fIbody\fR attribute.  If evaluation
of \fIscript\fR raises an error, the test will fail.  The default value
is an empty script.
.TP
\fB-body \fIscript\fR
The \fIbody\fR attribute indicates the \fIscript\fR to run to carry out the 
test.  It must return a result that can be checked for correctness.
If evaluation of \fIscript\fR raises an error, the test will fail.
The default value is an empty script.
.TP
\fB-cleanup \fIscript\fR
The optional \fIcleanup\fR attribute indicates a \fIscript\fR that will be
run after the script indicated by the \fIbody\fR attribute.
If evaluation of \fIscript\fR raises an error, the test will fail.
The default value is an empty script.
.TP
\fB-match \fImode\fR
The \fImatch\fR attribute determines how expected answers supplied in
\fIresult\fR, \fIoutput\fR, and \fIerrorOutput\fR are compared.  Valid
values for \fImode\fR are \fBregexp\fR, \fBglob\fR, \fRexact\fR, and
any value registered by a prior call to [\fIcustomMatch\fR].  The default
value is \fBexact\fR.
.TP
\fB-result \fIexpectedValue\fR
The \fIresult\fR attribute supplies the \fIexpectedValue\fR against which
the return value from script will be compared. The default value is
an empty string.
.TP
\fB-output \fIexpectedValue\fR
The \fIoutput\fR attribute supplies the \fIexpectedValue\fR against which
any output sent to \fBstdout\fR or [\fBoutputChannel\fR] during evaluation
of the script(s) will be compared.  Note that only output printed using
[\fBputs\fR] is used for comparison.  If \fIoutput\fR is not specified,
output sent to \fBstdout\fR and [\fBoutputChannel\fR] is not processed for
comparison.
.TP
\fB-errorOutput \fIexpectedValue\fR
The \fIerrorOutput\fR attribute supplies the \fIexpectedValue\fR against
which any output sent to \fBstderr\fR or [\fBerrorChannel\fR] during 
evaluation of the script(s) will be compared. Note that only output
printed using [\fBputs\fR] is used for comparison.  If \fIerrorOutput\fR
is not specified, output sent to \fBstderr\fR and [\fBerrorChannel\fR] is
not processed for comparison.
.TP
\fB-returnCodes \fIexpectedCodeList\fR
The optional \fIreturnCodes\fR attribute supplies \fIexpectedCodeList\fR,
a list of return codes that may be accepted from evaluation of the
\fBbody\fR script.  If evaluation of the \fBbody\fR script returns
a code not in the \fIexpectedCodeList\fR, the test fails.  All
return codes known to [\fBreturn\fR], in both numeric and symbolic
form, including extended return codes, are acceptable elements in
the \fIexpectedCodeList\fR.  Default value is \fB{ok return}\fR.
.PP
To pass, a test must successfully execute its setup, script, and
cleanup code.  The return code of the test and its return values must
match expected values, and if specified, output and error data from
the test must match expected output and error values.  If any of these
conditions are not met, then the test fails.  Note that all scripts
are evaluated in the context of the caller of [\fBtest\fR].
.PP
As long as [\fBtest\fR] is called with valid syntax, and legal
values for all attributes, it will not raise an error.  Test
failures are instead reported as output written to [\fBoutputChannel\fR].
In default operation, a successful test produces no output.  The output
messages produced by [\fBtest\fR] are controlled by the
[\fBconfigure -verbose\fR] option as described in CONFIGURABLE OPTIONS
below.  Any output produced by the test scripts themselves should be
produced using [\fBputs\fR] to [\fBoutputChannel\fR] or
[\fBerrorChannel\fR], so that users of the test suite may
easily capture output with the [\fBconfigure -outfile\fR] and
[\fBconfigure -errfile\fR] options, and so that the \fB-output\fR
and \fB-errorOutput\fR attributes work properly.
.SH "TEST CONSTRAINTS"
Constraints are used to determine whether or not a test should be skipped.
Each constraint has a name, which may be any string, and a boolean
value.  Each [\fBtest\fR] has a \fB-constraints\fR value which is a
list of constraint names.  The test will run only if all constraints
in the list are true-valued.  Thus, the \fB-constraints\fR option
of [\fBtest\fR] is a convenient, symbolic way to define any conditions
required for the test to be possible or meaningful.  For example,
a [\fBtest\fR] with \fB-constraints unix\fR will only be run
if the constraint \fBunix\fR is true, which indicates the test suite
is being run on a Unix platform.
.PP
Each [\fBtest\fR] should include whatever \fB-constraints\fR are
required to constrain it to run only where appropriate.  Several
constraints are pre-defined in the \fBtcltest\fR package, listed
below.  The registration of user-defined constraints is performed
by the [\fBtestConstraint\fR] command.  User-defined constraints
may appear within a test file, or within the script specified
by the [\fBconfigure -load\fR] or [\fBconfigure -loadfile\fR]
options.
.PP
The following is a list of constraints pre-defined by the
\fBtcltest\fR package itself:
.TP
\fIsingleTestInterp\fR
test can only be run if all test files are sourced into a single interpreter
.TP
\fIunix\fR
test can only be run on any UNIX platform
.TP
\fIwin\fR
test can only be run on any Windows platform
.TP
\fInt\fR
test can only be run on any Windows NT platform
.TP
\fI95\fR
test can only be run on any Windows 95 platform
.TP
\fI98\fR
test can only be run on any Windows 98 platform
.TP
\fImac\fR
test can only be run on any Mac platform
.TP
\fIunixOrWin\fR
test can only be run on a UNIX or Windows platform
.TP
\fImacOrWin\fR
test can only be run on a Mac or Windows platform
.TP
\fImacOrUnix\fR
test can only be run on a Mac or UNIX platform
.TP
\fItempNotWin\fR
test can not be run on Windows.  This flag is used to temporarily
disable a test. 
.TP
\fItempNotMac\fR
test can not be run on a Mac.  This flag is used
to temporarily disable a test.
.TP
\fIunixCrash\fR
test crashes if it's run on UNIX.  This flag is used to temporarily
disable a test. 
.TP
\fIwinCrash\fR
test crashes if it's run on Windows.  This flag is used to temporarily
disable a test. 
.TP
\fImacCrash\fR
test crashes if it's run on a Mac.  This flag is used to temporarily
disable a test. 
.TP
\fIemptyTest\fR
test is empty, and so not worth running, but it remains as a
place-holder for a test to be written in the future.  This constraint
has value false to cause tests to be skipped unless the user specifies
otherwise.
.TP
\fIknownBug\fR
test is known to fail and the bug is not yet fixed.  This constraint
has value false to cause tests to be skipped unless the user specifies
otherwise.
.TP
\fInonPortable\fR
test can only be run in some known development environment.
Some tests are inherently non-portable because they depend on things
like word length, file system configuration, window manager, etc.
This constraint has value false to cause tests to be skipped unless
the user specifies otherwise.  
.TP
\fIuserInteraction\fR
test requires interaction from the user.  This constraint has
value false to causes tests to be skipped unless the user specifies
otherwise.  
.TP
\fIinteractive\fR
test can only be run in if the interpreter is in interactive mode 
(when the global tcl_interactive variable is set to 1).
.TP
\fInonBlockFiles\fR
test can only be run if platform supports setting files into
nonblocking mode 
.TP
\fIasyncPipeClose\fR
test can only be run if platform supports async flush and async close
on a pipe 
.TP
\fIunixExecs\fR
test can only be run if this machine has Unix-style commands
\fBcat\fR, \fBecho\fR, \fBsh\fR, \fBwc\fR, \fBrm\fR, \fBsleep\fR,
\fBfgrep\fR, \fBps\fR, \fBchmod\fR, and \fBmkdir\fR available
.TP
\fIhasIsoLocale\fR
test can only be run if can switch to an ISO locale
.TP
\fIroot\fR
test can only run if Unix user is root
.TP
\fInotRoot\fR
test can only run if Unix user is not root
.TP
\fIeformat\fR
test can only run if app has a working version of sprintf with respect
to the "e" format of floating-point numbers.
.TP
\fIstdio\fR
test can only be run if the current app can be spawned via a pipe
.PP

Add description of -constraints and -limitconstraints here.

.SH "RUNNING ALL TESTS"

.SH "CONFIGURABLE OPTIONS"

.TP
\fBsingleProcess\fR \fI?value?\fR
Sets or returns a boolean indicating whether test files should be sourced
into the current interpreter by runAllTests or run in their own
processes. If \fIvalue\fR is true (1), tests are sourced into the
current interpreter.  If \fIvalue\fR is false (0), tests are run in
the interpreter specified in tcltest::interpreter.  The default value
for tcltest::singleProcess is false.

.TP
\fBdebug\fR \fI?level?\fR
Sets or returns the current debug level. The debug level determines
how much tcltest package debugging information is printed to stdout.
The default debug level is 0. Levels are defined as:
.RS
.IP 0
Do not display any debug information.
.IP 1
Display information regarding whether a test is skipped because it
doesn't match any of the tests that were specified using -match or
tcltest::match (userSpecifiedNonMatch) or matches any of the tests
specified by -skip or tcltest::skip (userSpecifiedSkip).  
.IP 2
Display the flag array parsed by the command line processor, the
contents of the ::env array, and all user-defined variables that exist
in the current namespace as they are used.
.IP 3
Display information regarding what individual procs in the test
harness are doing.
.RE

.TP
\fBverbose\fR \fI?levelList?\fR
Sets or returns the current verbosity level.  The default verbosity
level is "body".   See the "Test output" section for a more detailed
explanation of this option. Levels are defined as: 
.RS
.IP body
Display the body of failed tests
.IP pass
Print output when a test passes
.IP skip
Print output when a test is skipped
.IP start
Print output whenever a test starts
.IP error
Print errorInfo and errorCode, if they exist, when a test return code
does not match its expected return code
.RE

.TP
\fBtcltest::preserveCore\fR \fI?level?\fR
Sets or returns the current core preservation level.  This level
determines how stringent checks for core files are.  The default core
preservation level is 0.  Levels are defined as:
.RS
.IP 0
No checking - do not check for core files at the end of each test
command, but do check for them whenever tcltest::cleanupTests is
called from tcltest::runAllTests. 
.IP 1
Check for core files at the end of each test command and whenever
tcltest::cleanupTests is called from tcltest::runAllTests.
.IP 2
Check for core files at the end of all test commands and whenever
tcltest::cleanupTests is called from all.tcl.  Save any core files
produced in tcltest::temporaryDirectory.
.RE

.TP
\fBtcltest::limitConstraints \fI?value?\fR
Sets or returns a boolean indicating whether testing is being limited
to the list of constraints specified by the \fB-constraints\fR
command line option.  If \fIvalue\fR is true, only those tests
with constraints present in the list specified in the \fB-constraints\fR
command line option.

.TP
\fBtcltest::temporaryDirectory\fR \fI?directoryName?\fR
Sets or returns the output directory for temporary files created by
tcltest::makeFile and tcltest::makeDirectory. This defaults to the
directory returned by \fItcltest::workingDirectory\fR.

.TP
\fBtcltest::testsDirectory\fR \fI?directoryName?\fR
Sets or returns the directory where the tests reside.  This defaults
to the directory returned by \fItcltest::workingDirectory\fR
if the script cannot determine where the \fItests\fR directory is
located. This variable should be explicitly set if tests are being run
from an all.tcl file. 

.TP
\fBtcltest::match\fR \fI?globPatternList?\fR
Sets or returns the glob pattern list that determines which tests
should be run.  Only tests which match one of the glob patterns in
\fIglobPatternList\fR are run by the test harness.  The default value
for \fIglobPatternList\fR is '*'.

.TP
\fBtcltest::matchFiles\fR \fI?globPatternList?\fR
Sets or returns the glob pattern list that determines which test files
should be run.  Only test files which match one of the glob patterns in
\fIglobPatternList\fR are run by the test harness.  The default value
for \fIglobPatternList\fR is '*.test'.

.TP
\fBtcltest::matchDirectories\fR \fI?globPatternList?\fR
Sets or returns the glob pattern list that determines which test
subdirectories of the current test directory should be run.  Only test
subdirectories which match one of the glob patterns in 
\fIglobPatternList\fR are run by the test harness.  The default value
for \fIglobPatternList\fR is '*'.

.TP
\fBtcltest::skip\fR \fI?globPatternList?\fR
Sets or returns the glob pattern list that determines which tests (of
those matched by tcltest::match) should be skipped.  The default value
for \fIglobPatternList\fR is {}.

.TP
\fBtcltest::skipFiles\fR \fI?globPatternList?\fR
Sets or returns the glob pattern list that determines which test files
(of those matched by tcltest::matchFiles) should be skipped.  The
default value for \fIglobPatternList\fR is {}.

.TP
\fBtcltest::skipDirectories\fR \fI?globPatternList?\fR
Sets or returns the glob pattern list that determines which test
subdirectories (of those matched by tcltest::matchDirectories) should
be skipped.  The default value for \fIglobPatternList\fR is {}.

.TP
\fBtcltest::loadScript\fR \fI?script?\fR
Sets or returns the script executed by \fBloadTestedCommands\fR.   

.TP
\fBtcltest::loadFile\fR \fI?filename?\fR
Sets ore returns the file name associated with the script executed
\fBloadTestedCommands\fR.  If setting \fIfilename\fR, this proc will
open the file and call \fItcltest::loadScript\fR with the content.

.TP
\fBtcltest::outputFile\fR \fI?filename?\fR
Sets or returns the file name corresponding to the output file.  This
defaults to stdout. This proc calls 
outputChannel to set the output file channel.
Any test that prints test related output should send
that output to \fItcltest::outputChannel\fR rather than letting
that output default to stdout.

.TP
\fBtcltest::errorFile\fR \fI?filename?\fR
Sets or returns the file name corresponding to the error file.  This
defaults to stderr. This proc calls
errorChannel to set the error file channel.
Any test that prints test related error output should send
that output to \fItcltest::errorChannel\fR or
\fItcltest::outputChannel\fR rather than letting
that output default to stdout.

.SH "CREATING TEST SUITES WITH TCLTEST"


.SH "RUNNING TEST FILES"
Use the following command to run a test file that uses package
tcltest:
.CS
<shell> <testFile> ?<option> ?<value>?? ...
.CE
Command line options include (tcltest accessor procs that
correspond to each flag are listed at the end of each flag description
in parenthesis): 
.RS
.TP
\fB-help\fR
display usage information.
.TP
\fB-singleproc <bool>\fR
if <bool> is 0, run test files in separate interpreters.  if 1, source test
files into the current interpreter. (tcltest::singleProcess)
.TP
\fB-verbose <levelList>\fR
set the level of verbosity to a list containing 0 or more of "body",
"pass", "skip", "start", and "error".  See the "Test output" section
for an explanation of this option.  (tcltest::verbose)  
.TP
\fB-match <matchList>\fR
only run tests that match one or more of the glob patterns in
<matchList>.  (tcltest::match)
.TP
\fB-skip <skipList>\fR
do not run tests that match one or more of the glob patterns in
<skipList>.  (tcltest::skip)
.TP
\fB-file <globPatternList>\fR
only source test files that match any of the items in
<globPatternList> relative to tcltest::testsDirectory.  
This option
only makes sense if you are running tests using "all.tcl" as the
<testFile> instead of running single test files directly.
(tcltest::matchFiles) 
.TP
\fB-notfile <globPatternList>\fR
source files except for those that match any of the items in
<globPatternList> relative to tcltest::testsDirectory.
This option
only makes sense if you are running tests using "all.tcl" as the
<testFile> instead of running single test files directly.
(tcltest::skipFiles) 
.TP
\fB-relateddir <globPatternList>\fR
only run tests in directories that match any of the items in
<globPatternList> relative to tcltest::testsDirectory.  
This option
only makes sense if you are running tests using "all.tcl" as the
<testFile> instead of running single test files directly.
(tcltest::matchDirectories) 
.TP
\fB-asidefromdir <globPatternList>\fR
run tests in directories except for those that match any of the items in
<globPatternList> relative to tcltest::testsDirectory.
This option
only makes sense if you are running tests using "all.tcl" as the
<testFile> instead of running single test files directly.
(tcltest::skipDirectories) 
.TP
\fB-constraints <list>\fR
tests with any constraints in <list> will not be skipped.  Note that
elements of <list> must exactly match the existing constraints.  This
is useful if you want to make sure that tests with a particular
constraint are run (for example, if the tester wants to run all tests
with the knownBug constraint).
(tcltest::testConstraint)
.TP
\fB-limitconstraints <bool>\fR
If the argument to this flag is 1, the test harness limits test runs
to those tests that match the constraints listed by the -constraints
flag. Use of this flag requires use of the -constraints flag.  The
default value for this flag is 0 (false).  This is useful if you want
to run \fBonly\fR those tests that match the constraints listed using
the -constraints option.  A tester might want to do this if (for
example) he were
interested in running only those tests that are constrained to be
unixOnly and no other tests.
(tcltest::limitConstraints)
.TP
\fB-load <script>\fR
will use the specified script to load the commands under test
(tcltest::loadTestedCommands). The default is the empty
script. See -loadfile below too. (tcltest::loadScript)
.TP
\fB-loadfile <scriptfile>\fR
will use the contents of the named file to load the commands under
test (tcltest::loadTestedCommands). See -load above too. The default
is the empty script. (tcltest::loadFile)
.TP
\fB-tmpdir <directoryName>\fR
put any temporary files (created with tcltest::makeFile and
tcltest::makeDirectory) into the named directory.  The default
location is tcltest::workingDirectory.  (tcltest::temporaryDirectory)
.TP
\fB-testdir <directoryName>\fR
search the test suite to execute in the named directory.  The default
location is tcltest::workingDirectory.  (tcltest::testsDirectory)
.TP
\fB-preservecore <level>\fR
check for core files.  This flag is used to determine how much
checking should be done for core files.  (tcltest::preserveCore)
.TP
\fB-debug <debugLevel>\fR
print debug information to stdout.  This is used to debug code in the
tcltest package.  (tcltest::debug)
.TP
\fB-outfile <filename>\fR 
print output generated by the tcltest package to the named file.  This
defaults to stdout.  Note that debug output always goes to stdout,
regardless of this flag's setting.  (tcltest::outputFile)
.TP
\fB-errfile <filename>\fR
print errors generated by the tcltest package to the named file.  This
defaults to stderr.  (tcltest::errorFile)
.RE
.PP
You can specify any of the above options on the command line or by
defining an environment variable named TCLTEST_OPTIONS containing a
list of options (e.g. "-debug 3 -verbose 'pass skip'").  This 
environment variable is evaluated before the command line arguments.
Options specified on the command line override those specified in 
TCLTEST_OPTIONS. 
.PP
A second way to run tests is to start up a shell, load the
\fBtcltest\fR package, and then source an appropriate test file or use
the test command.  To use the options in interactive mode, set
their corresponding tcltest namespace variables after loading the
package.
.PP
See \fI"Test Constraints"\fR for a list of all built-in constraint names.
.PP
A final way to run tests would be to specify which test files to run
within an \fIall.tcl\fR (or otherwise named) file.  This is the
approach used by the Tcl test suite.  This file loads the tcltest
package, sets the location of
the test directory (tcltest::testsDirectory), and then calls the
\fItcltest::runAllTests\fR proc, which determines which test
files to run, how to run them, and calls tcltest::cleanupTests to
determine the summary status of the test suite.  
.PP
A more elaborate \fIall.tcl\fR file might do some pre- and
post-processing before sourcing 
each .test file, use separate interpreters for each file, or handle
complex directory structures.  
For an example of an all.tcl file,
please see the "Examples" section of this document.

.SH "TEST OUTPUT"
After all specified test files are run, the number of tests
passed, skipped, and failed is printed to
\fBtcltest::outputChannel\fR.  Aside from this 
statistical information, output can be controlled on a per-test basis
by the \fBtcltest::verbose\fR variable.
.PP
\fBtcltest::verbose\fR can be set to any combination of "body", 
"skip", "pass", "start", or "error".  The default value of
\fBtcltest::verbose\fR is "body".  If "body"  is present, then the
entire body of the test is printed for each failed test, otherwise
only the test's name, desired output, and 
actual output, are printed for each failed test.  If "pass" is present,
then a line is printed for each passed test, otherwise no line is
printed for passed tests.  If "skip" is present, then a line (containing
the constraints that cause the test to be skipped) is printed for each
skipped test, otherwise no line is printed for skipped tests.  If "start"
is present, then a line is printed each time a new test starts.
If "error" is present, then the content of errorInfo and errorCode (if
they are defined) is printed for each test whose return code doesn't
match its expected return code.
.PP
You can set \fBtcltest::verbose\fR either interactively (after the
\fBtcltest\fR package has been loaded) or by using the command line
argument \fB-verbose\fR, for example:
.CS
tclsh socket.test -verbose 'body pass skip'
.CE

.SH "CONTENTS OF A TEST FILE"
Test files should begin by loading the \fBtcltest\fR package:
.CS
package require tcltest
namespace import -force tcltest::*
.CE
Test files should end by cleaning up after themselves and calling
\fBtcltest::cleanupTests\fR.  The \fBtcltest::cleanupTests\fR
procedure prints statistics about the number of tests that passed,
skipped, and failed, and removes all files that were created using the
\fBtcltest::makeFile\fR and \fBtcltest::makeDirectory\fR procedures.
.CS
# Remove files created by these tests
# Change to original working directory
# Unset global arrays
tcltest::cleanupTests
return
.CE
When naming test files, file names should end with a .test extension.
The names of test files that contain regression (or glass-box) tests
should correspond to the Tcl or C code file that they are testing.
For example, the test file for the C file "tclCmdAH.c" is "cmdAH.test".  

.SH "SELECTING TESTS FOR EXECUTION"
.PP
Normally, all the tests in a file are run whenever the file is
sourced.  An individual test will be skipped if one of the following
conditions is met:
.IP [1]
the \fIname\fR of the tests does not match (using glob style matching)
one or more elements in the \fBtcltest::match\fR variable
.IP [2]
the \fIname\fR of the tests matches (using glob style matching) one or
more elements in the \fBtcltest::skip\fR variable 
.IP [3]
the \fIconstraints\fR argument to the \fBtcltest::test\fR call, if
given, contains one or more false elements. 
.PP
You can set \fBtcltest::match\fR and/or \fBtcltest::skip\fR
either interactively (after the \fBtcltest\fR package has been
sourced), or by using the command line arguments \fB-match\fR and
\fB-skip\fR, for example: 
.PP
.CS
tclsh info.test -match '*-5.* *-7.*' -skip '*-7.1*'
.CE
.PP
Be sure to use the proper quoting convention so that your shell does
not perform the glob substitution on the match or skip patterns you
specify.
.PP
Predefined constraints (e.g. \fIknownBug\fR and \fInonPortable\fR) can be
overridden either interactively (after the \fBtcltest\fR package has been
sourced) by setting the proper constraint
or by using the \fB-constraints\fR command line option with the name of the
constraint in the argument.  The following example shows how to run
tests that are constrained by the \fIknownBug\fR and \fInonPortable\fR
restrictions:
.PP
.CS
tclsh all.tcl -constraints "knownBug nonPortable"
.CE
.PP
See the \fI"Constraints"\fR section for information about using
built-in constraints and adding new ones.
.PP
When tests are run from within an \fBall.tcl\fR file, all files with a
``\fI.test\fR'' extension are normally run.  An individual test file will
be skipped if one of the following conditions is met:
.IP [1]
the \fIname\fR of the test files does not match (using glob style matching)
one or more elements in the \fBtcltest::matchFiles\fR variable
.IP [2]
the \fIname\fR of the test file matches (using glob style matching) one or
more elements in the \fBtcltest::skipFiles\fR variable 
.PP
You can set \fBtcltest::matchFiles\fR and/or \fBtcltest::skipFiles\fR
either interactively (after the \fBtcltest\fR package has been
sourced), or by using the command line arguments \fB-file\fR and
\fB-notfile\fR, for example: 
.PP
.CS
tclsh info.test -file 'unix*.test' -notfile 'unixNotfy.test'
.CE
.PP
Additionally, if tests are run from within an 'all.tcl' containing a
call to \fBtcltest::runAllTests\fR, any subdirectory of
\fItcltest::testsDirectory\fR containing an 'all.tcl' file will also
be run.  Individual test subdirectories will be skipped if one of the
following conditions is met:
.IP [1]
the \fIname\fR of the directory does not match (using glob style matching)
one or more elements in the \fBtcltest::matchDirectories\fR variable
.IP [2]
the \fIname\fR of the directory matches (using glob style matching) one or
more elements in the \fBtcltest::skipDirectories\fR variable 
.PP
You can set \fBtcltest::matchDirectories\fR and/or \fBtcltest::skipDirectories\fR
either interactively (after the \fBtcltest\fR package has been
sourced), or by using the command line arguments \fB-relateddir\fR and
\fB-asidefromdir\fR, for example: 
.PP
.CS
tclsh info.test -relateddir 'subdir*' -asidefromdir 'subdir2'
.CE

.SH "HOW TO CUSTOMIZE THE TEST HARNESS"
To create your own custom test harness, create a .tcl file that contains your
namespace.  Within this file, require package \fBtcltest\fR.  Commands
that can be redefined to customize the test harness include:
.TP
\fBtcltest::cleanupTestsHook\fR
do additional cleanup 
.PP
To add additional cleanup code to your harness
you can define your own \fBtcltest::cleanupTestsHook\fR.  For example:
.CS
proc tcltest::cleanupTestsHook {} {
    # Add your cleanup code here
}
.CE

.SH EXAMPLES
.IP [1] 
A simple test file (foo.test)
.CS
package require tcltest
namespace import -force ::tcltest::*

test foo-1.1 {save 1 in variable name foo} -body {set foo 1} -result 1

tcltest::cleanupTests
return
.CE
.IP [2] 
A simple all.tcl
.CS
package require tcltest
namespace import -force ::tcltest::*

tcltest::testsDirectory [file dir [info script]]
tcltest::runAllTests

return
.CE
.IP [3] 
Running a single test
.CS
tclsh foo.test
.CE
.IP [4] 
Running multiple tests
.CS
tclsh all.tcl -file 'foo*.test' -notfile 'foo2.test'
.CE
.IP [5] 
A test that uses the unixOnly constraint and should only be
run on Unix
.CS
test getAttribute-1.1 {testing file permissions} {
    -constraints {unixOnly}
    -body {
        lindex [file attributes foo.tcl] 5
    }
    -result {00644}
}
.CE
.IP [6] 
A test containing an constraint expression that evaluates to true (a case where the test would be run) if it is being run on unix and if threads are not being tested
.CS
test testOnUnixWithoutThreads-1.1 {
    this test runs only on unix and only if we're not testing
    threads
} {
    -constraints {unixOnly && !testthread}
    -body {
        # some script goes here
    }
}
.CE

.SH COMPATIBILITY


.SH "KNOWN ISSUES"
There are two known issues related to nested evaluations of [\fBtest\fR].  
The first issue relates to the stack level in which test scripts are
executed.  Tests nested within other tests may be executed at the same
stack level as the outermost test.  For example, in the following code: 
.CS
test level-1.1 {level 1} {
    -body {
        test level-2.1 {level 2} {
        }
    }
}
.CE
any script executed in level-2.1 may be executed at the same stack
level as the script defined for level-1.1.  
.PP
In addition, while two [\fBtestfR]s have been run, results will only
be reported by [\fRcleanupTests\fB] for tests at the same level as
test level-1.1.  However, test results for all tests run prior to
level-1.1 will be available when test level-2.1 runs.  What this
means is that if you try to access the test results for test level-2.1,
it will may say that 'm' tests have run, 'n' tests have been skipped,
'o' tests have passed and 'p' tests have failed, where 'm', 'n', 'o',
and 'p' refer to tests that were run at the same test level as
test level-1.1. 
.PP
Implementation of output and error comparison in the test command
depends on usage of puts in your application code.  Output is
intercepted by redefining the puts command while the defined test
script is being run.  Errors thrown by C procedures or printed
directly from C applications will not be caught by the test command.
Therefore, usage of the \fB-output\fR and \fB-errorOuput\fR
options to [\fBtest\fR] is useful only for pure Tcl applications
that use [\fBputs\fR] to produce output. 

.SH KEYWORDS
test, test harness, test suite
