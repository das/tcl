#==============================================================================
#
#   Make information file for the Microsoft Visual C++ 32-bit tools.
#
#
#   NMAKE specific syntax is allowed in this file.
#
#==============================================================================
# RCS: @(#) $Id$
#==============================================================================

!ifndef _MKVC32_MIF
_MKVC32_MIF = 1

#==============================================
# over-ride environment.
#==============================================

### Who wrote this shameful port of make?
### How can I set special macros I want shared
### to recursive makefiles?

#!cmdswitches +e	# Doesn't work!


#==============================================
# check for local.
#==============================================
!if !exist(.\mkvc32.mif)
!error The current working directory must be Tcl's windows platform directory before running 'makefile.win'
!endif


TOOLSET	    = vc32
MAKECMD	    = nmake.exe -nologo /$(MAKEFLAGS) -f makefile.vc32
SYM	    =

rc32	    = $(RC)
cc32	    = $(CC)
link32	    = link
lib32	    = lib
cvtres32    = cvtres

!ifndef OUT_DIR
OUT_DIR	    = $(TMP_DIR)
!endif


#==============================================
# Are the tools in the path already?
#==============================================

###  Unfortunetly, we can't just source this into the parent
###  environment just once and have it affect all targets.
###  This just isn't UNIX.

!if !defined(MSVCDIR)
!if     $(TOOLSETvc32VER) == 5
vcvars	    = "$(TOOLSETvc32)\vc\bin\vcvars32.bat"
!elseif $(TOOLSETvc32VER) == 6
vcvars	    = "$(TOOLSETvc32)\vc98\bin\vcvars32.bat"
!endif
!message +++ Microsoft Visual C++ tools are NOT in the path and
!message +++    $(vcvars) will be used.


### We now need to recurse back into ourselves to fix the environment,
### then bail on this run.
!if [ $(vcvars) & nmake -nologo /$(MAKEFLAGS) -f makefile.win ] != 0
!endif

BAILOUT = 1

!else
#!message +++ Microsoft Visual C++ tools are in the path.


#==============================================
# Test for compiler features
#==============================================

### Win95 doesn't support "2>&1".
### Anyone got a work-around?

!if [ $(cc32) -c -Zs -TC nul 2>&1 | find "(R)" ] == 0

!if [ $(cc32) -nologo -ZI -c -Zs -TC -Fdtemp nul 2>&1 | find /c "D4002" > nul ] != 0
!message +++ compiler has `edit and continue`
!else
!message +++ compiler doesn't have `edit and continue`
!endif

!if [ $(cc32) -nologo -Ox -c -Zs -TC -Fdtemp nul 2>&1 | find /c "D4002" > nul ] != 0
!message +++ compiler has `optimizations`
!else
!message +++ compiler doesn't have `optimizations`
!endif

## Force a chariage return.
!if [ echo. ] != 0
!endif

## Clean-up temp files after tests.
!if [ @for %d in (temp.idb temp.pdb) do @if exist %d erase %d ] != 0
!endif

!else
!error "$(cc32)" is STILL not available in the path.
!endif

#==============================================
# a bug fix needed for VC++ 6.0's nmake tool.
#
# Reset the version *string* back to the integer
# it's supposed to be.  More entries will have
# to be made here for all subsiquent nmake
# releases until Microsoft fixes it.
#
# Please log your displeasure with their product
# by sending an email to blackhole@microsoft.com
#
_NMAKE_VER  = $(_NMAKE_VER:6.00.8168.0=600)
#==============================================


# Win95 doesn't support "&" on command line.
#MkDest=@for %d in ($(PLATFORM) $(ObjDir)) do $(COMSPEC) /c if not exist %d md %d

#clean:
# $(MkDest)
#!if "$(OS)" == "Windows_NT"
# del /q $(ObjDir)\*.obj \
#        $(ObjDir)\*.out \
#        $(ObjDir)\*.h   \
#        $(ObjDir)\*.dbg \
#        $(ObjDir)\*.ocx \
#        $(ObjDir)\*.log \
#        $(ObjDir)\*.lib \
#        $(ObjDir)\*.exe \
#        $(ObjDir)\*.dll \
#        $(ObjDir)\*.map \
#        $(ObjDir)\*.res \
#        $(ObjDir)\*.bin \
#        $(ObjDir)\*.lst \
#        $(ObjDir)\*.blt \
#        $(ObjDir)\*.hlp \
#        $(ObjDir)\*.srl \
#        $(ObjDir)\*.exp >NUL 2>NUL
#!else  # Win95 doesn't support "2>" on command line, multiple files on a Del command, or /q
# erase  $(ObjDir)\*.obj >NUL
# erase  $(ObjDir)\*.out >NUL
# erase  $(ObjDir)\*.h   >NUL
# erase  $(ObjDir)\*.dbg >NUL
# erase  $(ObjDir)\*.ocx >NUL
# erase  $(ObjDir)\*.log >NUL
# erase  $(ObjDir)\*.lib >NUL
# erase  $(ObjDir)\*.exe >NUL
# erase  $(ObjDir)\*.dll >NUL
# erase  $(ObjDir)\*.map >NUL
# erase  $(ObjDir)\*.res >NUL
# erase  $(ObjDir)\*.bin >NUL
# erase  $(ObjDir)\*.lst >NUL
# erase  $(ObjDir)\*.blt >NUL
# erase  $(ObjDir)\*.hlp >NUL
# erase  $(ObjDir)\*.srl >NUL
# erase  $(ObjDir)\*.exp >NUL
#!endif  # OS == Windows_NT

!endif
!endif  # _MKVC32_MIF