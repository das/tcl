#!/bin/sh
# This script is invoked when installing manual entries.  It generates
# additional links to manual entries, corresponding to the procedure
# and command names described by the manual entry.  For example, the
# Tcl manual entry Hash.3 describes procedures Tcl_InitHashTable,
# Tcl_CreateHashEntry, and many more.  This script will make hard
# links so that Tcl_InitHashTable.3, Tcl_CreateHashEntry.3, and so
# on all refer to Hash.3 in the installed directory.
#
# Because of the length of command and procedure names, this mechanism
# only works on machines that support file names longer than 14 characters.
# This script checks to see if long file names are supported, and it
# doesn't make any links if they are not.
#
# The script takes one argument, which is the name of the directory
# where the manual entries have been installed.

while true; do
    case $1 in
        -s | --symlinks )
            S=-s
            ;;
        -z | --compress )
            ZIP=$2
            shift
            ;;
        *) break
            ;;
    esac
    shift
done

if test $# != 1; then
    echo "Usage: mkLinks <options> dir"
    exit 1
fi

if test -n "$ZIP"; then
    touch TeST
    $ZIP TeST
    Z=`ls TeST* | sed 's/^[^.]*//'`
    rm -f TeST*
fi

cd $1
echo foo > xyzzyTestingAVeryLongFileName.foo
x=`echo xyzzyTe*`
echo foo > xyzzyTestingaverylongfilename.foo
y=`echo xyzzyTestingav*`
rm xyzzyTe*
if test "$x" != "xyzzyTestingAVeryLongFileName.foo"; then
    exit
fi
if test "$y" != "xyzzyTestingaverylongfilename.foo"; then
    CASEINSENSITIVEFS=1
fi

if test -n "$ZIP" -a -r Access.3; then
    rm -f Access.3$Z
    $ZIP Access.3
fi
if test -r Access.3$Z; then
    rm -f Tcl_Access.3 Tcl_Access.3$Z
    rm -f Tcl_Stat.3 Tcl_Stat.3$Z
    ln $S Access.3$Z Tcl_Access.3$Z
    ln $S Access.3$Z Tcl_Stat.3$Z
fi
if test -n "$ZIP" -a -r AddErrInfo.3; then
    rm -f AddErrInfo.3$Z
    $ZIP AddErrInfo.3
fi
if test -r AddErrInfo.3$Z; then
    rm -f Tcl_AddObjErrorInfo.3 Tcl_AddObjErrorInfo.3$Z
    rm -f Tcl_AddErrorInfo.3 Tcl_AddErrorInfo.3$Z
    rm -f Tcl_SetObjErrorCode.3 Tcl_SetObjErrorCode.3$Z
    rm -f Tcl_SetErrorCode.3 Tcl_SetErrorCode.3$Z
    rm -f Tcl_SetErrorCodeVA.3 Tcl_SetErrorCodeVA.3$Z
    rm -f Tcl_PosixError.3 Tcl_PosixError.3$Z
    rm -f Tcl_LogCommandInfo.3 Tcl_LogCommandInfo.3$Z
    ln $S AddErrInfo.3$Z Tcl_AddObjErrorInfo.3$Z
    ln $S AddErrInfo.3$Z Tcl_AddErrorInfo.3$Z
    ln $S AddErrInfo.3$Z Tcl_SetObjErrorCode.3$Z
    ln $S AddErrInfo.3$Z Tcl_SetErrorCode.3$Z
    ln $S AddErrInfo.3$Z Tcl_SetErrorCodeVA.3$Z
    ln $S AddErrInfo.3$Z Tcl_PosixError.3$Z
    ln $S AddErrInfo.3$Z Tcl_LogCommandInfo.3$Z
fi
if test -n "$ZIP" -a -r Alloc.3; then
    rm -f Alloc.3$Z
    $ZIP Alloc.3
fi
if test -r Alloc.3$Z; then
    rm -f Tcl_Alloc.3 Tcl_Alloc.3$Z
    rm -f Tcl_Free.3 Tcl_Free.3$Z
    rm -f Tcl_Realloc.3 Tcl_Realloc.3$Z
    rm -f Tcl_AttemptAlloc.3 Tcl_AttemptAlloc.3$Z
    rm -f Tcl_AttemptRealloc.3 Tcl_AttemptRealloc.3$Z
    rm -f ckalloc.3 ckalloc.3$Z
    rm -f ckfree.3 ckfree.3$Z
    rm -f ckrealloc.3 ckrealloc.3$Z
    rm -f attemptckalloc.3 attemptckalloc.3$Z
    rm -f attemptckrealloc.3 attemptckrealloc.3$Z
    ln $S Alloc.3$Z Tcl_Alloc.3$Z
    ln $S Alloc.3$Z Tcl_Free.3$Z
    ln $S Alloc.3$Z Tcl_Realloc.3$Z
    ln $S Alloc.3$Z Tcl_AttemptAlloc.3$Z
    ln $S Alloc.3$Z Tcl_AttemptRealloc.3$Z
    ln $S Alloc.3$Z ckalloc.3$Z
    ln $S Alloc.3$Z ckfree.3$Z
    ln $S Alloc.3$Z ckrealloc.3$Z
    ln $S Alloc.3$Z attemptckalloc.3$Z
    ln $S Alloc.3$Z attemptckrealloc.3$Z
fi
if test -n "$ZIP" -a -r AllowExc.3; then
    rm -f AllowExc.3$Z
    $ZIP AllowExc.3
fi
if test -r AllowExc.3$Z; then
    rm -f Tcl_AllowExceptions.3 Tcl_AllowExceptions.3$Z
    ln $S AllowExc.3$Z Tcl_AllowExceptions.3$Z
fi
if test -n "$ZIP" -a -r AppInit.3; then
    rm -f AppInit.3$Z
    $ZIP AppInit.3
fi
if test -r AppInit.3$Z; then
    rm -f Tcl_AppInit.3 Tcl_AppInit.3$Z
    ln $S AppInit.3$Z Tcl_AppInit.3$Z
fi
if test -n "$ZIP" -a -r AssocData.3; then
    rm -f AssocData.3$Z
    $ZIP AssocData.3
fi
if test -r AssocData.3$Z; then
    rm -f Tcl_GetAssocData.3 Tcl_GetAssocData.3$Z
    rm -f Tcl_SetAssocData.3 Tcl_SetAssocData.3$Z
    rm -f Tcl_DeleteAssocData.3 Tcl_DeleteAssocData.3$Z
    ln $S AssocData.3$Z Tcl_GetAssocData.3$Z
    ln $S AssocData.3$Z Tcl_SetAssocData.3$Z
    ln $S AssocData.3$Z Tcl_DeleteAssocData.3$Z
fi
if test -n "$ZIP" -a -r Async.3; then
    rm -f Async.3$Z
    $ZIP Async.3
fi
if test -r Async.3$Z; then
    rm -f Tcl_AsyncCreate.3 Tcl_AsyncCreate.3$Z
    rm -f Tcl_AsyncMark.3 Tcl_AsyncMark.3$Z
    rm -f Tcl_AsyncInvoke.3 Tcl_AsyncInvoke.3$Z
    rm -f Tcl_AsyncDelete.3 Tcl_AsyncDelete.3$Z
    rm -f Tcl_AsyncReady.3 Tcl_AsyncReady.3$Z
    ln $S Async.3$Z Tcl_AsyncCreate.3$Z
    ln $S Async.3$Z Tcl_AsyncMark.3$Z
    ln $S Async.3$Z Tcl_AsyncInvoke.3$Z
    ln $S Async.3$Z Tcl_AsyncDelete.3$Z
    ln $S Async.3$Z Tcl_AsyncReady.3$Z
fi
if test -n "$ZIP" -a -r BackgdErr.3; then
    rm -f BackgdErr.3$Z
    $ZIP BackgdErr.3
fi
if test -r BackgdErr.3$Z; then
    rm -f Tcl_BackgroundError.3 Tcl_BackgroundError.3$Z
    ln $S BackgdErr.3$Z Tcl_BackgroundError.3$Z
fi
if test -n "$ZIP" -a -r Backslash.3; then
    rm -f Backslash.3$Z
    $ZIP Backslash.3
fi
if test -r Backslash.3$Z; then
    rm -f Tcl_Backslash.3 Tcl_Backslash.3$Z
    ln $S Backslash.3$Z Tcl_Backslash.3$Z
fi
if test -n "$ZIP" -a -r BoolObj.3; then
    rm -f BoolObj.3$Z
    $ZIP BoolObj.3
fi
if test -r BoolObj.3$Z; then
    rm -f Tcl_NewBooleanObj.3 Tcl_NewBooleanObj.3$Z
    rm -f Tcl_SetBooleanObj.3 Tcl_SetBooleanObj.3$Z
    rm -f Tcl_GetBooleanFromObj.3 Tcl_GetBooleanFromObj.3$Z
    ln $S BoolObj.3$Z Tcl_NewBooleanObj.3$Z
    ln $S BoolObj.3$Z Tcl_SetBooleanObj.3$Z
    ln $S BoolObj.3$Z Tcl_GetBooleanFromObj.3$Z
fi
if test -n "$ZIP" -a -r ByteArrObj.3; then
    rm -f ByteArrObj.3$Z
    $ZIP ByteArrObj.3
fi
if test -r ByteArrObj.3$Z; then
    rm -f Tcl_NewByteArrayObj.3 Tcl_NewByteArrayObj.3$Z
    rm -f Tcl_SetByteArrayObj.3 Tcl_SetByteArrayObj.3$Z
    rm -f Tcl_GetByteArrayFromObj.3 Tcl_GetByteArrayFromObj.3$Z
    rm -f Tcl_SetByteArrayLength.3 Tcl_SetByteArrayLength.3$Z
    ln $S ByteArrObj.3$Z Tcl_NewByteArrayObj.3$Z
    ln $S ByteArrObj.3$Z Tcl_SetByteArrayObj.3$Z
    ln $S ByteArrObj.3$Z Tcl_GetByteArrayFromObj.3$Z
    ln $S ByteArrObj.3$Z Tcl_SetByteArrayLength.3$Z
fi
if test -n "$ZIP" -a -r CallDel.3; then
    rm -f CallDel.3$Z
    $ZIP CallDel.3
fi
if test -r CallDel.3$Z; then
    rm -f Tcl_CallWhenDeleted.3 Tcl_CallWhenDeleted.3$Z
    rm -f Tcl_DontCallWhenDeleted.3 Tcl_DontCallWhenDeleted.3$Z
    ln $S CallDel.3$Z Tcl_CallWhenDeleted.3$Z
    ln $S CallDel.3$Z Tcl_DontCallWhenDeleted.3$Z
fi
if test -n "$ZIP" -a -r ChnlStack.3; then
    rm -f ChnlStack.3$Z
    $ZIP ChnlStack.3
fi
if test -r ChnlStack.3$Z; then
    rm -f Tcl_StackChannel.3 Tcl_StackChannel.3$Z
    rm -f Tcl_UnstackChannel.3 Tcl_UnstackChannel.3$Z
    rm -f Tcl_GetStackedChannel.3 Tcl_GetStackedChannel.3$Z
    rm -f Tcl_GetTopChannel.3 Tcl_GetTopChannel.3$Z
    ln $S ChnlStack.3$Z Tcl_StackChannel.3$Z
    ln $S ChnlStack.3$Z Tcl_UnstackChannel.3$Z
    ln $S ChnlStack.3$Z Tcl_GetStackedChannel.3$Z
    ln $S ChnlStack.3$Z Tcl_GetTopChannel.3$Z
fi
if test -n "$ZIP" -a -r CmdCmplt.3; then
    rm -f CmdCmplt.3$Z
    $ZIP CmdCmplt.3
fi
if test -r CmdCmplt.3$Z; then
    rm -f Tcl_CommandComplete.3 Tcl_CommandComplete.3$Z
    ln $S CmdCmplt.3$Z Tcl_CommandComplete.3$Z
fi
if test -n "$ZIP" -a -r Concat.3; then
    rm -f Concat.3$Z
    $ZIP Concat.3
fi
if test -r Concat.3$Z; then
    rm -f Tcl_Concat.3 Tcl_Concat.3$Z
    ln $S Concat.3$Z Tcl_Concat.3$Z
fi
if test -n "$ZIP" -a -r CrtChannel.3; then
    rm -f CrtChannel.3$Z
    $ZIP CrtChannel.3
fi
if test -r CrtChannel.3$Z; then
    rm -f Tcl_CreateChannel.3 Tcl_CreateChannel.3$Z
    rm -f Tcl_GetChannelInstanceData.3 Tcl_GetChannelInstanceData.3$Z
    rm -f Tcl_GetChannelType.3 Tcl_GetChannelType.3$Z
    rm -f Tcl_GetChannelName.3 Tcl_GetChannelName.3$Z
    rm -f Tcl_GetChannelHandle.3 Tcl_GetChannelHandle.3$Z
    rm -f Tcl_GetChannelMode.3 Tcl_GetChannelMode.3$Z
    rm -f Tcl_GetChannelBufferSize.3 Tcl_GetChannelBufferSize.3$Z
    rm -f Tcl_SetChannelBufferSize.3 Tcl_SetChannelBufferSize.3$Z
    rm -f Tcl_NotifyChannel.3 Tcl_NotifyChannel.3$Z
    rm -f Tcl_BadChannelOption.3 Tcl_BadChannelOption.3$Z
    rm -f Tcl_ChannelName.3 Tcl_ChannelName.3$Z
    rm -f Tcl_ChannelVersion.3 Tcl_ChannelVersion.3$Z
    rm -f Tcl_ChannelBlockModeProc.3 Tcl_ChannelBlockModeProc.3$Z
    rm -f Tcl_ChannelCloseProc.3 Tcl_ChannelCloseProc.3$Z
    rm -f Tcl_ChannelClose2Proc.3 Tcl_ChannelClose2Proc.3$Z
    rm -f Tcl_ChannelInputProc.3 Tcl_ChannelInputProc.3$Z
    rm -f Tcl_ChannelOutputProc.3 Tcl_ChannelOutputProc.3$Z
    rm -f Tcl_ChannelSeekProc.3 Tcl_ChannelSeekProc.3$Z
    rm -f Tcl_ChannelWideSeekProc.3 Tcl_ChannelWideSeekProc.3$Z
    rm -f Tcl_ChannelSetOptionProc.3 Tcl_ChannelSetOptionProc.3$Z
    rm -f Tcl_ChannelGetOptionProc.3 Tcl_ChannelGetOptionProc.3$Z
    rm -f Tcl_ChannelWatchProc.3 Tcl_ChannelWatchProc.3$Z
    rm -f Tcl_ChannelGetHandleProc.3 Tcl_ChannelGetHandleProc.3$Z
    rm -f Tcl_ChannelFlushProc.3 Tcl_ChannelFlushProc.3$Z
    rm -f Tcl_ChannelHandlerProc.3 Tcl_ChannelHandlerProc.3$Z
    rm -f Tcl_IsChannelShared.3 Tcl_IsChannelShared.3$Z
    rm -f Tcl_IsChannelRegistered.3 Tcl_IsChannelRegistered.3$Z
    rm -f Tcl_CutChannel.3 Tcl_CutChannel.3$Z
    rm -f Tcl_SpliceChannel.3 Tcl_SpliceChannel.3$Z
    rm -f Tcl_IsChannelExisting.3 Tcl_IsChannelExisting.3$Z
    rm -f Tcl_ClearChannelHandlers.3 Tcl_ClearChannelHandlers.3$Z
    rm -f Tcl_GetChannelThread.3 Tcl_GetChannelThread.3$Z
    rm -f Tcl_ChannelBuffered.3 Tcl_ChannelBuffered.3$Z
    ln $S CrtChannel.3$Z Tcl_CreateChannel.3$Z
    ln $S CrtChannel.3$Z Tcl_GetChannelInstanceData.3$Z
    ln $S CrtChannel.3$Z Tcl_GetChannelType.3$Z
    ln $S CrtChannel.3$Z Tcl_GetChannelName.3$Z
    ln $S CrtChannel.3$Z Tcl_GetChannelHandle.3$Z
    ln $S CrtChannel.3$Z Tcl_GetChannelMode.3$Z
    ln $S CrtChannel.3$Z Tcl_GetChannelBufferSize.3$Z
    ln $S CrtChannel.3$Z Tcl_SetChannelBufferSize.3$Z
    ln $S CrtChannel.3$Z Tcl_NotifyChannel.3$Z
    ln $S CrtChannel.3$Z Tcl_BadChannelOption.3$Z
    ln $S CrtChannel.3$Z Tcl_ChannelName.3$Z
    ln $S CrtChannel.3$Z Tcl_ChannelVersion.3$Z
    ln $S CrtChannel.3$Z Tcl_ChannelBlockModeProc.3$Z
    ln $S CrtChannel.3$Z Tcl_ChannelCloseProc.3$Z
    ln $S CrtChannel.3$Z Tcl_ChannelClose2Proc.3$Z
    ln $S CrtChannel.3$Z Tcl_ChannelInputProc.3$Z
    ln $S CrtChannel.3$Z Tcl_ChannelOutputProc.3$Z
    ln $S CrtChannel.3$Z Tcl_ChannelSeekProc.3$Z
    ln $S CrtChannel.3$Z Tcl_ChannelWideSeekProc.3$Z
    ln $S CrtChannel.3$Z Tcl_ChannelSetOptionProc.3$Z
    ln $S CrtChannel.3$Z Tcl_ChannelGetOptionProc.3$Z
    ln $S CrtChannel.3$Z Tcl_ChannelWatchProc.3$Z
    ln $S CrtChannel.3$Z Tcl_ChannelGetHandleProc.3$Z
    ln $S CrtChannel.3$Z Tcl_ChannelFlushProc.3$Z
    ln $S CrtChannel.3$Z Tcl_ChannelHandlerProc.3$Z
    ln $S CrtChannel.3$Z Tcl_IsChannelShared.3$Z
    ln $S CrtChannel.3$Z Tcl_IsChannelRegistered.3$Z
    ln $S CrtChannel.3$Z Tcl_CutChannel.3$Z
    ln $S CrtChannel.3$Z Tcl_SpliceChannel.3$Z
    ln $S CrtChannel.3$Z Tcl_IsChannelExisting.3$Z
    ln $S CrtChannel.3$Z Tcl_ClearChannelHandlers.3$Z
    ln $S CrtChannel.3$Z Tcl_GetChannelThread.3$Z
    ln $S CrtChannel.3$Z Tcl_ChannelBuffered.3$Z
fi
if test -n "$ZIP" -a -r CrtChnlHdlr.3; then
    rm -f CrtChnlHdlr.3$Z
    $ZIP CrtChnlHdlr.3
fi
if test -r CrtChnlHdlr.3$Z; then
    rm -f Tcl_CreateChannelHandler.3 Tcl_CreateChannelHandler.3$Z
    rm -f Tcl_DeleteChannelHandler.3 Tcl_DeleteChannelHandler.3$Z
    ln $S CrtChnlHdlr.3$Z Tcl_CreateChannelHandler.3$Z
    ln $S CrtChnlHdlr.3$Z Tcl_DeleteChannelHandler.3$Z
fi
if test -n "$ZIP" -a -r CrtCloseHdlr.3; then
    rm -f CrtCloseHdlr.3$Z
    $ZIP CrtCloseHdlr.3
fi
if test -r CrtCloseHdlr.3$Z; then
    rm -f Tcl_CreateCloseHandler.3 Tcl_CreateCloseHandler.3$Z
    rm -f Tcl_DeleteCloseHandler.3 Tcl_DeleteCloseHandler.3$Z
    ln $S CrtCloseHdlr.3$Z Tcl_CreateCloseHandler.3$Z
    ln $S CrtCloseHdlr.3$Z Tcl_DeleteCloseHandler.3$Z
fi
if test -n "$ZIP" -a -r CrtCommand.3; then
    rm -f CrtCommand.3$Z
    $ZIP CrtCommand.3
fi
if test -r CrtCommand.3$Z; then
    rm -f Tcl_CreateCommand.3 Tcl_CreateCommand.3$Z
    ln $S CrtCommand.3$Z Tcl_CreateCommand.3$Z
fi
if test -n "$ZIP" -a -r CrtFileHdlr.3; then
    rm -f CrtFileHdlr.3$Z
    $ZIP CrtFileHdlr.3
fi
if test -r CrtFileHdlr.3$Z; then
    rm -f Tcl_CreateFileHandler.3 Tcl_CreateFileHandler.3$Z
    rm -f Tcl_DeleteFileHandler.3 Tcl_DeleteFileHandler.3$Z
    ln $S CrtFileHdlr.3$Z Tcl_CreateFileHandler.3$Z
    ln $S CrtFileHdlr.3$Z Tcl_DeleteFileHandler.3$Z
fi
if test -n "$ZIP" -a -r CrtInterp.3; then
    rm -f CrtInterp.3$Z
    $ZIP CrtInterp.3
fi
if test -r CrtInterp.3$Z; then
    rm -f Tcl_CreateInterp.3 Tcl_CreateInterp.3$Z
    rm -f Tcl_DeleteInterp.3 Tcl_DeleteInterp.3$Z
    rm -f Tcl_InterpDeleted.3 Tcl_InterpDeleted.3$Z
    ln $S CrtInterp.3$Z Tcl_CreateInterp.3$Z
    ln $S CrtInterp.3$Z Tcl_DeleteInterp.3$Z
    ln $S CrtInterp.3$Z Tcl_InterpDeleted.3$Z
fi
if test -n "$ZIP" -a -r CrtMathFnc.3; then
    rm -f CrtMathFnc.3$Z
    $ZIP CrtMathFnc.3
fi
if test -r CrtMathFnc.3$Z; then
    rm -f Tcl_CreateMathFunc.3 Tcl_CreateMathFunc.3$Z
    rm -f Tcl_GetMathFuncInfo.3 Tcl_GetMathFuncInfo.3$Z
    rm -f Tcl_ListMathFuncs.3 Tcl_ListMathFuncs.3$Z
    ln $S CrtMathFnc.3$Z Tcl_CreateMathFunc.3$Z
    ln $S CrtMathFnc.3$Z Tcl_GetMathFuncInfo.3$Z
    ln $S CrtMathFnc.3$Z Tcl_ListMathFuncs.3$Z
fi
if test -n "$ZIP" -a -r CrtObjCmd.3; then
    rm -f CrtObjCmd.3$Z
    $ZIP CrtObjCmd.3
fi
if test -r CrtObjCmd.3$Z; then
    rm -f Tcl_CreateObjCommand.3 Tcl_CreateObjCommand.3$Z
    rm -f Tcl_DeleteCommand.3 Tcl_DeleteCommand.3$Z
    rm -f Tcl_DeleteCommandFromToken.3 Tcl_DeleteCommandFromToken.3$Z
    rm -f Tcl_GetCommandInfo.3 Tcl_GetCommandInfo.3$Z
    rm -f Tcl_GetCommandInfoFromToken.3 Tcl_GetCommandInfoFromToken.3$Z
    rm -f Tcl_SetCommandInfo.3 Tcl_SetCommandInfo.3$Z
    rm -f Tcl_SetCommandInfoFromToken.3 Tcl_SetCommandInfoFromToken.3$Z
    rm -f Tcl_GetCommandName.3 Tcl_GetCommandName.3$Z
    rm -f Tcl_GetCommandFullName.3 Tcl_GetCommandFullName.3$Z
    rm -f Tcl_GetCommandFromObj.3 Tcl_GetCommandFromObj.3$Z
    ln $S CrtObjCmd.3$Z Tcl_CreateObjCommand.3$Z
    ln $S CrtObjCmd.3$Z Tcl_DeleteCommand.3$Z
    ln $S CrtObjCmd.3$Z Tcl_DeleteCommandFromToken.3$Z
    ln $S CrtObjCmd.3$Z Tcl_GetCommandInfo.3$Z
    ln $S CrtObjCmd.3$Z Tcl_GetCommandInfoFromToken.3$Z
    ln $S CrtObjCmd.3$Z Tcl_SetCommandInfo.3$Z
    ln $S CrtObjCmd.3$Z Tcl_SetCommandInfoFromToken.3$Z
    ln $S CrtObjCmd.3$Z Tcl_GetCommandName.3$Z
    ln $S CrtObjCmd.3$Z Tcl_GetCommandFullName.3$Z
    ln $S CrtObjCmd.3$Z Tcl_GetCommandFromObj.3$Z
fi
if test -n "$ZIP" -a -r CrtSlave.3; then
    rm -f CrtSlave.3$Z
    $ZIP CrtSlave.3
fi
if test -r CrtSlave.3$Z; then
    rm -f Tcl_IsSafe.3 Tcl_IsSafe.3$Z
    rm -f Tcl_MakeSafe.3 Tcl_MakeSafe.3$Z
    rm -f Tcl_CreateSlave.3 Tcl_CreateSlave.3$Z
    rm -f Tcl_GetSlave.3 Tcl_GetSlave.3$Z
    rm -f Tcl_GetMaster.3 Tcl_GetMaster.3$Z
    rm -f Tcl_GetInterpPath.3 Tcl_GetInterpPath.3$Z
    rm -f Tcl_CreateAlias.3 Tcl_CreateAlias.3$Z
    rm -f Tcl_CreateAliasObj.3 Tcl_CreateAliasObj.3$Z
    rm -f Tcl_GetAlias.3 Tcl_GetAlias.3$Z
    rm -f Tcl_GetAliasObj.3 Tcl_GetAliasObj.3$Z
    rm -f Tcl_ExposeCommand.3 Tcl_ExposeCommand.3$Z
    rm -f Tcl_HideCommand.3 Tcl_HideCommand.3$Z
    ln $S CrtSlave.3$Z Tcl_IsSafe.3$Z
    ln $S CrtSlave.3$Z Tcl_MakeSafe.3$Z
    ln $S CrtSlave.3$Z Tcl_CreateSlave.3$Z
    ln $S CrtSlave.3$Z Tcl_GetSlave.3$Z
    ln $S CrtSlave.3$Z Tcl_GetMaster.3$Z
    ln $S CrtSlave.3$Z Tcl_GetInterpPath.3$Z
    ln $S CrtSlave.3$Z Tcl_CreateAlias.3$Z
    ln $S CrtSlave.3$Z Tcl_CreateAliasObj.3$Z
    ln $S CrtSlave.3$Z Tcl_GetAlias.3$Z
    ln $S CrtSlave.3$Z Tcl_GetAliasObj.3$Z
    ln $S CrtSlave.3$Z Tcl_ExposeCommand.3$Z
    ln $S CrtSlave.3$Z Tcl_HideCommand.3$Z
fi
if test -n "$ZIP" -a -r CrtTimerHdlr.3; then
    rm -f CrtTimerHdlr.3$Z
    $ZIP CrtTimerHdlr.3
fi
if test -r CrtTimerHdlr.3$Z; then
    rm -f Tcl_CreateTimerHandler.3 Tcl_CreateTimerHandler.3$Z
    rm -f Tcl_DeleteTimerHandler.3 Tcl_DeleteTimerHandler.3$Z
    ln $S CrtTimerHdlr.3$Z Tcl_CreateTimerHandler.3$Z
    ln $S CrtTimerHdlr.3$Z Tcl_DeleteTimerHandler.3$Z
fi
if test -n "$ZIP" -a -r CrtTrace.3; then
    rm -f CrtTrace.3$Z
    $ZIP CrtTrace.3
fi
if test -r CrtTrace.3$Z; then
    rm -f Tcl_CreateTrace.3 Tcl_CreateTrace.3$Z
    rm -f Tcl_CreateObjTrace.3 Tcl_CreateObjTrace.3$Z
    rm -f Tcl_DeleteTrace.3 Tcl_DeleteTrace.3$Z
    ln $S CrtTrace.3$Z Tcl_CreateTrace.3$Z
    ln $S CrtTrace.3$Z Tcl_CreateObjTrace.3$Z
    ln $S CrtTrace.3$Z Tcl_DeleteTrace.3$Z
fi
if test -n "$ZIP" -a -r DString.3; then
    rm -f DString.3$Z
    $ZIP DString.3
fi
if test -r DString.3$Z; then
    rm -f Tcl_DStringInit.3 Tcl_DStringInit.3$Z
    rm -f Tcl_DStringAppend.3 Tcl_DStringAppend.3$Z
    rm -f Tcl_DStringAppendElement.3 Tcl_DStringAppendElement.3$Z
    rm -f Tcl_DStringStartSublist.3 Tcl_DStringStartSublist.3$Z
    rm -f Tcl_DStringEndSublist.3 Tcl_DStringEndSublist.3$Z
    rm -f Tcl_DStringLength.3 Tcl_DStringLength.3$Z
    rm -f Tcl_DStringValue.3 Tcl_DStringValue.3$Z
    rm -f Tcl_DStringSetLength.3 Tcl_DStringSetLength.3$Z
    rm -f Tcl_DStringTrunc.3 Tcl_DStringTrunc.3$Z
    rm -f Tcl_DStringFree.3 Tcl_DStringFree.3$Z
    rm -f Tcl_DStringResult.3 Tcl_DStringResult.3$Z
    rm -f Tcl_DStringGetResult.3 Tcl_DStringGetResult.3$Z
    ln $S DString.3$Z Tcl_DStringInit.3$Z
    ln $S DString.3$Z Tcl_DStringAppend.3$Z
    ln $S DString.3$Z Tcl_DStringAppendElement.3$Z
    ln $S DString.3$Z Tcl_DStringStartSublist.3$Z
    ln $S DString.3$Z Tcl_DStringEndSublist.3$Z
    ln $S DString.3$Z Tcl_DStringLength.3$Z
    ln $S DString.3$Z Tcl_DStringValue.3$Z
    ln $S DString.3$Z Tcl_DStringSetLength.3$Z
    ln $S DString.3$Z Tcl_DStringTrunc.3$Z
    ln $S DString.3$Z Tcl_DStringFree.3$Z
    ln $S DString.3$Z Tcl_DStringResult.3$Z
    ln $S DString.3$Z Tcl_DStringGetResult.3$Z
fi
if test -n "$ZIP" -a -r DetachPids.3; then
    rm -f DetachPids.3$Z
    $ZIP DetachPids.3
fi
if test -r DetachPids.3$Z; then
    rm -f Tcl_DetachPids.3 Tcl_DetachPids.3$Z
    rm -f Tcl_ReapDetachedProcs.3 Tcl_ReapDetachedProcs.3$Z
    rm -f Tcl_WaitPid.3 Tcl_WaitPid.3$Z
    ln $S DetachPids.3$Z Tcl_DetachPids.3$Z
    ln $S DetachPids.3$Z Tcl_ReapDetachedProcs.3$Z
    ln $S DetachPids.3$Z Tcl_WaitPid.3$Z
fi
if test -n "$ZIP" -a -r DoOneEvent.3; then
    rm -f DoOneEvent.3$Z
    $ZIP DoOneEvent.3
fi
if test -r DoOneEvent.3$Z; then
    rm -f Tcl_DoOneEvent.3 Tcl_DoOneEvent.3$Z
    ln $S DoOneEvent.3$Z Tcl_DoOneEvent.3$Z
fi
if test -n "$ZIP" -a -r DoWhenIdle.3; then
    rm -f DoWhenIdle.3$Z
    $ZIP DoWhenIdle.3
fi
if test -r DoWhenIdle.3$Z; then
    rm -f Tcl_DoWhenIdle.3 Tcl_DoWhenIdle.3$Z
    rm -f Tcl_CancelIdleCall.3 Tcl_CancelIdleCall.3$Z
    ln $S DoWhenIdle.3$Z Tcl_DoWhenIdle.3$Z
    ln $S DoWhenIdle.3$Z Tcl_CancelIdleCall.3$Z
fi
if test -n "$ZIP" -a -r DoubleObj.3; then
    rm -f DoubleObj.3$Z
    $ZIP DoubleObj.3
fi
if test -r DoubleObj.3$Z; then
    rm -f Tcl_NewDoubleObj.3 Tcl_NewDoubleObj.3$Z
    rm -f Tcl_SetDoubleObj.3 Tcl_SetDoubleObj.3$Z
    rm -f Tcl_GetDoubleFromObj.3 Tcl_GetDoubleFromObj.3$Z
    ln $S DoubleObj.3$Z Tcl_NewDoubleObj.3$Z
    ln $S DoubleObj.3$Z Tcl_SetDoubleObj.3$Z
    ln $S DoubleObj.3$Z Tcl_GetDoubleFromObj.3$Z
fi
if test -n "$ZIP" -a -r DumpActiveMemory.3; then
    rm -f DumpActiveMemory.3$Z
    $ZIP DumpActiveMemory.3
fi
if test -r DumpActiveMemory.3$Z; then
    rm -f Tcl_DumpActiveMemory.3 Tcl_DumpActiveMemory.3$Z
    rm -f Tcl_InitMemory.3 Tcl_InitMemory.3$Z
    rm -f Tcl_ValidateAllMemory.3 Tcl_ValidateAllMemory.3$Z
    ln $S DumpActiveMemory.3$Z Tcl_DumpActiveMemory.3$Z
    ln $S DumpActiveMemory.3$Z Tcl_InitMemory.3$Z
    ln $S DumpActiveMemory.3$Z Tcl_ValidateAllMemory.3$Z
fi
if test -n "$ZIP" -a -r Encoding.3; then
    rm -f Encoding.3$Z
    $ZIP Encoding.3
fi
if test -r Encoding.3$Z; then
    rm -f Tcl_GetEncoding.3 Tcl_GetEncoding.3$Z
    rm -f Tcl_FreeEncoding.3 Tcl_FreeEncoding.3$Z
    rm -f Tcl_ExternalToUtfDString.3 Tcl_ExternalToUtfDString.3$Z
    rm -f Tcl_ExternalToUtf.3 Tcl_ExternalToUtf.3$Z
    rm -f Tcl_UtfToExternalDString.3 Tcl_UtfToExternalDString.3$Z
    rm -f Tcl_UtfToExternal.3 Tcl_UtfToExternal.3$Z
    rm -f Tcl_WinTCharToUtf.3 Tcl_WinTCharToUtf.3$Z
    rm -f Tcl_WinUtfToTChar.3 Tcl_WinUtfToTChar.3$Z
    rm -f Tcl_GetEncodingName.3 Tcl_GetEncodingName.3$Z
    rm -f Tcl_SetSystemEncoding.3 Tcl_SetSystemEncoding.3$Z
    rm -f Tcl_GetEncodingNames.3 Tcl_GetEncodingNames.3$Z
    rm -f Tcl_CreateEncoding.3 Tcl_CreateEncoding.3$Z
    rm -f Tcl_GetDefaultEncodingDir.3 Tcl_GetDefaultEncodingDir.3$Z
    rm -f Tcl_SetDefaultEncodingDir.3 Tcl_SetDefaultEncodingDir.3$Z
    ln $S Encoding.3$Z Tcl_GetEncoding.3$Z
    ln $S Encoding.3$Z Tcl_FreeEncoding.3$Z
    ln $S Encoding.3$Z Tcl_ExternalToUtfDString.3$Z
    ln $S Encoding.3$Z Tcl_ExternalToUtf.3$Z
    ln $S Encoding.3$Z Tcl_UtfToExternalDString.3$Z
    ln $S Encoding.3$Z Tcl_UtfToExternal.3$Z
    ln $S Encoding.3$Z Tcl_WinTCharToUtf.3$Z
    ln $S Encoding.3$Z Tcl_WinUtfToTChar.3$Z
    ln $S Encoding.3$Z Tcl_GetEncodingName.3$Z
    ln $S Encoding.3$Z Tcl_SetSystemEncoding.3$Z
    ln $S Encoding.3$Z Tcl_GetEncodingNames.3$Z
    ln $S Encoding.3$Z Tcl_CreateEncoding.3$Z
    ln $S Encoding.3$Z Tcl_GetDefaultEncodingDir.3$Z
    ln $S Encoding.3$Z Tcl_SetDefaultEncodingDir.3$Z
fi
if test -n "$ZIP" -a -r Environment.3; then
    rm -f Environment.3$Z
    $ZIP Environment.3
fi
if test -r Environment.3$Z; then
    rm -f Tcl_PutEnv.3 Tcl_PutEnv.3$Z
    ln $S Environment.3$Z Tcl_PutEnv.3$Z
fi
if test -n "$ZIP" -a -r Eval.3; then
    rm -f Eval.3$Z
    $ZIP Eval.3
fi
if test -r Eval.3$Z; then
    rm -f Tcl_EvalObjEx.3 Tcl_EvalObjEx.3$Z
    rm -f Tcl_EvalFile.3 Tcl_EvalFile.3$Z
    rm -f Tcl_EvalObjv.3 Tcl_EvalObjv.3$Z
    rm -f Tcl_Eval.3 Tcl_Eval.3$Z
    rm -f Tcl_EvalEx.3 Tcl_EvalEx.3$Z
    rm -f Tcl_GlobalEval.3 Tcl_GlobalEval.3$Z
    rm -f Tcl_GlobalEvalObj.3 Tcl_GlobalEvalObj.3$Z
    rm -f Tcl_VarEval.3 Tcl_VarEval.3$Z
    rm -f Tcl_VarEvalVA.3 Tcl_VarEvalVA.3$Z
    ln $S Eval.3$Z Tcl_EvalObjEx.3$Z
    ln $S Eval.3$Z Tcl_EvalFile.3$Z
    ln $S Eval.3$Z Tcl_EvalObjv.3$Z
    ln $S Eval.3$Z Tcl_Eval.3$Z
    ln $S Eval.3$Z Tcl_EvalEx.3$Z
    ln $S Eval.3$Z Tcl_GlobalEval.3$Z
    ln $S Eval.3$Z Tcl_GlobalEvalObj.3$Z
    ln $S Eval.3$Z Tcl_VarEval.3$Z
    ln $S Eval.3$Z Tcl_VarEvalVA.3$Z
fi
if test -n "$ZIP" -a -r Exit.3; then
    rm -f Exit.3$Z
    $ZIP Exit.3
fi
if test -r Exit.3$Z; then
    rm -f Tcl_Exit.3 Tcl_Exit.3$Z
    rm -f Tcl_Finalize.3 Tcl_Finalize.3$Z
    rm -f Tcl_CreateExitHandler.3 Tcl_CreateExitHandler.3$Z
    rm -f Tcl_DeleteExitHandler.3 Tcl_DeleteExitHandler.3$Z
    rm -f Tcl_ExitThread.3 Tcl_ExitThread.3$Z
    rm -f Tcl_FinalizeThread.3 Tcl_FinalizeThread.3$Z
    rm -f Tcl_CreateThreadExitHandler.3 Tcl_CreateThreadExitHandler.3$Z
    rm -f Tcl_DeleteThreadExitHandler.3 Tcl_DeleteThreadExitHandler.3$Z
    ln $S Exit.3$Z Tcl_Exit.3$Z
    ln $S Exit.3$Z Tcl_Finalize.3$Z
    ln $S Exit.3$Z Tcl_CreateExitHandler.3$Z
    ln $S Exit.3$Z Tcl_DeleteExitHandler.3$Z
    ln $S Exit.3$Z Tcl_ExitThread.3$Z
    ln $S Exit.3$Z Tcl_FinalizeThread.3$Z
    ln $S Exit.3$Z Tcl_CreateThreadExitHandler.3$Z
    ln $S Exit.3$Z Tcl_DeleteThreadExitHandler.3$Z
fi
if test -n "$ZIP" -a -r ExprLong.3; then
    rm -f ExprLong.3$Z
    $ZIP ExprLong.3
fi
if test -r ExprLong.3$Z; then
    rm -f Tcl_ExprLong.3 Tcl_ExprLong.3$Z
    rm -f Tcl_ExprDouble.3 Tcl_ExprDouble.3$Z
    rm -f Tcl_ExprBoolean.3 Tcl_ExprBoolean.3$Z
    rm -f Tcl_ExprString.3 Tcl_ExprString.3$Z
    ln $S ExprLong.3$Z Tcl_ExprLong.3$Z
    ln $S ExprLong.3$Z Tcl_ExprDouble.3$Z
    ln $S ExprLong.3$Z Tcl_ExprBoolean.3$Z
    ln $S ExprLong.3$Z Tcl_ExprString.3$Z
fi
if test -n "$ZIP" -a -r ExprLongObj.3; then
    rm -f ExprLongObj.3$Z
    $ZIP ExprLongObj.3
fi
if test -r ExprLongObj.3$Z; then
    rm -f Tcl_ExprLongObj.3 Tcl_ExprLongObj.3$Z
    rm -f Tcl_ExprDoubleObj.3 Tcl_ExprDoubleObj.3$Z
    rm -f Tcl_ExprBooleanObj.3 Tcl_ExprBooleanObj.3$Z
    rm -f Tcl_ExprObj.3 Tcl_ExprObj.3$Z
    ln $S ExprLongObj.3$Z Tcl_ExprLongObj.3$Z
    ln $S ExprLongObj.3$Z Tcl_ExprDoubleObj.3$Z
    ln $S ExprLongObj.3$Z Tcl_ExprBooleanObj.3$Z
    ln $S ExprLongObj.3$Z Tcl_ExprObj.3$Z
fi
if test -n "$ZIP" -a -r FileSystem.3; then
    rm -f FileSystem.3$Z
    $ZIP FileSystem.3
fi
if test -r FileSystem.3$Z; then
    rm -f Tcl_FSRegister.3 Tcl_FSRegister.3$Z
    rm -f Tcl_FSUnregister.3 Tcl_FSUnregister.3$Z
    rm -f Tcl_FSData.3 Tcl_FSData.3$Z
    rm -f Tcl_FSMountsChanged.3 Tcl_FSMountsChanged.3$Z
    rm -f Tcl_FSGetFileSystemForPath.3 Tcl_FSGetFileSystemForPath.3$Z
    rm -f Tcl_FSGetPathType.3 Tcl_FSGetPathType.3$Z
    rm -f Tcl_FSCopyFile.3 Tcl_FSCopyFile.3$Z
    rm -f Tcl_FSCopyDirectory.3 Tcl_FSCopyDirectory.3$Z
    rm -f Tcl_FSCreateDirectory.3 Tcl_FSCreateDirectory.3$Z
    rm -f Tcl_FSDeleteFile.3 Tcl_FSDeleteFile.3$Z
    rm -f Tcl_FSRemoveDirectory.3 Tcl_FSRemoveDirectory.3$Z
    rm -f Tcl_FSRenameFile.3 Tcl_FSRenameFile.3$Z
    rm -f Tcl_FSListVolumes.3 Tcl_FSListVolumes.3$Z
    rm -f Tcl_FSEvalFile.3 Tcl_FSEvalFile.3$Z
    rm -f Tcl_FSLoadFile.3 Tcl_FSLoadFile.3$Z
    rm -f Tcl_FSMatchInDirectory.3 Tcl_FSMatchInDirectory.3$Z
    rm -f Tcl_FSLink.3 Tcl_FSLink.3$Z
    rm -f Tcl_FSLstat.3 Tcl_FSLstat.3$Z
    rm -f Tcl_FSUtime.3 Tcl_FSUtime.3$Z
    rm -f Tcl_FSFileAttrsGet.3 Tcl_FSFileAttrsGet.3$Z
    rm -f Tcl_FSFileAttrsSet.3 Tcl_FSFileAttrsSet.3$Z
    rm -f Tcl_FSFileAttrStrings.3 Tcl_FSFileAttrStrings.3$Z
    rm -f Tcl_FSStat.3 Tcl_FSStat.3$Z
    rm -f Tcl_FSAccess.3 Tcl_FSAccess.3$Z
    rm -f Tcl_FSOpenFileChannel.3 Tcl_FSOpenFileChannel.3$Z
    rm -f Tcl_FSGetCwd.3 Tcl_FSGetCwd.3$Z
    rm -f Tcl_FSChdir.3 Tcl_FSChdir.3$Z
    rm -f Tcl_FSPathSeparator.3 Tcl_FSPathSeparator.3$Z
    rm -f Tcl_FSJoinPath.3 Tcl_FSJoinPath.3$Z
    rm -f Tcl_FSSplitPath.3 Tcl_FSSplitPath.3$Z
    rm -f Tcl_FSEqualPaths.3 Tcl_FSEqualPaths.3$Z
    rm -f Tcl_FSGetNormalizedPath.3 Tcl_FSGetNormalizedPath.3$Z
    rm -f Tcl_FSJoinToPath.3 Tcl_FSJoinToPath.3$Z
    rm -f Tcl_FSConvertToPathType.3 Tcl_FSConvertToPathType.3$Z
    rm -f Tcl_FSGetInternalRep.3 Tcl_FSGetInternalRep.3$Z
    rm -f Tcl_FSGetTranslatedPath.3 Tcl_FSGetTranslatedPath.3$Z
    rm -f Tcl_FSGetTranslatedStringPath.3 Tcl_FSGetTranslatedStringPath.3$Z
    rm -f Tcl_FSNewNativePath.3 Tcl_FSNewNativePath.3$Z
    rm -f Tcl_FSGetNativePath.3 Tcl_FSGetNativePath.3$Z
    rm -f Tcl_FSFileSystemInfo.3 Tcl_FSFileSystemInfo.3$Z
    rm -f Tcl_AllocStatBuf.3 Tcl_AllocStatBuf.3$Z
    ln $S FileSystem.3$Z Tcl_FSRegister.3$Z
    ln $S FileSystem.3$Z Tcl_FSUnregister.3$Z
    ln $S FileSystem.3$Z Tcl_FSData.3$Z
    ln $S FileSystem.3$Z Tcl_FSMountsChanged.3$Z
    ln $S FileSystem.3$Z Tcl_FSGetFileSystemForPath.3$Z
    ln $S FileSystem.3$Z Tcl_FSGetPathType.3$Z
    ln $S FileSystem.3$Z Tcl_FSCopyFile.3$Z
    ln $S FileSystem.3$Z Tcl_FSCopyDirectory.3$Z
    ln $S FileSystem.3$Z Tcl_FSCreateDirectory.3$Z
    ln $S FileSystem.3$Z Tcl_FSDeleteFile.3$Z
    ln $S FileSystem.3$Z Tcl_FSRemoveDirectory.3$Z
    ln $S FileSystem.3$Z Tcl_FSRenameFile.3$Z
    ln $S FileSystem.3$Z Tcl_FSListVolumes.3$Z
    ln $S FileSystem.3$Z Tcl_FSEvalFile.3$Z
    ln $S FileSystem.3$Z Tcl_FSLoadFile.3$Z
    ln $S FileSystem.3$Z Tcl_FSMatchInDirectory.3$Z
    ln $S FileSystem.3$Z Tcl_FSLink.3$Z
    ln $S FileSystem.3$Z Tcl_FSLstat.3$Z
    ln $S FileSystem.3$Z Tcl_FSUtime.3$Z
    ln $S FileSystem.3$Z Tcl_FSFileAttrsGet.3$Z
    ln $S FileSystem.3$Z Tcl_FSFileAttrsSet.3$Z
    ln $S FileSystem.3$Z Tcl_FSFileAttrStrings.3$Z
    ln $S FileSystem.3$Z Tcl_FSStat.3$Z
    ln $S FileSystem.3$Z Tcl_FSAccess.3$Z
    ln $S FileSystem.3$Z Tcl_FSOpenFileChannel.3$Z
    ln $S FileSystem.3$Z Tcl_FSGetCwd.3$Z
    ln $S FileSystem.3$Z Tcl_FSChdir.3$Z
    ln $S FileSystem.3$Z Tcl_FSPathSeparator.3$Z
    ln $S FileSystem.3$Z Tcl_FSJoinPath.3$Z
    ln $S FileSystem.3$Z Tcl_FSSplitPath.3$Z
    ln $S FileSystem.3$Z Tcl_FSEqualPaths.3$Z
    ln $S FileSystem.3$Z Tcl_FSGetNormalizedPath.3$Z
    ln $S FileSystem.3$Z Tcl_FSJoinToPath.3$Z
    ln $S FileSystem.3$Z Tcl_FSConvertToPathType.3$Z
    ln $S FileSystem.3$Z Tcl_FSGetInternalRep.3$Z
    ln $S FileSystem.3$Z Tcl_FSGetTranslatedPath.3$Z
    ln $S FileSystem.3$Z Tcl_FSGetTranslatedStringPath.3$Z
    ln $S FileSystem.3$Z Tcl_FSNewNativePath.3$Z
    ln $S FileSystem.3$Z Tcl_FSGetNativePath.3$Z
    ln $S FileSystem.3$Z Tcl_FSFileSystemInfo.3$Z
    ln $S FileSystem.3$Z Tcl_AllocStatBuf.3$Z
fi
if test -n "$ZIP" -a -r FindExec.3; then
    rm -f FindExec.3$Z
    $ZIP FindExec.3
fi
if test -r FindExec.3$Z; then
    rm -f Tcl_FindExecutable.3 Tcl_FindExecutable.3$Z
    rm -f Tcl_GetNameOfExecutable.3 Tcl_GetNameOfExecutable.3$Z
    ln $S FindExec.3$Z Tcl_FindExecutable.3$Z
    ln $S FindExec.3$Z Tcl_GetNameOfExecutable.3$Z
fi
if test -n "$ZIP" -a -r GetCwd.3; then
    rm -f GetCwd.3$Z
    $ZIP GetCwd.3
fi
if test -r GetCwd.3$Z; then
    rm -f Tcl_GetCwd.3 Tcl_GetCwd.3$Z
    rm -f Tcl_Chdir.3 Tcl_Chdir.3$Z
    ln $S GetCwd.3$Z Tcl_GetCwd.3$Z
    ln $S GetCwd.3$Z Tcl_Chdir.3$Z
fi
if test -n "$ZIP" -a -r GetHostName.3; then
    rm -f GetHostName.3$Z
    $ZIP GetHostName.3
fi
if test -r GetHostName.3$Z; then
    rm -f Tcl_GetHostName.3 Tcl_GetHostName.3$Z
    ln $S GetHostName.3$Z Tcl_GetHostName.3$Z
fi
if test -n "$ZIP" -a -r GetIndex.3; then
    rm -f GetIndex.3$Z
    $ZIP GetIndex.3
fi
if test -r GetIndex.3$Z; then
    rm -f Tcl_GetIndexFromObj.3 Tcl_GetIndexFromObj.3$Z
    rm -f Tcl_GetIndexFromObjStruct.3 Tcl_GetIndexFromObjStruct.3$Z
    ln $S GetIndex.3$Z Tcl_GetIndexFromObj.3$Z
    ln $S GetIndex.3$Z Tcl_GetIndexFromObjStruct.3$Z
fi
if test -n "$ZIP" -a -r GetInt.3; then
    rm -f GetInt.3$Z
    $ZIP GetInt.3
fi
if test -r GetInt.3$Z; then
    rm -f Tcl_GetInt.3 Tcl_GetInt.3$Z
    rm -f Tcl_GetDouble.3 Tcl_GetDouble.3$Z
    rm -f Tcl_GetBoolean.3 Tcl_GetBoolean.3$Z
    ln $S GetInt.3$Z Tcl_GetInt.3$Z
    ln $S GetInt.3$Z Tcl_GetDouble.3$Z
    ln $S GetInt.3$Z Tcl_GetBoolean.3$Z
fi
if test -n "$ZIP" -a -r GetOpnFl.3; then
    rm -f GetOpnFl.3$Z
    $ZIP GetOpnFl.3
fi
if test -r GetOpnFl.3$Z; then
    rm -f Tcl_GetOpenFile.3 Tcl_GetOpenFile.3$Z
    ln $S GetOpnFl.3$Z Tcl_GetOpenFile.3$Z
fi
if test -n "$ZIP" -a -r GetStdChan.3; then
    rm -f GetStdChan.3$Z
    $ZIP GetStdChan.3
fi
if test -r GetStdChan.3$Z; then
    rm -f Tcl_GetStdChannel.3 Tcl_GetStdChannel.3$Z
    rm -f Tcl_SetStdChannel.3 Tcl_SetStdChannel.3$Z
    ln $S GetStdChan.3$Z Tcl_GetStdChannel.3$Z
    ln $S GetStdChan.3$Z Tcl_SetStdChannel.3$Z
fi
if test -n "$ZIP" -a -r GetTime.3; then
    rm -f GetTime.3$Z
    $ZIP GetTime.3
fi
if test -r GetTime.3$Z; then
    rm -f Tcl_GetTime.3 Tcl_GetTime.3$Z
    ln $S GetTime.3$Z Tcl_GetTime.3$Z
fi
if test -n "$ZIP" -a -r GetVersion.3; then
    rm -f GetVersion.3$Z
    $ZIP GetVersion.3
fi
if test -r GetVersion.3$Z; then
    rm -f Tcl_GetVersion.3 Tcl_GetVersion.3$Z
    ln $S GetVersion.3$Z Tcl_GetVersion.3$Z
fi
if test -n "$ZIP" -a -r Hash.3; then
    rm -f Hash.3$Z
    $ZIP Hash.3
fi
if test -r Hash.3$Z; then
    rm -f Tcl_InitHashTable.3 Tcl_InitHashTable.3$Z
    rm -f Tcl_InitCustomHashTable.3 Tcl_InitCustomHashTable.3$Z
    rm -f Tcl_InitObjHashTable.3 Tcl_InitObjHashTable.3$Z
    rm -f Tcl_DeleteHashTable.3 Tcl_DeleteHashTable.3$Z
    rm -f Tcl_CreateHashEntry.3 Tcl_CreateHashEntry.3$Z
    rm -f Tcl_DeleteHashEntry.3 Tcl_DeleteHashEntry.3$Z
    rm -f Tcl_FindHashEntry.3 Tcl_FindHashEntry.3$Z
    rm -f Tcl_GetHashValue.3 Tcl_GetHashValue.3$Z
    rm -f Tcl_SetHashValue.3 Tcl_SetHashValue.3$Z
    rm -f Tcl_GetHashKey.3 Tcl_GetHashKey.3$Z
    rm -f Tcl_FirstHashEntry.3 Tcl_FirstHashEntry.3$Z
    rm -f Tcl_NextHashEntry.3 Tcl_NextHashEntry.3$Z
    rm -f Tcl_HashStats.3 Tcl_HashStats.3$Z
    ln $S Hash.3$Z Tcl_InitHashTable.3$Z
    ln $S Hash.3$Z Tcl_InitCustomHashTable.3$Z
    ln $S Hash.3$Z Tcl_InitObjHashTable.3$Z
    ln $S Hash.3$Z Tcl_DeleteHashTable.3$Z
    ln $S Hash.3$Z Tcl_CreateHashEntry.3$Z
    ln $S Hash.3$Z Tcl_DeleteHashEntry.3$Z
    ln $S Hash.3$Z Tcl_FindHashEntry.3$Z
    ln $S Hash.3$Z Tcl_GetHashValue.3$Z
    ln $S Hash.3$Z Tcl_SetHashValue.3$Z
    ln $S Hash.3$Z Tcl_GetHashKey.3$Z
    ln $S Hash.3$Z Tcl_FirstHashEntry.3$Z
    ln $S Hash.3$Z Tcl_NextHashEntry.3$Z
    ln $S Hash.3$Z Tcl_HashStats.3$Z
fi
if test -n "$ZIP" -a -r Init.3; then
    rm -f Init.3$Z
    $ZIP Init.3
fi
if test -r Init.3$Z; then
    rm -f Tcl_Init.3 Tcl_Init.3$Z
    ln $S Init.3$Z Tcl_Init.3$Z
fi
if test -n "$ZIP" -a -r InitStubs.3; then
    rm -f InitStubs.3$Z
    $ZIP InitStubs.3
fi
if test -r InitStubs.3$Z; then
    rm -f Tcl_InitStubs.3 Tcl_InitStubs.3$Z
    ln $S InitStubs.3$Z Tcl_InitStubs.3$Z
fi
if test -n "$ZIP" -a -r IntObj.3; then
    rm -f IntObj.3$Z
    $ZIP IntObj.3
fi
if test -r IntObj.3$Z; then
    rm -f Tcl_NewIntObj.3 Tcl_NewIntObj.3$Z
    rm -f Tcl_NewLongObj.3 Tcl_NewLongObj.3$Z
    rm -f Tcl_NewWideIntObj.3 Tcl_NewWideIntObj.3$Z
    rm -f Tcl_SetIntObj.3 Tcl_SetIntObj.3$Z
    rm -f Tcl_SetLongObj.3 Tcl_SetLongObj.3$Z
    rm -f Tcl_SetWideIntObj.3 Tcl_SetWideIntObj.3$Z
    rm -f Tcl_GetIntFromObj.3 Tcl_GetIntFromObj.3$Z
    rm -f Tcl_GetLongFromObj.3 Tcl_GetLongFromObj.3$Z
    rm -f Tcl_GetWideIntFromObj.3 Tcl_GetWideIntFromObj.3$Z
    ln $S IntObj.3$Z Tcl_NewIntObj.3$Z
    ln $S IntObj.3$Z Tcl_NewLongObj.3$Z
    ln $S IntObj.3$Z Tcl_NewWideIntObj.3$Z
    ln $S IntObj.3$Z Tcl_SetIntObj.3$Z
    ln $S IntObj.3$Z Tcl_SetLongObj.3$Z
    ln $S IntObj.3$Z Tcl_SetWideIntObj.3$Z
    ln $S IntObj.3$Z Tcl_GetIntFromObj.3$Z
    ln $S IntObj.3$Z Tcl_GetLongFromObj.3$Z
    ln $S IntObj.3$Z Tcl_GetWideIntFromObj.3$Z
fi
if test -n "$ZIP" -a -r Interp.3; then
    rm -f Interp.3$Z
    $ZIP Interp.3
fi
if test -r Interp.3$Z; then
    rm -f Tcl_Interp.3 Tcl_Interp.3$Z
    ln $S Interp.3$Z Tcl_Interp.3$Z
fi
if test -n "$ZIP" -a -r LinkVar.3; then
    rm -f LinkVar.3$Z
    $ZIP LinkVar.3
fi
if test -r LinkVar.3$Z; then
    rm -f Tcl_LinkVar.3 Tcl_LinkVar.3$Z
    rm -f Tcl_UnlinkVar.3 Tcl_UnlinkVar.3$Z
    rm -f Tcl_UpdateLinkedVar.3 Tcl_UpdateLinkedVar.3$Z
    ln $S LinkVar.3$Z Tcl_LinkVar.3$Z
    ln $S LinkVar.3$Z Tcl_UnlinkVar.3$Z
    ln $S LinkVar.3$Z Tcl_UpdateLinkedVar.3$Z
fi
if test -n "$ZIP" -a -r ListObj.3; then
    rm -f ListObj.3$Z
    $ZIP ListObj.3
fi
if test -r ListObj.3$Z; then
    rm -f Tcl_ListObjAppendList.3 Tcl_ListObjAppendList.3$Z
    rm -f Tcl_ListObjAppendElement.3 Tcl_ListObjAppendElement.3$Z
    rm -f Tcl_NewListObj.3 Tcl_NewListObj.3$Z
    rm -f Tcl_SetListObj.3 Tcl_SetListObj.3$Z
    rm -f Tcl_ListObjGetElements.3 Tcl_ListObjGetElements.3$Z
    rm -f Tcl_ListObjLength.3 Tcl_ListObjLength.3$Z
    rm -f Tcl_ListObjIndex.3 Tcl_ListObjIndex.3$Z
    rm -f Tcl_ListObjReplace.3 Tcl_ListObjReplace.3$Z
    ln $S ListObj.3$Z Tcl_ListObjAppendList.3$Z
    ln $S ListObj.3$Z Tcl_ListObjAppendElement.3$Z
    ln $S ListObj.3$Z Tcl_NewListObj.3$Z
    ln $S ListObj.3$Z Tcl_SetListObj.3$Z
    ln $S ListObj.3$Z Tcl_ListObjGetElements.3$Z
    ln $S ListObj.3$Z Tcl_ListObjLength.3$Z
    ln $S ListObj.3$Z Tcl_ListObjIndex.3$Z
    ln $S ListObj.3$Z Tcl_ListObjReplace.3$Z
fi
if test -n "$ZIP" -a -r Macintosh.3; then
    rm -f Macintosh.3$Z
    $ZIP Macintosh.3
fi
if test -r Macintosh.3$Z; then
    rm -f Tcl_MacSetEventProc.3 Tcl_MacSetEventProc.3$Z
    rm -f Tcl_MacConvertTextResource.3 Tcl_MacConvertTextResource.3$Z
    rm -f Tcl_MacEvalResource.3 Tcl_MacEvalResource.3$Z
    rm -f Tcl_MacFindResource.3 Tcl_MacFindResource.3$Z
    rm -f Tcl_GetOSTypeFromObj.3 Tcl_GetOSTypeFromObj.3$Z
    rm -f Tcl_SetOSTypeObj.3 Tcl_SetOSTypeObj.3$Z
    rm -f Tcl_NewOSTypeObj.3 Tcl_NewOSTypeObj.3$Z
    ln $S Macintosh.3$Z Tcl_MacSetEventProc.3$Z
    ln $S Macintosh.3$Z Tcl_MacConvertTextResource.3$Z
    ln $S Macintosh.3$Z Tcl_MacEvalResource.3$Z
    ln $S Macintosh.3$Z Tcl_MacFindResource.3$Z
    ln $S Macintosh.3$Z Tcl_GetOSTypeFromObj.3$Z
    ln $S Macintosh.3$Z Tcl_SetOSTypeObj.3$Z
    ln $S Macintosh.3$Z Tcl_NewOSTypeObj.3$Z
fi
if test -n "$ZIP" -a -r Notifier.3; then
    rm -f Notifier.3$Z
    $ZIP Notifier.3
fi
if test -r Notifier.3$Z; then
    rm -f Tcl_CreateEventSource.3 Tcl_CreateEventSource.3$Z
    rm -f Tcl_DeleteEventSource.3 Tcl_DeleteEventSource.3$Z
    rm -f Tcl_SetMaxBlockTime.3 Tcl_SetMaxBlockTime.3$Z
    rm -f Tcl_QueueEvent.3 Tcl_QueueEvent.3$Z
    rm -f Tcl_ThreadQueueEvent.3 Tcl_ThreadQueueEvent.3$Z
    rm -f Tcl_ThreadAlert.3 Tcl_ThreadAlert.3$Z
    rm -f Tcl_GetCurrentThread.3 Tcl_GetCurrentThread.3$Z
    rm -f Tcl_DeleteEvents.3 Tcl_DeleteEvents.3$Z
    rm -f Tcl_InitNotifier.3 Tcl_InitNotifier.3$Z
    rm -f Tcl_FinalizeNotifier.3 Tcl_FinalizeNotifier.3$Z
    rm -f Tcl_WaitForEvent.3 Tcl_WaitForEvent.3$Z
    rm -f Tcl_AlertNotifier.3 Tcl_AlertNotifier.3$Z
    rm -f Tcl_SetTimer.3 Tcl_SetTimer.3$Z
    rm -f Tcl_ServiceAll.3 Tcl_ServiceAll.3$Z
    rm -f Tcl_ServiceEvent.3 Tcl_ServiceEvent.3$Z
    rm -f Tcl_GetServiceMode.3 Tcl_GetServiceMode.3$Z
    rm -f Tcl_SetServiceMode.3 Tcl_SetServiceMode.3$Z
    ln $S Notifier.3$Z Tcl_CreateEventSource.3$Z
    ln $S Notifier.3$Z Tcl_DeleteEventSource.3$Z
    ln $S Notifier.3$Z Tcl_SetMaxBlockTime.3$Z
    ln $S Notifier.3$Z Tcl_QueueEvent.3$Z
    ln $S Notifier.3$Z Tcl_ThreadQueueEvent.3$Z
    ln $S Notifier.3$Z Tcl_ThreadAlert.3$Z
    ln $S Notifier.3$Z Tcl_GetCurrentThread.3$Z
    ln $S Notifier.3$Z Tcl_DeleteEvents.3$Z
    ln $S Notifier.3$Z Tcl_InitNotifier.3$Z
    ln $S Notifier.3$Z Tcl_FinalizeNotifier.3$Z
    ln $S Notifier.3$Z Tcl_WaitForEvent.3$Z
    ln $S Notifier.3$Z Tcl_AlertNotifier.3$Z
    ln $S Notifier.3$Z Tcl_SetTimer.3$Z
    ln $S Notifier.3$Z Tcl_ServiceAll.3$Z
    ln $S Notifier.3$Z Tcl_ServiceEvent.3$Z
    ln $S Notifier.3$Z Tcl_GetServiceMode.3$Z
    ln $S Notifier.3$Z Tcl_SetServiceMode.3$Z
fi
if test -n "$ZIP" -a -r Object.3; then
    rm -f Object.3$Z
    $ZIP Object.3
fi
if test -r Object.3$Z; then
    rm -f Tcl_NewObj.3 Tcl_NewObj.3$Z
    rm -f Tcl_DuplicateObj.3 Tcl_DuplicateObj.3$Z
    rm -f Tcl_IncrRefCount.3 Tcl_IncrRefCount.3$Z
    rm -f Tcl_DecrRefCount.3 Tcl_DecrRefCount.3$Z
    rm -f Tcl_IsShared.3 Tcl_IsShared.3$Z
    rm -f Tcl_InvalidateStringRep.3 Tcl_InvalidateStringRep.3$Z
    ln $S Object.3$Z Tcl_NewObj.3$Z
    ln $S Object.3$Z Tcl_DuplicateObj.3$Z
    ln $S Object.3$Z Tcl_IncrRefCount.3$Z
    ln $S Object.3$Z Tcl_DecrRefCount.3$Z
    ln $S Object.3$Z Tcl_IsShared.3$Z
    ln $S Object.3$Z Tcl_InvalidateStringRep.3$Z
fi
if test -n "$ZIP" -a -r ObjectType.3; then
    rm -f ObjectType.3$Z
    $ZIP ObjectType.3
fi
if test -r ObjectType.3$Z; then
    rm -f Tcl_RegisterObjType.3 Tcl_RegisterObjType.3$Z
    rm -f Tcl_GetObjType.3 Tcl_GetObjType.3$Z
    rm -f Tcl_AppendAllObjTypes.3 Tcl_AppendAllObjTypes.3$Z
    rm -f Tcl_ConvertToType.3 Tcl_ConvertToType.3$Z
    ln $S ObjectType.3$Z Tcl_RegisterObjType.3$Z
    ln $S ObjectType.3$Z Tcl_GetObjType.3$Z
    ln $S ObjectType.3$Z Tcl_AppendAllObjTypes.3$Z
    ln $S ObjectType.3$Z Tcl_ConvertToType.3$Z
fi
if test -n "$ZIP" -a -r OpenFileChnl.3; then
    rm -f OpenFileChnl.3$Z
    $ZIP OpenFileChnl.3
fi
if test -r OpenFileChnl.3$Z; then
    rm -f Tcl_OpenFileChannel.3 Tcl_OpenFileChannel.3$Z
    rm -f Tcl_OpenCommandChannel.3 Tcl_OpenCommandChannel.3$Z
    rm -f Tcl_MakeFileChannel.3 Tcl_MakeFileChannel.3$Z
    rm -f Tcl_GetChannel.3 Tcl_GetChannel.3$Z
    rm -f Tcl_GetChannelNames.3 Tcl_GetChannelNames.3$Z
    rm -f Tcl_GetChannelNamesEx.3 Tcl_GetChannelNamesEx.3$Z
    rm -f Tcl_RegisterChannel.3 Tcl_RegisterChannel.3$Z
    rm -f Tcl_UnregisterChannel.3 Tcl_UnregisterChannel.3$Z
    rm -f Tcl_DetachChannel.3 Tcl_DetachChannel.3$Z
    rm -f Tcl_IsStandardChannel.3 Tcl_IsStandardChannel.3$Z
    rm -f Tcl_Close.3 Tcl_Close.3$Z
    rm -f Tcl_ReadChars.3 Tcl_ReadChars.3$Z
    rm -f Tcl_Read.3 Tcl_Read.3$Z
    rm -f Tcl_GetsObj.3 Tcl_GetsObj.3$Z
    rm -f Tcl_Gets.3 Tcl_Gets.3$Z
    rm -f Tcl_WriteObj.3 Tcl_WriteObj.3$Z
    rm -f Tcl_WriteChars.3 Tcl_WriteChars.3$Z
    rm -f Tcl_Write.3 Tcl_Write.3$Z
    rm -f Tcl_Flush.3 Tcl_Flush.3$Z
    rm -f Tcl_Seek.3 Tcl_Seek.3$Z
    rm -f Tcl_Tell.3 Tcl_Tell.3$Z
    rm -f Tcl_GetChannelOption.3 Tcl_GetChannelOption.3$Z
    rm -f Tcl_SetChannelOption.3 Tcl_SetChannelOption.3$Z
    rm -f Tcl_Eof.3 Tcl_Eof.3$Z
    rm -f Tcl_InputBlocked.3 Tcl_InputBlocked.3$Z
    rm -f Tcl_InputBuffered.3 Tcl_InputBuffered.3$Z
    rm -f Tcl_OutputBuffered.3 Tcl_OutputBuffered.3$Z
    rm -f Tcl_Ungets.3 Tcl_Ungets.3$Z
    rm -f Tcl_ReadRaw.3 Tcl_ReadRaw.3$Z
    rm -f Tcl_WriteRaw.3 Tcl_WriteRaw.3$Z
    ln $S OpenFileChnl.3$Z Tcl_OpenFileChannel.3$Z
    ln $S OpenFileChnl.3$Z Tcl_OpenCommandChannel.3$Z
    ln $S OpenFileChnl.3$Z Tcl_MakeFileChannel.3$Z
    ln $S OpenFileChnl.3$Z Tcl_GetChannel.3$Z
    ln $S OpenFileChnl.3$Z Tcl_GetChannelNames.3$Z
    ln $S OpenFileChnl.3$Z Tcl_GetChannelNamesEx.3$Z
    ln $S OpenFileChnl.3$Z Tcl_RegisterChannel.3$Z
    ln $S OpenFileChnl.3$Z Tcl_UnregisterChannel.3$Z
    ln $S OpenFileChnl.3$Z Tcl_DetachChannel.3$Z
    ln $S OpenFileChnl.3$Z Tcl_IsStandardChannel.3$Z
    ln $S OpenFileChnl.3$Z Tcl_Close.3$Z
    ln $S OpenFileChnl.3$Z Tcl_ReadChars.3$Z
    ln $S OpenFileChnl.3$Z Tcl_Read.3$Z
    ln $S OpenFileChnl.3$Z Tcl_GetsObj.3$Z
    ln $S OpenFileChnl.3$Z Tcl_Gets.3$Z
    ln $S OpenFileChnl.3$Z Tcl_WriteObj.3$Z
    ln $S OpenFileChnl.3$Z Tcl_WriteChars.3$Z
    ln $S OpenFileChnl.3$Z Tcl_Write.3$Z
    ln $S OpenFileChnl.3$Z Tcl_Flush.3$Z
    ln $S OpenFileChnl.3$Z Tcl_Seek.3$Z
    ln $S OpenFileChnl.3$Z Tcl_Tell.3$Z
    ln $S OpenFileChnl.3$Z Tcl_GetChannelOption.3$Z
    ln $S OpenFileChnl.3$Z Tcl_SetChannelOption.3$Z
    ln $S OpenFileChnl.3$Z Tcl_Eof.3$Z
    ln $S OpenFileChnl.3$Z Tcl_InputBlocked.3$Z
    ln $S OpenFileChnl.3$Z Tcl_InputBuffered.3$Z
    ln $S OpenFileChnl.3$Z Tcl_OutputBuffered.3$Z
    ln $S OpenFileChnl.3$Z Tcl_Ungets.3$Z
    ln $S OpenFileChnl.3$Z Tcl_ReadRaw.3$Z
    ln $S OpenFileChnl.3$Z Tcl_WriteRaw.3$Z
fi
if test -n "$ZIP" -a -r OpenTcp.3; then
    rm -f OpenTcp.3$Z
    $ZIP OpenTcp.3
fi
if test -r OpenTcp.3$Z; then
    rm -f Tcl_OpenTcpClient.3 Tcl_OpenTcpClient.3$Z
    rm -f Tcl_MakeTcpClientChannel.3 Tcl_MakeTcpClientChannel.3$Z
    rm -f Tcl_OpenTcpServer.3 Tcl_OpenTcpServer.3$Z
    ln $S OpenTcp.3$Z Tcl_OpenTcpClient.3$Z
    ln $S OpenTcp.3$Z Tcl_MakeTcpClientChannel.3$Z
    ln $S OpenTcp.3$Z Tcl_OpenTcpServer.3$Z
fi
if test -n "$ZIP" -a -r Panic.3; then
    rm -f Panic.3$Z
    $ZIP Panic.3
fi
if test -r Panic.3$Z; then
    rm -f Tcl_Panic.3 Tcl_Panic.3$Z
    rm -f Tcl_PanicVA.3 Tcl_PanicVA.3$Z
    rm -f Tcl_SetPanicProc.3 Tcl_SetPanicProc.3$Z
    if test "${CASEINSENSITIVEFS:-}" != "1"; then rm -f panic.3 panic.3$Z; fi
    rm -f panicVA.3 panicVA.3$Z
    ln $S Panic.3$Z Tcl_Panic.3$Z
    ln $S Panic.3$Z Tcl_PanicVA.3$Z
    ln $S Panic.3$Z Tcl_SetPanicProc.3$Z
    if test "${CASEINSENSITIVEFS:-}" != "1"; then ln $S Panic.3$Z panic.3$Z; fi
    ln $S Panic.3$Z panicVA.3$Z
fi
if test -n "$ZIP" -a -r ParseCmd.3; then
    rm -f ParseCmd.3$Z
    $ZIP ParseCmd.3
fi
if test -r ParseCmd.3$Z; then
    rm -f Tcl_ParseCommand.3 Tcl_ParseCommand.3$Z
    rm -f Tcl_ParseExpr.3 Tcl_ParseExpr.3$Z
    rm -f Tcl_ParseBraces.3 Tcl_ParseBraces.3$Z
    rm -f Tcl_ParseQuotedString.3 Tcl_ParseQuotedString.3$Z
    rm -f Tcl_ParseVarName.3 Tcl_ParseVarName.3$Z
    rm -f Tcl_ParseVar.3 Tcl_ParseVar.3$Z
    rm -f Tcl_FreeParse.3 Tcl_FreeParse.3$Z
    rm -f Tcl_EvalTokens.3 Tcl_EvalTokens.3$Z
    rm -f Tcl_EvalTokensStandard.3 Tcl_EvalTokensStandard.3$Z
    ln $S ParseCmd.3$Z Tcl_ParseCommand.3$Z
    ln $S ParseCmd.3$Z Tcl_ParseExpr.3$Z
    ln $S ParseCmd.3$Z Tcl_ParseBraces.3$Z
    ln $S ParseCmd.3$Z Tcl_ParseQuotedString.3$Z
    ln $S ParseCmd.3$Z Tcl_ParseVarName.3$Z
    ln $S ParseCmd.3$Z Tcl_ParseVar.3$Z
    ln $S ParseCmd.3$Z Tcl_FreeParse.3$Z
    ln $S ParseCmd.3$Z Tcl_EvalTokens.3$Z
    ln $S ParseCmd.3$Z Tcl_EvalTokensStandard.3$Z
fi
if test -n "$ZIP" -a -r PkgRequire.3; then
    rm -f PkgRequire.3$Z
    $ZIP PkgRequire.3
fi
if test -r PkgRequire.3$Z; then
    rm -f Tcl_PkgRequire.3 Tcl_PkgRequire.3$Z
    rm -f Tcl_PkgRequireEx.3 Tcl_PkgRequireEx.3$Z
    rm -f Tcl_PkgPresent.3 Tcl_PkgPresent.3$Z
    rm -f Tcl_PkgPresentEx.3 Tcl_PkgPresentEx.3$Z
    rm -f Tcl_PkgProvide.3 Tcl_PkgProvide.3$Z
    rm -f Tcl_PkgProvideEx.3 Tcl_PkgProvideEx.3$Z
    ln $S PkgRequire.3$Z Tcl_PkgRequire.3$Z
    ln $S PkgRequire.3$Z Tcl_PkgRequireEx.3$Z
    ln $S PkgRequire.3$Z Tcl_PkgPresent.3$Z
    ln $S PkgRequire.3$Z Tcl_PkgPresentEx.3$Z
    ln $S PkgRequire.3$Z Tcl_PkgProvide.3$Z
    ln $S PkgRequire.3$Z Tcl_PkgProvideEx.3$Z
fi
if test -n "$ZIP" -a -r Preserve.3; then
    rm -f Preserve.3$Z
    $ZIP Preserve.3
fi
if test -r Preserve.3$Z; then
    rm -f Tcl_Preserve.3 Tcl_Preserve.3$Z
    rm -f Tcl_Release.3 Tcl_Release.3$Z
    rm -f Tcl_EventuallyFree.3 Tcl_EventuallyFree.3$Z
    ln $S Preserve.3$Z Tcl_Preserve.3$Z
    ln $S Preserve.3$Z Tcl_Release.3$Z
    ln $S Preserve.3$Z Tcl_EventuallyFree.3$Z
fi
if test -n "$ZIP" -a -r PrintDbl.3; then
    rm -f PrintDbl.3$Z
    $ZIP PrintDbl.3
fi
if test -r PrintDbl.3$Z; then
    rm -f Tcl_PrintDouble.3 Tcl_PrintDouble.3$Z
    ln $S PrintDbl.3$Z Tcl_PrintDouble.3$Z
fi
if test -n "$ZIP" -a -r RecEvalObj.3; then
    rm -f RecEvalObj.3$Z
    $ZIP RecEvalObj.3
fi
if test -r RecEvalObj.3$Z; then
    rm -f Tcl_RecordAndEvalObj.3 Tcl_RecordAndEvalObj.3$Z
    ln $S RecEvalObj.3$Z Tcl_RecordAndEvalObj.3$Z
fi
if test -n "$ZIP" -a -r RecordEval.3; then
    rm -f RecordEval.3$Z
    $ZIP RecordEval.3
fi
if test -r RecordEval.3$Z; then
    rm -f Tcl_RecordAndEval.3 Tcl_RecordAndEval.3$Z
    ln $S RecordEval.3$Z Tcl_RecordAndEval.3$Z
fi
if test -n "$ZIP" -a -r RegExp.3; then
    rm -f RegExp.3$Z
    $ZIP RegExp.3
fi
if test -r RegExp.3$Z; then
    rm -f Tcl_RegExpMatch.3 Tcl_RegExpMatch.3$Z
    rm -f Tcl_RegExpCompile.3 Tcl_RegExpCompile.3$Z
    rm -f Tcl_RegExpExec.3 Tcl_RegExpExec.3$Z
    rm -f Tcl_RegExpRange.3 Tcl_RegExpRange.3$Z
    rm -f Tcl_GetRegExpFromObj.3 Tcl_GetRegExpFromObj.3$Z
    rm -f Tcl_RegExpMatchObj.3 Tcl_RegExpMatchObj.3$Z
    rm -f Tcl_RegExpExecObj.3 Tcl_RegExpExecObj.3$Z
    rm -f Tcl_RegExpGetInfo.3 Tcl_RegExpGetInfo.3$Z
    ln $S RegExp.3$Z Tcl_RegExpMatch.3$Z
    ln $S RegExp.3$Z Tcl_RegExpCompile.3$Z
    ln $S RegExp.3$Z Tcl_RegExpExec.3$Z
    ln $S RegExp.3$Z Tcl_RegExpRange.3$Z
    ln $S RegExp.3$Z Tcl_GetRegExpFromObj.3$Z
    ln $S RegExp.3$Z Tcl_RegExpMatchObj.3$Z
    ln $S RegExp.3$Z Tcl_RegExpExecObj.3$Z
    ln $S RegExp.3$Z Tcl_RegExpGetInfo.3$Z
fi
if test -n "$ZIP" -a -r SaveResult.3; then
    rm -f SaveResult.3$Z
    $ZIP SaveResult.3
fi
if test -r SaveResult.3$Z; then
    rm -f Tcl_SaveResult.3 Tcl_SaveResult.3$Z
    rm -f Tcl_RestoreResult.3 Tcl_RestoreResult.3$Z
    rm -f Tcl_DiscardResult.3 Tcl_DiscardResult.3$Z
    ln $S SaveResult.3$Z Tcl_SaveResult.3$Z
    ln $S SaveResult.3$Z Tcl_RestoreResult.3$Z
    ln $S SaveResult.3$Z Tcl_DiscardResult.3$Z
fi
if test -n "$ZIP" -a -r SetErrno.3; then
    rm -f SetErrno.3$Z
    $ZIP SetErrno.3
fi
if test -r SetErrno.3$Z; then
    rm -f Tcl_SetErrno.3 Tcl_SetErrno.3$Z
    rm -f Tcl_GetErrno.3 Tcl_GetErrno.3$Z
    rm -f Tcl_ErrnoId.3 Tcl_ErrnoId.3$Z
    rm -f Tcl_ErrnoMsg.3 Tcl_ErrnoMsg.3$Z
    ln $S SetErrno.3$Z Tcl_SetErrno.3$Z
    ln $S SetErrno.3$Z Tcl_GetErrno.3$Z
    ln $S SetErrno.3$Z Tcl_ErrnoId.3$Z
    ln $S SetErrno.3$Z Tcl_ErrnoMsg.3$Z
fi
if test -n "$ZIP" -a -r SetRecLmt.3; then
    rm -f SetRecLmt.3$Z
    $ZIP SetRecLmt.3
fi
if test -r SetRecLmt.3$Z; then
    rm -f Tcl_SetRecursionLimit.3 Tcl_SetRecursionLimit.3$Z
    ln $S SetRecLmt.3$Z Tcl_SetRecursionLimit.3$Z
fi
if test -n "$ZIP" -a -r SetResult.3; then
    rm -f SetResult.3$Z
    $ZIP SetResult.3
fi
if test -r SetResult.3$Z; then
    rm -f Tcl_SetObjResult.3 Tcl_SetObjResult.3$Z
    rm -f Tcl_GetObjResult.3 Tcl_GetObjResult.3$Z
    rm -f Tcl_SetResult.3 Tcl_SetResult.3$Z
    rm -f Tcl_GetStringResult.3 Tcl_GetStringResult.3$Z
    rm -f Tcl_AppendResult.3 Tcl_AppendResult.3$Z
    rm -f Tcl_AppendResultVA.3 Tcl_AppendResultVA.3$Z
    rm -f Tcl_AppendElement.3 Tcl_AppendElement.3$Z
    rm -f Tcl_ResetResult.3 Tcl_ResetResult.3$Z
    rm -f Tcl_FreeResult.3 Tcl_FreeResult.3$Z
    ln $S SetResult.3$Z Tcl_SetObjResult.3$Z
    ln $S SetResult.3$Z Tcl_GetObjResult.3$Z
    ln $S SetResult.3$Z Tcl_SetResult.3$Z
    ln $S SetResult.3$Z Tcl_GetStringResult.3$Z
    ln $S SetResult.3$Z Tcl_AppendResult.3$Z
    ln $S SetResult.3$Z Tcl_AppendResultVA.3$Z
    ln $S SetResult.3$Z Tcl_AppendElement.3$Z
    ln $S SetResult.3$Z Tcl_ResetResult.3$Z
    ln $S SetResult.3$Z Tcl_FreeResult.3$Z
fi
if test -n "$ZIP" -a -r SetVar.3; then
    rm -f SetVar.3$Z
    $ZIP SetVar.3
fi
if test -r SetVar.3$Z; then
    rm -f Tcl_SetVar2Ex.3 Tcl_SetVar2Ex.3$Z
    rm -f Tcl_SetVar.3 Tcl_SetVar.3$Z
    rm -f Tcl_SetVar2.3 Tcl_SetVar2.3$Z
    rm -f Tcl_ObjSetVar2.3 Tcl_ObjSetVar2.3$Z
    rm -f Tcl_GetVar2Ex.3 Tcl_GetVar2Ex.3$Z
    rm -f Tcl_GetVar.3 Tcl_GetVar.3$Z
    rm -f Tcl_GetVar2.3 Tcl_GetVar2.3$Z
    rm -f Tcl_ObjGetVar2.3 Tcl_ObjGetVar2.3$Z
    rm -f Tcl_UnsetVar.3 Tcl_UnsetVar.3$Z
    rm -f Tcl_UnsetVar2.3 Tcl_UnsetVar2.3$Z
    ln $S SetVar.3$Z Tcl_SetVar2Ex.3$Z
    ln $S SetVar.3$Z Tcl_SetVar.3$Z
    ln $S SetVar.3$Z Tcl_SetVar2.3$Z
    ln $S SetVar.3$Z Tcl_ObjSetVar2.3$Z
    ln $S SetVar.3$Z Tcl_GetVar2Ex.3$Z
    ln $S SetVar.3$Z Tcl_GetVar.3$Z
    ln $S SetVar.3$Z Tcl_GetVar2.3$Z
    ln $S SetVar.3$Z Tcl_ObjGetVar2.3$Z
    ln $S SetVar.3$Z Tcl_UnsetVar.3$Z
    ln $S SetVar.3$Z Tcl_UnsetVar2.3$Z
fi
if test -n "$ZIP" -a -r Signal.3; then
    rm -f Signal.3$Z
    $ZIP Signal.3
fi
if test -r Signal.3$Z; then
    rm -f Tcl_SignalId.3 Tcl_SignalId.3$Z
    rm -f Tcl_SignalMsg.3 Tcl_SignalMsg.3$Z
    ln $S Signal.3$Z Tcl_SignalId.3$Z
    ln $S Signal.3$Z Tcl_SignalMsg.3$Z
fi
if test -n "$ZIP" -a -r Sleep.3; then
    rm -f Sleep.3$Z
    $ZIP Sleep.3
fi
if test -r Sleep.3$Z; then
    rm -f Tcl_Sleep.3 Tcl_Sleep.3$Z
    ln $S Sleep.3$Z Tcl_Sleep.3$Z
fi
if test -n "$ZIP" -a -r SourceRCFile.3; then
    rm -f SourceRCFile.3$Z
    $ZIP SourceRCFile.3
fi
if test -r SourceRCFile.3$Z; then
    rm -f Tcl_SourceRCFile.3 Tcl_SourceRCFile.3$Z
    ln $S SourceRCFile.3$Z Tcl_SourceRCFile.3$Z
fi
if test -n "$ZIP" -a -r SplitList.3; then
    rm -f SplitList.3$Z
    $ZIP SplitList.3
fi
if test -r SplitList.3$Z; then
    rm -f Tcl_SplitList.3 Tcl_SplitList.3$Z
    rm -f Tcl_Merge.3 Tcl_Merge.3$Z
    rm -f Tcl_ScanElement.3 Tcl_ScanElement.3$Z
    rm -f Tcl_ConvertElement.3 Tcl_ConvertElement.3$Z
    rm -f Tcl_ScanCountedElement.3 Tcl_ScanCountedElement.3$Z
    rm -f Tcl_ConvertCountedElement.3 Tcl_ConvertCountedElement.3$Z
    ln $S SplitList.3$Z Tcl_SplitList.3$Z
    ln $S SplitList.3$Z Tcl_Merge.3$Z
    ln $S SplitList.3$Z Tcl_ScanElement.3$Z
    ln $S SplitList.3$Z Tcl_ConvertElement.3$Z
    ln $S SplitList.3$Z Tcl_ScanCountedElement.3$Z
    ln $S SplitList.3$Z Tcl_ConvertCountedElement.3$Z
fi
if test -n "$ZIP" -a -r SplitPath.3; then
    rm -f SplitPath.3$Z
    $ZIP SplitPath.3
fi
if test -r SplitPath.3$Z; then
    rm -f Tcl_SplitPath.3 Tcl_SplitPath.3$Z
    rm -f Tcl_JoinPath.3 Tcl_JoinPath.3$Z
    rm -f Tcl_GetPathType.3 Tcl_GetPathType.3$Z
    ln $S SplitPath.3$Z Tcl_SplitPath.3$Z
    ln $S SplitPath.3$Z Tcl_JoinPath.3$Z
    ln $S SplitPath.3$Z Tcl_GetPathType.3$Z
fi
if test -n "$ZIP" -a -r StaticPkg.3; then
    rm -f StaticPkg.3$Z
    $ZIP StaticPkg.3
fi
if test -r StaticPkg.3$Z; then
    rm -f Tcl_StaticPackage.3 Tcl_StaticPackage.3$Z
    ln $S StaticPkg.3$Z Tcl_StaticPackage.3$Z
fi
if test -n "$ZIP" -a -r StdChannels.3; then
    rm -f StdChannels.3$Z
    $ZIP StdChannels.3
fi
if test -r StdChannels.3$Z; then
    rm -f Tcl_StandardChannels.3 Tcl_StandardChannels.3$Z
    ln $S StdChannels.3$Z Tcl_StandardChannels.3$Z
fi
if test -n "$ZIP" -a -r StrMatch.3; then
    rm -f StrMatch.3$Z
    $ZIP StrMatch.3
fi
if test -r StrMatch.3$Z; then
    rm -f Tcl_StringMatch.3 Tcl_StringMatch.3$Z
    rm -f Tcl_StringCaseMatch.3 Tcl_StringCaseMatch.3$Z
    ln $S StrMatch.3$Z Tcl_StringMatch.3$Z
    ln $S StrMatch.3$Z Tcl_StringCaseMatch.3$Z
fi
if test -n "$ZIP" -a -r StringObj.3; then
    rm -f StringObj.3$Z
    $ZIP StringObj.3
fi
if test -r StringObj.3$Z; then
    rm -f Tcl_NewStringObj.3 Tcl_NewStringObj.3$Z
    rm -f Tcl_NewUnicodeObj.3 Tcl_NewUnicodeObj.3$Z
    rm -f Tcl_SetStringObj.3 Tcl_SetStringObj.3$Z
    rm -f Tcl_SetUnicodeObj.3 Tcl_SetUnicodeObj.3$Z
    rm -f Tcl_GetStringFromObj.3 Tcl_GetStringFromObj.3$Z
    rm -f Tcl_GetString.3 Tcl_GetString.3$Z
    rm -f Tcl_GetUnicodeFromObj.3 Tcl_GetUnicodeFromObj.3$Z
    rm -f Tcl_GetUnicode.3 Tcl_GetUnicode.3$Z
    rm -f Tcl_GetUniChar.3 Tcl_GetUniChar.3$Z
    rm -f Tcl_GetCharLength.3 Tcl_GetCharLength.3$Z
    rm -f Tcl_GetRange.3 Tcl_GetRange.3$Z
    rm -f Tcl_AppendToObj.3 Tcl_AppendToObj.3$Z
    rm -f Tcl_AppendUnicodeToObj.3 Tcl_AppendUnicodeToObj.3$Z
    rm -f Tcl_AppendStringsToObj.3 Tcl_AppendStringsToObj.3$Z
    rm -f Tcl_AppendStringsToObjVA.3 Tcl_AppendStringsToObjVA.3$Z
    rm -f Tcl_AppendObjToObj.3 Tcl_AppendObjToObj.3$Z
    rm -f Tcl_SetObjLength.3 Tcl_SetObjLength.3$Z
    rm -f Tcl_ConcatObj.3 Tcl_ConcatObj.3$Z
    rm -f Tcl_AttemptSetObjLength.3 Tcl_AttemptSetObjLength.3$Z
    ln $S StringObj.3$Z Tcl_NewStringObj.3$Z
    ln $S StringObj.3$Z Tcl_NewUnicodeObj.3$Z
    ln $S StringObj.3$Z Tcl_SetStringObj.3$Z
    ln $S StringObj.3$Z Tcl_SetUnicodeObj.3$Z
    ln $S StringObj.3$Z Tcl_GetStringFromObj.3$Z
    ln $S StringObj.3$Z Tcl_GetString.3$Z
    ln $S StringObj.3$Z Tcl_GetUnicodeFromObj.3$Z
    ln $S StringObj.3$Z Tcl_GetUnicode.3$Z
    ln $S StringObj.3$Z Tcl_GetUniChar.3$Z
    ln $S StringObj.3$Z Tcl_GetCharLength.3$Z
    ln $S StringObj.3$Z Tcl_GetRange.3$Z
    ln $S StringObj.3$Z Tcl_AppendToObj.3$Z
    ln $S StringObj.3$Z Tcl_AppendUnicodeToObj.3$Z
    ln $S StringObj.3$Z Tcl_AppendStringsToObj.3$Z
    ln $S StringObj.3$Z Tcl_AppendStringsToObjVA.3$Z
    ln $S StringObj.3$Z Tcl_AppendObjToObj.3$Z
    ln $S StringObj.3$Z Tcl_SetObjLength.3$Z
    ln $S StringObj.3$Z Tcl_ConcatObj.3$Z
    ln $S StringObj.3$Z Tcl_AttemptSetObjLength.3$Z
fi
if test -n "$ZIP" -a -r SubstObj.3; then
    rm -f SubstObj.3$Z
    $ZIP SubstObj.3
fi
if test -r SubstObj.3$Z; then
    rm -f Tcl_SubstObj.3 Tcl_SubstObj.3$Z
    ln $S SubstObj.3$Z Tcl_SubstObj.3$Z
fi
if test -n "$ZIP" -a -r TCL_MEM_DEBUG.3; then
    rm -f TCL_MEM_DEBUG.3$Z
    $ZIP TCL_MEM_DEBUG.3
fi
if test -n "$ZIP" -a -r Tcl.n; then
    rm -f Tcl.n$Z
    $ZIP Tcl.n
fi
if test -n "$ZIP" -a -r Tcl_Main.3; then
    rm -f Tcl_Main.3$Z
    $ZIP Tcl_Main.3
fi
if test -r Tcl_Main.3$Z; then
    rm -f Tcl_SetMainLoop.3 Tcl_SetMainLoop.3$Z
    ln $S Tcl_Main.3$Z Tcl_SetMainLoop.3$Z
fi
if test -n "$ZIP" -a -r Thread.3; then
    rm -f Thread.3$Z
    $ZIP Thread.3
fi
if test -r Thread.3$Z; then
    rm -f Tcl_ConditionNotify.3 Tcl_ConditionNotify.3$Z
    rm -f Tcl_ConditionWait.3 Tcl_ConditionWait.3$Z
    rm -f Tcl_ConditionFinalize.3 Tcl_ConditionFinalize.3$Z
    rm -f Tcl_GetThreadData.3 Tcl_GetThreadData.3$Z
    rm -f Tcl_MutexLock.3 Tcl_MutexLock.3$Z
    rm -f Tcl_MutexUnlock.3 Tcl_MutexUnlock.3$Z
    rm -f Tcl_MutexFinalize.3 Tcl_MutexFinalize.3$Z
    rm -f Tcl_CreateThread.3 Tcl_CreateThread.3$Z
    rm -f Tcl_JoinThread.3 Tcl_JoinThread.3$Z
    ln $S Thread.3$Z Tcl_ConditionNotify.3$Z
    ln $S Thread.3$Z Tcl_ConditionWait.3$Z
    ln $S Thread.3$Z Tcl_ConditionFinalize.3$Z
    ln $S Thread.3$Z Tcl_GetThreadData.3$Z
    ln $S Thread.3$Z Tcl_MutexLock.3$Z
    ln $S Thread.3$Z Tcl_MutexUnlock.3$Z
    ln $S Thread.3$Z Tcl_MutexFinalize.3$Z
    ln $S Thread.3$Z Tcl_CreateThread.3$Z
    ln $S Thread.3$Z Tcl_JoinThread.3$Z
fi
if test -n "$ZIP" -a -r ToUpper.3; then
    rm -f ToUpper.3$Z
    $ZIP ToUpper.3
fi
if test -r ToUpper.3$Z; then
    rm -f Tcl_UniCharToUpper.3 Tcl_UniCharToUpper.3$Z
    rm -f Tcl_UniCharToLower.3 Tcl_UniCharToLower.3$Z
    rm -f Tcl_UniCharToTitle.3 Tcl_UniCharToTitle.3$Z
    rm -f Tcl_UtfToUpper.3 Tcl_UtfToUpper.3$Z
    rm -f Tcl_UtfToLower.3 Tcl_UtfToLower.3$Z
    rm -f Tcl_UtfToTitle.3 Tcl_UtfToTitle.3$Z
    ln $S ToUpper.3$Z Tcl_UniCharToUpper.3$Z
    ln $S ToUpper.3$Z Tcl_UniCharToLower.3$Z
    ln $S ToUpper.3$Z Tcl_UniCharToTitle.3$Z
    ln $S ToUpper.3$Z Tcl_UtfToUpper.3$Z
    ln $S ToUpper.3$Z Tcl_UtfToLower.3$Z
    ln $S ToUpper.3$Z Tcl_UtfToTitle.3$Z
fi
if test -n "$ZIP" -a -r TraceCmd.3; then
    rm -f TraceCmd.3$Z
    $ZIP TraceCmd.3
fi
if test -r TraceCmd.3$Z; then
    rm -f Tcl_CommandTraceInfo.3 Tcl_CommandTraceInfo.3$Z
    rm -f Tcl_TraceCommand.3 Tcl_TraceCommand.3$Z
    rm -f Tcl_UntraceCommand.3 Tcl_UntraceCommand.3$Z
    ln $S TraceCmd.3$Z Tcl_CommandTraceInfo.3$Z
    ln $S TraceCmd.3$Z Tcl_TraceCommand.3$Z
    ln $S TraceCmd.3$Z Tcl_UntraceCommand.3$Z
fi
if test -n "$ZIP" -a -r TraceVar.3; then
    rm -f TraceVar.3$Z
    $ZIP TraceVar.3
fi
if test -r TraceVar.3$Z; then
    rm -f Tcl_TraceVar.3 Tcl_TraceVar.3$Z
    rm -f Tcl_TraceVar2.3 Tcl_TraceVar2.3$Z
    rm -f Tcl_UntraceVar.3 Tcl_UntraceVar.3$Z
    rm -f Tcl_UntraceVar2.3 Tcl_UntraceVar2.3$Z
    rm -f Tcl_VarTraceInfo.3 Tcl_VarTraceInfo.3$Z
    rm -f Tcl_VarTraceInfo2.3 Tcl_VarTraceInfo2.3$Z
    ln $S TraceVar.3$Z Tcl_TraceVar.3$Z
    ln $S TraceVar.3$Z Tcl_TraceVar2.3$Z
    ln $S TraceVar.3$Z Tcl_UntraceVar.3$Z
    ln $S TraceVar.3$Z Tcl_UntraceVar2.3$Z
    ln $S TraceVar.3$Z Tcl_VarTraceInfo.3$Z
    ln $S TraceVar.3$Z Tcl_VarTraceInfo2.3$Z
fi
if test -n "$ZIP" -a -r Translate.3; then
    rm -f Translate.3$Z
    $ZIP Translate.3
fi
if test -r Translate.3$Z; then
    rm -f Tcl_TranslateFileName.3 Tcl_TranslateFileName.3$Z
    ln $S Translate.3$Z Tcl_TranslateFileName.3$Z
fi
if test -n "$ZIP" -a -r UniCharIsAlpha.3; then
    rm -f UniCharIsAlpha.3$Z
    $ZIP UniCharIsAlpha.3
fi
if test -r UniCharIsAlpha.3$Z; then
    rm -f Tcl_UniCharIsAlnum.3 Tcl_UniCharIsAlnum.3$Z
    rm -f Tcl_UniCharIsAlpha.3 Tcl_UniCharIsAlpha.3$Z
    rm -f Tcl_UniCharIsControl.3 Tcl_UniCharIsControl.3$Z
    rm -f Tcl_UniCharIsDigit.3 Tcl_UniCharIsDigit.3$Z
    rm -f Tcl_UniCharIsGraph.3 Tcl_UniCharIsGraph.3$Z
    rm -f Tcl_UniCharIsLower.3 Tcl_UniCharIsLower.3$Z
    rm -f Tcl_UniCharIsPrint.3 Tcl_UniCharIsPrint.3$Z
    rm -f Tcl_UniCharIsPunct.3 Tcl_UniCharIsPunct.3$Z
    rm -f Tcl_UniCharIsSpace.3 Tcl_UniCharIsSpace.3$Z
    rm -f Tcl_UniCharIsUpper.3 Tcl_UniCharIsUpper.3$Z
    rm -f Tcl_UniCharIsWordChar.3 Tcl_UniCharIsWordChar.3$Z
    ln $S UniCharIsAlpha.3$Z Tcl_UniCharIsAlnum.3$Z
    ln $S UniCharIsAlpha.3$Z Tcl_UniCharIsAlpha.3$Z
    ln $S UniCharIsAlpha.3$Z Tcl_UniCharIsControl.3$Z
    ln $S UniCharIsAlpha.3$Z Tcl_UniCharIsDigit.3$Z
    ln $S UniCharIsAlpha.3$Z Tcl_UniCharIsGraph.3$Z
    ln $S UniCharIsAlpha.3$Z Tcl_UniCharIsLower.3$Z
    ln $S UniCharIsAlpha.3$Z Tcl_UniCharIsPrint.3$Z
    ln $S UniCharIsAlpha.3$Z Tcl_UniCharIsPunct.3$Z
    ln $S UniCharIsAlpha.3$Z Tcl_UniCharIsSpace.3$Z
    ln $S UniCharIsAlpha.3$Z Tcl_UniCharIsUpper.3$Z
    ln $S UniCharIsAlpha.3$Z Tcl_UniCharIsWordChar.3$Z
fi
if test -n "$ZIP" -a -r UpVar.3; then
    rm -f UpVar.3$Z
    $ZIP UpVar.3
fi
if test -r UpVar.3$Z; then
    rm -f Tcl_UpVar.3 Tcl_UpVar.3$Z
    rm -f Tcl_UpVar2.3 Tcl_UpVar2.3$Z
    ln $S UpVar.3$Z Tcl_UpVar.3$Z
    ln $S UpVar.3$Z Tcl_UpVar2.3$Z
fi
if test -n "$ZIP" -a -r Utf.3; then
    rm -f Utf.3$Z
    $ZIP Utf.3
fi
if test -r Utf.3$Z; then
    rm -f Tcl_UniChar.3 Tcl_UniChar.3$Z
    rm -f Tcl_UniCharCaseMatch.3 Tcl_UniCharCaseMatch.3$Z
    rm -f Tcl_UniCharNcasecmp.3 Tcl_UniCharNcasecmp.3$Z
    rm -f Tcl_UniCharToUtf.3 Tcl_UniCharToUtf.3$Z
    rm -f Tcl_UtfToUniChar.3 Tcl_UtfToUniChar.3$Z
    rm -f Tcl_UniCharToUtfDString.3 Tcl_UniCharToUtfDString.3$Z
    rm -f Tcl_UtfToUniCharDString.3 Tcl_UtfToUniCharDString.3$Z
    rm -f Tcl_UniCharLen.3 Tcl_UniCharLen.3$Z
    rm -f Tcl_UniCharNcmp.3 Tcl_UniCharNcmp.3$Z
    rm -f Tcl_UtfCharComplete.3 Tcl_UtfCharComplete.3$Z
    rm -f Tcl_NumUtfChars.3 Tcl_NumUtfChars.3$Z
    rm -f Tcl_UtfFindFirst.3 Tcl_UtfFindFirst.3$Z
    rm -f Tcl_UtfFindLast.3 Tcl_UtfFindLast.3$Z
    rm -f Tcl_UtfNext.3 Tcl_UtfNext.3$Z
    rm -f Tcl_UtfPrev.3 Tcl_UtfPrev.3$Z
    rm -f Tcl_UniCharAtIndex.3 Tcl_UniCharAtIndex.3$Z
    rm -f Tcl_UtfAtIndex.3 Tcl_UtfAtIndex.3$Z
    rm -f Tcl_UtfBackslash.3 Tcl_UtfBackslash.3$Z
    ln $S Utf.3$Z Tcl_UniChar.3$Z
    ln $S Utf.3$Z Tcl_UniCharCaseMatch.3$Z
    ln $S Utf.3$Z Tcl_UniCharNcasecmp.3$Z
    ln $S Utf.3$Z Tcl_UniCharToUtf.3$Z
    ln $S Utf.3$Z Tcl_UtfToUniChar.3$Z
    ln $S Utf.3$Z Tcl_UniCharToUtfDString.3$Z
    ln $S Utf.3$Z Tcl_UtfToUniCharDString.3$Z
    ln $S Utf.3$Z Tcl_UniCharLen.3$Z
    ln $S Utf.3$Z Tcl_UniCharNcmp.3$Z
    ln $S Utf.3$Z Tcl_UtfCharComplete.3$Z
    ln $S Utf.3$Z Tcl_NumUtfChars.3$Z
    ln $S Utf.3$Z Tcl_UtfFindFirst.3$Z
    ln $S Utf.3$Z Tcl_UtfFindLast.3$Z
    ln $S Utf.3$Z Tcl_UtfNext.3$Z
    ln $S Utf.3$Z Tcl_UtfPrev.3$Z
    ln $S Utf.3$Z Tcl_UniCharAtIndex.3$Z
    ln $S Utf.3$Z Tcl_UtfAtIndex.3$Z
    ln $S Utf.3$Z Tcl_UtfBackslash.3$Z
fi
if test -n "$ZIP" -a -r WrongNumArgs.3; then
    rm -f WrongNumArgs.3$Z
    $ZIP WrongNumArgs.3
fi
if test -r WrongNumArgs.3$Z; then
    rm -f Tcl_WrongNumArgs.3 Tcl_WrongNumArgs.3$Z
    ln $S WrongNumArgs.3$Z Tcl_WrongNumArgs.3$Z
fi
if test -n "$ZIP" -a -r after.n; then
    rm -f after.n$Z
    $ZIP after.n
fi
if test -n "$ZIP" -a -r append.n; then
    rm -f append.n$Z
    $ZIP append.n
fi
if test -n "$ZIP" -a -r array.n; then
    rm -f array.n$Z
    $ZIP array.n
fi
if test -n "$ZIP" -a -r bgerror.n; then
    rm -f bgerror.n$Z
    $ZIP bgerror.n
fi
if test -n "$ZIP" -a -r binary.n; then
    rm -f binary.n$Z
    $ZIP binary.n
fi
if test -n "$ZIP" -a -r break.n; then
    rm -f break.n$Z
    $ZIP break.n
fi
if test -n "$ZIP" -a -r case.n; then
    rm -f case.n$Z
    $ZIP case.n
fi
if test -n "$ZIP" -a -r catch.n; then
    rm -f catch.n$Z
    $ZIP catch.n
fi
if test -n "$ZIP" -a -r cd.n; then
    rm -f cd.n$Z
    $ZIP cd.n
fi
if test -n "$ZIP" -a -r clock.n; then
    rm -f clock.n$Z
    $ZIP clock.n
fi
if test -n "$ZIP" -a -r close.n; then
    rm -f close.n$Z
    $ZIP close.n
fi
if test -n "$ZIP" -a -r concat.n; then
    rm -f concat.n$Z
    $ZIP concat.n
fi
if test -n "$ZIP" -a -r continue.n; then
    rm -f continue.n$Z
    $ZIP continue.n
fi
if test -n "$ZIP" -a -r dde.n; then
    rm -f dde.n$Z
    $ZIP dde.n
fi
if test -n "$ZIP" -a -r encoding.n; then
    rm -f encoding.n$Z
    $ZIP encoding.n
fi
if test -n "$ZIP" -a -r eof.n; then
    rm -f eof.n$Z
    $ZIP eof.n
fi
if test -n "$ZIP" -a -r error.n; then
    rm -f error.n$Z
    $ZIP error.n
fi
if test -n "$ZIP" -a -r eval.n; then
    rm -f eval.n$Z
    $ZIP eval.n
fi
if test -n "$ZIP" -a -r exec.n; then
    rm -f exec.n$Z
    $ZIP exec.n
fi
if test -n "$ZIP" -a -r exit.n; then
    rm -f exit.n$Z
    $ZIP exit.n
fi
if test -n "$ZIP" -a -r expr.n; then
    rm -f expr.n$Z
    $ZIP expr.n
fi
if test -n "$ZIP" -a -r fblocked.n; then
    rm -f fblocked.n$Z
    $ZIP fblocked.n
fi
if test -n "$ZIP" -a -r fconfigure.n; then
    rm -f fconfigure.n$Z
    $ZIP fconfigure.n
fi
if test -n "$ZIP" -a -r fcopy.n; then
    rm -f fcopy.n$Z
    $ZIP fcopy.n
fi
if test -n "$ZIP" -a -r file.n; then
    rm -f file.n$Z
    $ZIP file.n
fi
if test -n "$ZIP" -a -r fileevent.n; then
    rm -f fileevent.n$Z
    $ZIP fileevent.n
fi
if test -n "$ZIP" -a -r filename.n; then
    rm -f filename.n$Z
    $ZIP filename.n
fi
if test -n "$ZIP" -a -r flush.n; then
    rm -f flush.n$Z
    $ZIP flush.n
fi
if test -n "$ZIP" -a -r for.n; then
    rm -f for.n$Z
    $ZIP for.n
fi
if test -n "$ZIP" -a -r foreach.n; then
    rm -f foreach.n$Z
    $ZIP foreach.n
fi
if test -n "$ZIP" -a -r format.n; then
    rm -f format.n$Z
    $ZIP format.n
fi
if test -n "$ZIP" -a -r gets.n; then
    rm -f gets.n$Z
    $ZIP gets.n
fi
if test -n "$ZIP" -a -r glob.n; then
    rm -f glob.n$Z
    $ZIP glob.n
fi
if test -n "$ZIP" -a -r global.n; then
    rm -f global.n$Z
    $ZIP global.n
fi
if test -n "$ZIP" -a -r history.n; then
    rm -f history.n$Z
    $ZIP history.n
fi
if test -n "$ZIP" -a -r http.n; then
    rm -f http.n$Z
    $ZIP http.n
fi
if test -r http.n$Z; then
    if test "${CASEINSENSITIVEFS:-}" != "1"; then rm -f Http.n Http.n$Z; fi
    if test "${CASEINSENSITIVEFS:-}" != "1"; then ln $S http.n$Z Http.n$Z; fi
fi
if test -n "$ZIP" -a -r if.n; then
    rm -f if.n$Z
    $ZIP if.n
fi
if test -n "$ZIP" -a -r incr.n; then
    rm -f incr.n$Z
    $ZIP incr.n
fi
if test -n "$ZIP" -a -r info.n; then
    rm -f info.n$Z
    $ZIP info.n
fi
if test -n "$ZIP" -a -r interp.n; then
    rm -f interp.n$Z
    $ZIP interp.n
fi
if test -n "$ZIP" -a -r join.n; then
    rm -f join.n$Z
    $ZIP join.n
fi
if test -n "$ZIP" -a -r lappend.n; then
    rm -f lappend.n$Z
    $ZIP lappend.n
fi
if test -n "$ZIP" -a -r library.n; then
    rm -f library.n$Z
    $ZIP library.n
fi
if test -r library.n$Z; then
    rm -f auto_execok.n auto_execok.n$Z
    rm -f auto_import.n auto_import.n$Z
    rm -f auto_load.n auto_load.n$Z
    rm -f auto_mkindex.n auto_mkindex.n$Z
    rm -f auto_mkindex_old.n auto_mkindex_old.n$Z
    rm -f auto_qualify.n auto_qualify.n$Z
    rm -f auto_reset.n auto_reset.n$Z
    rm -f tcl_findLibrary.n tcl_findLibrary.n$Z
    rm -f parray.n parray.n$Z
    rm -f tcl_endOfWord.n tcl_endOfWord.n$Z
    rm -f tcl_startOfNextWord.n tcl_startOfNextWord.n$Z
    rm -f tcl_startOfPreviousWord.n tcl_startOfPreviousWord.n$Z
    rm -f tcl_wordBreakAfter.n tcl_wordBreakAfter.n$Z
    rm -f tcl_wordBreakBefore.n tcl_wordBreakBefore.n$Z
    ln $S library.n$Z auto_execok.n$Z
    ln $S library.n$Z auto_import.n$Z
    ln $S library.n$Z auto_load.n$Z
    ln $S library.n$Z auto_mkindex.n$Z
    ln $S library.n$Z auto_mkindex_old.n$Z
    ln $S library.n$Z auto_qualify.n$Z
    ln $S library.n$Z auto_reset.n$Z
    ln $S library.n$Z tcl_findLibrary.n$Z
    ln $S library.n$Z parray.n$Z
    ln $S library.n$Z tcl_endOfWord.n$Z
    ln $S library.n$Z tcl_startOfNextWord.n$Z
    ln $S library.n$Z tcl_startOfPreviousWord.n$Z
    ln $S library.n$Z tcl_wordBreakAfter.n$Z
    ln $S library.n$Z tcl_wordBreakBefore.n$Z
fi
if test -n "$ZIP" -a -r lindex.n; then
    rm -f lindex.n$Z
    $ZIP lindex.n
fi
if test -n "$ZIP" -a -r linsert.n; then
    rm -f linsert.n$Z
    $ZIP linsert.n
fi
if test -n "$ZIP" -a -r list.n; then
    rm -f list.n$Z
    $ZIP list.n
fi
if test -n "$ZIP" -a -r llength.n; then
    rm -f llength.n$Z
    $ZIP llength.n
fi
if test -n "$ZIP" -a -r load.n; then
    rm -f load.n$Z
    $ZIP load.n
fi
if test -n "$ZIP" -a -r lrange.n; then
    rm -f lrange.n$Z
    $ZIP lrange.n
fi
if test -n "$ZIP" -a -r lreplace.n; then
    rm -f lreplace.n$Z
    $ZIP lreplace.n
fi
if test -n "$ZIP" -a -r lsearch.n; then
    rm -f lsearch.n$Z
    $ZIP lsearch.n
fi
if test -n "$ZIP" -a -r lset.n; then
    rm -f lset.n$Z
    $ZIP lset.n
fi
if test -n "$ZIP" -a -r lsort.n; then
    rm -f lsort.n$Z
    $ZIP lsort.n
fi
if test -n "$ZIP" -a -r memory.n; then
    rm -f memory.n$Z
    $ZIP memory.n
fi
if test -n "$ZIP" -a -r msgcat.n; then
    rm -f msgcat.n$Z
    $ZIP msgcat.n
fi
if test -n "$ZIP" -a -r namespace.n; then
    rm -f namespace.n$Z
    $ZIP namespace.n
fi
if test -n "$ZIP" -a -r open.n; then
    rm -f open.n$Z
    $ZIP open.n
fi
if test -n "$ZIP" -a -r package.n; then
    rm -f package.n$Z
    $ZIP package.n
fi
if test -n "$ZIP" -a -r packagens.n; then
    rm -f packagens.n$Z
    $ZIP packagens.n
fi
if test -r packagens.n$Z; then
    rm -f pkg::create.n pkg::create.n$Z
    ln $S packagens.n$Z pkg::create.n$Z
fi
if test -n "$ZIP" -a -r pid.n; then
    rm -f pid.n$Z
    $ZIP pid.n
fi
if test -n "$ZIP" -a -r pkgMkIndex.n; then
    rm -f pkgMkIndex.n$Z
    $ZIP pkgMkIndex.n
fi
if test -r pkgMkIndex.n$Z; then
    rm -f pkg_mkIndex.n pkg_mkIndex.n$Z
    ln $S pkgMkIndex.n$Z pkg_mkIndex.n$Z
fi
if test -n "$ZIP" -a -r proc.n; then
    rm -f proc.n$Z
    $ZIP proc.n
fi
if test -n "$ZIP" -a -r puts.n; then
    rm -f puts.n$Z
    $ZIP puts.n
fi
if test -n "$ZIP" -a -r pwd.n; then
    rm -f pwd.n$Z
    $ZIP pwd.n
fi
if test -n "$ZIP" -a -r re_syntax.n; then
    rm -f re_syntax.n$Z
    $ZIP re_syntax.n
fi
if test -n "$ZIP" -a -r read.n; then
    rm -f read.n$Z
    $ZIP read.n
fi
if test -n "$ZIP" -a -r regexp.n; then
    rm -f regexp.n$Z
    $ZIP regexp.n
fi
if test -n "$ZIP" -a -r registry.n; then
    rm -f registry.n$Z
    $ZIP registry.n
fi
if test -n "$ZIP" -a -r regsub.n; then
    rm -f regsub.n$Z
    $ZIP regsub.n
fi
if test -n "$ZIP" -a -r rename.n; then
    rm -f rename.n$Z
    $ZIP rename.n
fi
if test -n "$ZIP" -a -r resource.n; then
    rm -f resource.n$Z
    $ZIP resource.n
fi
if test -n "$ZIP" -a -r return.n; then
    rm -f return.n$Z
    $ZIP return.n
fi
if test -n "$ZIP" -a -r safe.n; then
    rm -f safe.n$Z
    $ZIP safe.n
fi
if test -r safe.n$Z; then
    rm -f SafeBase.n SafeBase.n$Z
    ln $S safe.n$Z SafeBase.n$Z
fi
if test -n "$ZIP" -a -r scan.n; then
    rm -f scan.n$Z
    $ZIP scan.n
fi
if test -n "$ZIP" -a -r seek.n; then
    rm -f seek.n$Z
    $ZIP seek.n
fi
if test -n "$ZIP" -a -r set.n; then
    rm -f set.n$Z
    $ZIP set.n
fi
if test -n "$ZIP" -a -r socket.n; then
    rm -f socket.n$Z
    $ZIP socket.n
fi
if test -n "$ZIP" -a -r source.n; then
    rm -f source.n$Z
    $ZIP source.n
fi
if test -n "$ZIP" -a -r split.n; then
    rm -f split.n$Z
    $ZIP split.n
fi
if test -n "$ZIP" -a -r string.n; then
    rm -f string.n$Z
    $ZIP string.n
fi
if test -n "$ZIP" -a -r subst.n; then
    rm -f subst.n$Z
    $ZIP subst.n
fi
if test -n "$ZIP" -a -r switch.n; then
    rm -f switch.n$Z
    $ZIP switch.n
fi
if test -n "$ZIP" -a -r tclsh.1; then
    rm -f tclsh.1$Z
    $ZIP tclsh.1
fi
if test -n "$ZIP" -a -r tcltest.n; then
    rm -f tcltest.n$Z
    $ZIP tcltest.n
fi
if test -n "$ZIP" -a -r tclvars.n; then
    rm -f tclvars.n$Z
    $ZIP tclvars.n
fi
if test -n "$ZIP" -a -r tell.n; then
    rm -f tell.n$Z
    $ZIP tell.n
fi
if test -n "$ZIP" -a -r time.n; then
    rm -f time.n$Z
    $ZIP time.n
fi
if test -n "$ZIP" -a -r trace.n; then
    rm -f trace.n$Z
    $ZIP trace.n
fi
if test -n "$ZIP" -a -r unknown.n; then
    rm -f unknown.n$Z
    $ZIP unknown.n
fi
if test -n "$ZIP" -a -r unset.n; then
    rm -f unset.n$Z
    $ZIP unset.n
fi
if test -n "$ZIP" -a -r update.n; then
    rm -f update.n$Z
    $ZIP update.n
fi
if test -n "$ZIP" -a -r uplevel.n; then
    rm -f uplevel.n$Z
    $ZIP uplevel.n
fi
if test -n "$ZIP" -a -r upvar.n; then
    rm -f upvar.n$Z
    $ZIP upvar.n
fi
if test -n "$ZIP" -a -r variable.n; then
    rm -f variable.n$Z
    $ZIP variable.n
fi
if test -n "$ZIP" -a -r vwait.n; then
    rm -f vwait.n$Z
    $ZIP vwait.n
fi
if test -n "$ZIP" -a -r while.n; then
    rm -f while.n$Z
    $ZIP while.n
fi
exit 0
